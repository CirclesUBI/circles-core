(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('isomorphic-fetch')) :
  typeof define === 'function' && define.amd ? define(['isomorphic-fetch'], factory) :
  (global = global || self, global.CirclesCore = factory(global.fetch));
}(this, function (fetch) { 'use strict';

  fetch = fetch && fetch.hasOwnProperty('default') ? fetch['default'] : fetch;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  var classCallCheck = _classCallCheck;

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var _typeof_1 = createCommonjsModule(function (module) {
    function _typeof2(obj) {
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof2 = function _typeof2(obj) {
          return typeof obj;
        };
      } else {
        _typeof2 = function _typeof2(obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
      }
      return _typeof2(obj);
    }
    function _typeof(obj) {
      if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
        module.exports = _typeof = function _typeof(obj) {
          return _typeof2(obj);
        };
      } else {
        module.exports = _typeof = function _typeof(obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
        };
      }
      return _typeof(obj);
    }
    module.exports = _typeof;
  });

  var DEFAULT_TYPE = 'string';
  var validators = {
    number: function number(value) {
      return typeof value === 'number';
    },
    string: function string(value) {
      return typeof value === 'string';
    },
    object: function object(value) {
      return _typeof_1(value) === 'object';
    },
    array: function array(value) {
      return Array.isArray(value);
    }
  };
  function checkOptions(options, fields) {
    if (!options || _typeof_1(options) !== 'object') {
      throw new Error('Options missing');
    }
    return Object.keys(fields).reduce(function (acc, key) {
      var type = fields[key] && 'type' in fields[key] && fields[key].type in validators ? fields[key].type : DEFAULT_TYPE;
      var validatorFn = typeof type === 'function' ? type : validators[type];
      var defaultValue = fields[key] && 'default' in fields[key] ? fields[key]["default"] : null;
      if (defaultValue !== null && !validatorFn(defaultValue)) {
        throw new Error("Field \"".concat(key, "\" has invalid default type"));
      }
      if (!(key in options) || !options[key]) {
        if (defaultValue === null) {
          throw new Error("\"".concat(key, "\" is missing in options"));
        }
        acc[key] = defaultValue;
      } else if (validatorFn(options[key])) {
        acc[key] = options[key];
      } else {
        throw new Error("\"".concat(key, "\" has invalid type"));
      }
      return acc;
    }, {});
  }

  var contractName = "GnosisSafe";
  var abi = [{
    constant: false,
    inputs: [{
      name: "owner",
      type: "address"
    }, {
      name: "_threshold",
      type: "uint256"
    }],
    name: "addOwnerWithThreshold",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  }, {
    constant: true,
    inputs: [],
    name: "DOMAIN_SEPARATOR_TYPEHASH",
    outputs: [{
      name: "",
      type: "bytes32"
    }],
    payable: false,
    stateMutability: "view",
    type: "function"
  }, {
    constant: true,
    inputs: [{
      name: "owner",
      type: "address"
    }],
    name: "isOwner",
    outputs: [{
      name: "",
      type: "bool"
    }],
    payable: false,
    stateMutability: "view",
    type: "function"
  }, {
    constant: false,
    inputs: [{
      name: "to",
      type: "address"
    }, {
      name: "value",
      type: "uint256"
    }, {
      name: "data",
      type: "bytes"
    }, {
      name: "operation",
      type: "uint8"
    }],
    name: "execTransactionFromModule",
    outputs: [{
      name: "success",
      type: "bool"
    }],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  }, {
    constant: true,
    inputs: [{
      name: "",
      type: "bytes32"
    }],
    name: "signedMessages",
    outputs: [{
      name: "",
      type: "uint256"
    }],
    payable: false,
    stateMutability: "view",
    type: "function"
  }, {
    constant: false,
    inputs: [{
      name: "module",
      type: "address"
    }],
    name: "enableModule",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  }, {
    constant: false,
    inputs: [{
      name: "_threshold",
      type: "uint256"
    }],
    name: "changeThreshold",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  }, {
    constant: true,
    inputs: [{
      name: "",
      type: "address"
    }, {
      name: "",
      type: "bytes32"
    }],
    name: "approvedHashes",
    outputs: [{
      name: "",
      type: "uint256"
    }],
    payable: false,
    stateMutability: "view",
    type: "function"
  }, {
    constant: false,
    inputs: [{
      name: "_masterCopy",
      type: "address"
    }],
    name: "changeMasterCopy",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  }, {
    constant: true,
    inputs: [],
    name: "SENTINEL_MODULES",
    outputs: [{
      name: "",
      type: "address"
    }],
    payable: false,
    stateMutability: "view",
    type: "function"
  }, {
    constant: true,
    inputs: [],
    name: "SENTINEL_OWNERS",
    outputs: [{
      name: "",
      type: "address"
    }],
    payable: false,
    stateMutability: "view",
    type: "function"
  }, {
    constant: true,
    inputs: [],
    name: "getOwners",
    outputs: [{
      name: "",
      type: "address[]"
    }],
    payable: false,
    stateMutability: "view",
    type: "function"
  }, {
    constant: true,
    inputs: [],
    name: "NAME",
    outputs: [{
      name: "",
      type: "string"
    }],
    payable: false,
    stateMutability: "view",
    type: "function"
  }, {
    constant: true,
    inputs: [],
    name: "nonce",
    outputs: [{
      name: "",
      type: "uint256"
    }],
    payable: false,
    stateMutability: "view",
    type: "function"
  }, {
    constant: true,
    inputs: [],
    name: "getModules",
    outputs: [{
      name: "",
      type: "address[]"
    }],
    payable: false,
    stateMutability: "view",
    type: "function"
  }, {
    constant: true,
    inputs: [],
    name: "SAFE_MSG_TYPEHASH",
    outputs: [{
      name: "",
      type: "bytes32"
    }],
    payable: false,
    stateMutability: "view",
    type: "function"
  }, {
    constant: true,
    inputs: [],
    name: "SAFE_TX_TYPEHASH",
    outputs: [{
      name: "",
      type: "bytes32"
    }],
    payable: false,
    stateMutability: "view",
    type: "function"
  }, {
    constant: false,
    inputs: [{
      name: "prevModule",
      type: "address"
    }, {
      name: "module",
      type: "address"
    }],
    name: "disableModule",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  }, {
    constant: false,
    inputs: [{
      name: "prevOwner",
      type: "address"
    }, {
      name: "oldOwner",
      type: "address"
    }, {
      name: "newOwner",
      type: "address"
    }],
    name: "swapOwner",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  }, {
    constant: true,
    inputs: [],
    name: "getThreshold",
    outputs: [{
      name: "",
      type: "uint256"
    }],
    payable: false,
    stateMutability: "view",
    type: "function"
  }, {
    constant: true,
    inputs: [],
    name: "domainSeparator",
    outputs: [{
      name: "",
      type: "bytes32"
    }],
    payable: false,
    stateMutability: "view",
    type: "function"
  }, {
    constant: false,
    inputs: [{
      name: "prevOwner",
      type: "address"
    }, {
      name: "owner",
      type: "address"
    }, {
      name: "_threshold",
      type: "uint256"
    }],
    name: "removeOwner",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  }, {
    constant: true,
    inputs: [],
    name: "VERSION",
    outputs: [{
      name: "",
      type: "string"
    }],
    payable: false,
    stateMutability: "view",
    type: "function"
  }, {
    payable: true,
    stateMutability: "payable",
    type: "fallback"
  }, {
    anonymous: false,
    inputs: [{
      indexed: false,
      name: "txHash",
      type: "bytes32"
    }],
    name: "ExecutionFailed",
    type: "event"
  }, {
    anonymous: false,
    inputs: [{
      indexed: false,
      name: "owner",
      type: "address"
    }],
    name: "AddedOwner",
    type: "event"
  }, {
    anonymous: false,
    inputs: [{
      indexed: false,
      name: "owner",
      type: "address"
    }],
    name: "RemovedOwner",
    type: "event"
  }, {
    anonymous: false,
    inputs: [{
      indexed: false,
      name: "threshold",
      type: "uint256"
    }],
    name: "ChangedThreshold",
    type: "event"
  }, {
    anonymous: false,
    inputs: [{
      indexed: false,
      name: "module",
      type: "address"
    }],
    name: "EnabledModule",
    type: "event"
  }, {
    anonymous: false,
    inputs: [{
      indexed: false,
      name: "module",
      type: "address"
    }],
    name: "DisabledModule",
    type: "event"
  }, {
    anonymous: false,
    inputs: [{
      indexed: false,
      name: "newContract",
      type: "address"
    }],
    name: "ContractCreation",
    type: "event"
  }, {
    constant: false,
    inputs: [{
      name: "_owners",
      type: "address[]"
    }, {
      name: "_threshold",
      type: "uint256"
    }, {
      name: "to",
      type: "address"
    }, {
      name: "data",
      type: "bytes"
    }, {
      name: "paymentToken",
      type: "address"
    }, {
      name: "payment",
      type: "uint256"
    }, {
      name: "paymentReceiver",
      type: "address"
    }],
    name: "setup",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  }, {
    constant: false,
    inputs: [{
      name: "to",
      type: "address"
    }, {
      name: "value",
      type: "uint256"
    }, {
      name: "data",
      type: "bytes"
    }, {
      name: "operation",
      type: "uint8"
    }, {
      name: "safeTxGas",
      type: "uint256"
    }, {
      name: "baseGas",
      type: "uint256"
    }, {
      name: "gasPrice",
      type: "uint256"
    }, {
      name: "gasToken",
      type: "address"
    }, {
      name: "refundReceiver",
      type: "address"
    }, {
      name: "signatures",
      type: "bytes"
    }],
    name: "execTransaction",
    outputs: [{
      name: "success",
      type: "bool"
    }],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  }, {
    constant: false,
    inputs: [{
      name: "to",
      type: "address"
    }, {
      name: "value",
      type: "uint256"
    }, {
      name: "data",
      type: "bytes"
    }, {
      name: "operation",
      type: "uint8"
    }],
    name: "requiredTxGas",
    outputs: [{
      name: "",
      type: "uint256"
    }],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  }, {
    constant: false,
    inputs: [{
      name: "hashToApprove",
      type: "bytes32"
    }],
    name: "approveHash",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  }, {
    constant: false,
    inputs: [{
      name: "_data",
      type: "bytes"
    }],
    name: "signMessage",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  }, {
    constant: false,
    inputs: [{
      name: "_data",
      type: "bytes"
    }, {
      name: "_signature",
      type: "bytes"
    }],
    name: "isValidSignature",
    outputs: [{
      name: "",
      type: "bytes4"
    }],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  }, {
    constant: true,
    inputs: [{
      name: "message",
      type: "bytes"
    }],
    name: "getMessageHash",
    outputs: [{
      name: "",
      type: "bytes32"
    }],
    payable: false,
    stateMutability: "view",
    type: "function"
  }, {
    constant: true,
    inputs: [{
      name: "to",
      type: "address"
    }, {
      name: "value",
      type: "uint256"
    }, {
      name: "data",
      type: "bytes"
    }, {
      name: "operation",
      type: "uint8"
    }, {
      name: "safeTxGas",
      type: "uint256"
    }, {
      name: "baseGas",
      type: "uint256"
    }, {
      name: "gasPrice",
      type: "uint256"
    }, {
      name: "gasToken",
      type: "address"
    }, {
      name: "refundReceiver",
      type: "address"
    }, {
      name: "_nonce",
      type: "uint256"
    }],
    name: "encodeTransactionData",
    outputs: [{
      name: "",
      type: "bytes"
    }],
    payable: false,
    stateMutability: "view",
    type: "function"
  }, {
    constant: true,
    inputs: [{
      name: "to",
      type: "address"
    }, {
      name: "value",
      type: "uint256"
    }, {
      name: "data",
      type: "bytes"
    }, {
      name: "operation",
      type: "uint8"
    }, {
      name: "safeTxGas",
      type: "uint256"
    }, {
      name: "baseGas",
      type: "uint256"
    }, {
      name: "gasPrice",
      type: "uint256"
    }, {
      name: "gasToken",
      type: "address"
    }, {
      name: "refundReceiver",
      type: "address"
    }, {
      name: "_nonce",
      type: "uint256"
    }],
    name: "getTransactionHash",
    outputs: [{
      name: "",
      type: "bytes32"
    }],
    payable: false,
    stateMutability: "view",
    type: "function"
  }];
  var bytecode = "";
  var deployedBytecode = "";
  var sourceMap = "568:16437:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;568:16437:0;;;;;;;";
  var deployedSourceMap = "568:16437:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14069:367;;8:9:-1;5:2;;;30:1;27;20:12;5:2;14069:367:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;14069:367:0;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;14069:367:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;14069:367:0;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;14069:367:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;14069:367:0;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2250:645:6;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2250:645:6;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2250:645:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;887:118:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;887:118:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;13404:507;;8:9:-1;5:2;;;30:1;27;20:12;5:2;13404:507:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;13404:507:0;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;13404:507:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;13404:507:0;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;13404:507:0;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;13404:507:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;13404:507:0;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;13404:507:0;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;6022:166:6;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6022:166:6;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6022:166:6;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;2909:479:5;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2909:479:5;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;2909:479:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;2909:479:5;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;2909:479:5;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;2909:479:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;2909:479:5;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1716:49:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1716:49:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1716:49:0;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1207:540:5;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1207:540:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1207:540:5;;;;;;;;;;;;;;;;;;;:::i;:::-;;5454:441:6;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5454:441:6;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5454:441:6;;;;;;;;;;;;;;;;;:::i;:::-;;4316:1478:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4316:1478:0;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;4316:1478:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;4316:1478:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;4316:1478:0;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;4316:1478:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;4316:1478:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;4316:1478:0;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;4316:1478:0;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1876:69;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1876:69:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1876:69:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;626:257:9;;8:9:-1;5:2;;;30:1;27;20:12;5:2;626:257:9;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;626:257:9;;;;;;;;;;;;;;;;;;;:::i;:::-;;12929:142:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;12929:142:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;12929:142:0;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;12929:142:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;12929:142:0;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;12929:142:0;;;;;;;;;;;;:::i;:::-;;488:55:5;;8:9:-1;5:2;;;30:1;27;20:12;5:2;488:55:5;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;419:54:6;;8:9:-1;5:2;;;30:1;27;20:12;5:2;419:54:6;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;6270:465;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6270:465:6;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;6270:465:6;;;;;;;;;;;;;;;;;713:43:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;713:43:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;713:43:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2487:799;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2487:799:0;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;2487:799:0;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;2487:799:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;2487:799:0;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;2487:799:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;2487:799:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;2487:799:0;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;2487:799:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1557:20;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1557:20:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;3467:745:5;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3467:745:5;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;3467:745:5;;;;;;;;;;;;;;;;;1396:110:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1396:110:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;11727:583;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11727:583:0;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;11727:583:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;11727:583:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;11727:583:0;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;11727:583:0;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1215:109;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1215:109:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;12554:212;;8:9:-1;5:2;;;30:1;27;20:12;5:2;12554:212:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;12554:212:0;;;;;;;;;;;;;;;;;:::i;:::-;;16493:510;;8:9:-1;5:2;;;30:1;27;20:12;5:2;16493:510:0;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;16493:510:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;16493:510:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;16493:510:0;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;16493:510:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;16493:510:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2008:565:5;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2008:565:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2008:565:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;4406:859:6;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4406:859:6;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4406:859:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;5901:115;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5901:115:6;;;:::i;:::-;;;;;;;;;;;;;;;;;;;15149:658:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;15149:658:0;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;15149:658:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;15149:658:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;15149:658:0;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;15149:658:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;15149:658:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;15149:658:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1583:30;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1583:30:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;3237:835:6;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3237:835:6;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3237:835:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;762:40:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;762:40:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;762:40:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14069:367;14174:7;14197:23;1440:66;14257:17;;14286:7;14276:18;;;;;;14246:49;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;14246::0;;;14223:82;;;;;;14197:108;;14367:4;14362:10;;14379:4;14374:10;;14386:15;;14403;14345:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;14345:74:0;;;14322:107;;;;;;14315:114;;;14069:367;;;:::o;2250:645:6:-;244:4:11;222:27;;:10;:27;;;214:84;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2430:1:6;2413:19;;:5;:19;;;;:47;;;;;469:3;2436:24;;:5;:24;;;;2413:47;2405:90;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2578:1;2553:27;;:6;:13;2560:5;2553:13;;;;;;;;;;;;;;;;;;;;;;;;;:27;;;2545:67;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2638:6;:23;469:3;2638:23;;;;;;;;;;;;;;;;;;;;;;;;;2622:6;:13;2629:5;2622:13;;;;;;;;;;;;;;;;:39;;;;;;;;;;;;;;;;;;2697:5;2671:6;:23;469:3;2671:23;;;;;;;;;;;;;;;;:31;;;;;;;;;;;;;;;;;;2712:10;;:12;;;;;;;;;;;;;2739:17;2750:5;2739:17;;;;;;;;;;;;;;;;;;;;;;2837:10;2824:9;;:23;2820:68;;2861:27;2877:10;2861:15;:27::i;:::-;2820:68;2250:645;;:::o;887:118:0:-;939:66;887:118;;;:::o;13404:507::-;13513:6;13535:19;13557:21;13572:5;;13557:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;13557:21:0;;;;;;:14;:21::i;:::-;13535:43;;13613:1;13592:10;;:17;;:22;13588:281;;;13669:1;13638:14;:27;13653:11;13638:27;;;;;;;;;;;;:32;;13630:62;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13588:281;;;13804:54;13820:11;13833:5;;13804:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;13804:54:0;;;;;;13840:10;;13804:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;13804:54:0;;;;;;13852:5;13804:15;:54::i;:::-;13588:281;164:10:14;13885:19:0;;13878:26;;;13404:507;;;;;;:::o;6022:166:6:-;6099:4;469:3;6126:24;;:5;:24;;;;:55;;;;;6179:1;6154:27;;:6;:13;6161:5;6154:13;;;;;;;;;;;;;;;;;;;;;;;;;:27;;;;6126:55;6119:62;;6022:166;;;:::o;2909:479:5:-;3048:12;539:3;3133:30;;:10;:30;;;;:67;;;;;3198:1;3167:33;;:7;:19;3175:10;3167:19;;;;;;;;;;;;;;;;;;;;;;;;;:33;;;;3133:67;3125:128;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3335:46;3343:2;3347:5;3354:4;3360:9;3371;3335:7;:46::i;:::-;3325:56;;2909:479;;;;;;:::o;1716:49:0:-;;;;;;;;;;;;;;;;;:::o;1207:540:5:-;244:4:11;222:27;;:10;:27;;;214:84;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1381:1:5;1354:29;;1362:6;1354:29;;;;:68;;;;;539:3;1387:35;;1395:6;1387:35;;;;1354:68;1346:112;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1553:1;1517:38;;:7;:24;1533:6;1517:24;;;;;;;;;;;;;;;;;;;;;;;;;:38;;;1509:80;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1626:7;:25;539:3;1626:25;;;;;;;;;;;;;;;;;;;;;;;;;1599:7;:24;1615:6;1599:24;;;;;;;;;;;;;;;;:52;;;;;;;;;;;;;;;;;;1697:6;1661:7;:25;539:3;1661:25;;;;;;;;;;;;;;;;:43;;;;;;;;;;;;;;;;;;1719:21;1733:6;1719:21;;;;;;;;;;;;;;;;;;;;;;1207:540;:::o;5454:441:6:-;244:4:11;222:27;;:10;:27;;;214:84;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5638:10:6;;5624;:24;;5616:72;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5772:1;5758:10;:15;;5750:64;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5836:10;5824:9;:22;;;;5861:27;5878:9;;5861:27;;;;;;;;;;;;;;;;;;5454:441;:::o;4316:1478:0:-;4666:12;4694:23;4720:194;4755:2;4759:5;4766:4;;4720:194;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;4720:194:0;;;;;;4772:9;4815;4826:7;4835:8;4845;4855:14;4899:5;;4720:21;:194::i;:::-;4694:220;;4975:5;;:7;;;;;;;;;;;;;4992:68;5018:10;5008:21;;;;;;5031:10;5043;;4992:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;4992:68:0;;;;;;5055:4;4992:15;:68::i;:::-;5091:9;5078;:22;;5070:77;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5157:15;5175:9;5157:27;;5311:92;5319:2;5323:5;5330:4;;5311:92;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;5311:92:0;;;;;;5336:9;5360:1;5347:9;:14;:31;;;;;5377:1;5365:8;:13;5347:31;:55;;5393:9;5347:55;;;5381:9;5347:55;5311:7;:92::i;:::-;5301:102;;5423:22;5435:9;5423:7;:11;;:22;;;;:::i;:::-;5413:32;;5460:7;5455:82;;5488:38;5514:10;5504:21;;;;;;5488:38;;;;;;;;;;;;;;;;;;5455:82;5693:1;5682:8;:12;5678:110;;;5710:67;5724:7;5733;5742:8;5752;5762:14;5710:13;:67::i;:::-;5678:110;4316:1478;;;;;;;;;;;;;;;;:::o;1876:69::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;626:257:9:-;244:4:11;222:27;;:10;:27;;;214:84;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;799:1:9;776:25;;:11;:25;;;;768:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;865:11;852:10;;:24;;;;;;;;;;;;;;;;;;626:257;:::o;12929:142:0:-;244:4:11;222:27;;:10;:27;;;214:84;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13063:1:0;13023:14;:37;13038:21;13053:5;;13038:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;13038:21:0;;;;;;:14;:21::i;:::-;13023:37;;;;;;;;;;;:41;;;;12929:142;;:::o;488:55:5:-;539:3;488:55;:::o;419:54:6:-;469:3;419:54;:::o;6270:465::-;6336:16;6368:22;6407:10;;6393:25;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;6393:25:6;;;;6368:50;;6462:13;6478:1;6462:17;;6489:20;6512:6;:23;469:3;6512:23;;;;;;;;;;;;;;;;;;;;;;;;;6489:46;;6545:162;469:3;6551:31;;:12;:31;;;6545:162;;6613:12;6598:5;6604;6598:12;;;;;;;;;;;;;:27;;;;;;;;;;;6654:6;:20;6661:12;6654:20;;;;;;;;;;;;;;;;;;;;;;;;;6639:35;;6688:8;;;;;;;6545:162;;;6723:5;6716:12;;;;;6270:465;:::o;713:43:0:-;;;;;;;;;;;;;;;;;;;:::o;2487:799::-;2713:1;2694:20;;:15;;:20;2686:62;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;939:66;2797:25;;2824:4;2786:43;;;;;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;2786:43:0;;;2776:54;;;;;;2758:15;:72;;;;2840:40;2850:7;;2840:40;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;2840:40:0;;;;;;2859:10;2871:2;2875:4;;2840:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;2840:40:0;;;;;;:9;:40::i;:::-;2913:1;2903:7;:11;2899:380;;;3209:59;3223:7;3232:1;3235;3238:12;3252:15;3209:13;:59::i;:::-;2899:380;2487:799;;;;;;;;;:::o;1557:20::-;;;;:::o;3467:745:5:-;3534:16;3600:19;3622:1;3600:23;;3633:21;3657:7;:25;539:3;3657:25;;;;;;;;;;;;;;;;;;;;;;;;;3633:49;;3692:132;539:3;3698:33;;:13;:33;;;3692:132;;3763:7;:22;3771:13;3763:22;;;;;;;;;;;;;;;;;;;;;;;;;3747:38;;3799:14;;;;;;;3692:132;;;3833:22;3872:11;3858:26;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;3858:26:5;;;;3833:51;;3942:1;3928:15;;3969:7;:25;539:3;3969:25;;;;;;;;;;;;;;;;;;;;;;;;;3953:41;;4004:180;539:3;4010:33;;:13;:33;;;4004:180;;4080:13;4059:5;4065:11;4059:18;;;;;;;;;;;;;:34;;;;;;;;;;;4123:7;:22;4131:13;4123:22;;;;;;;;;;;;;;;;;;;;;;;;;4107:38;;4159:14;;;;;;;4004:180;;;4200:5;4193:12;;;;;3467:745;:::o;1396:110:0:-;1440:66;1396:110;;;:::o;11727:583::-;11877:7;244:4:11;222:27;;:10;:27;;;214:84;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11900:16:0;11919:9;11900:28;;12082:46;12090:2;12094:5;12101:4;;12082:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;12082:46:0;;;;;;12107:9;12118;12082:7;:46::i;:::-;12074:55;;;;;;12139:19;12172:9;12161:8;:20;12139:42;;12289:11;12272:29;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;12272:29:0;;;12258:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;12258:45:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1215:109;1258:66;1215:109;;;:::o;12554:212::-;12667:1;12637:32;;:6;:18;12644:10;12637:18;;;;;;;;;;;;;;;;;;;;;;;;;:32;;;;12629:75;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12758:1;12714:14;:26;12729:10;12714:26;;;;;;;;;;;;;;;:41;12741:13;12714:41;;;;;;;;;;;:45;;;;12554:212;:::o;16493:510::-;16842:7;16882:113;16904:2;16908:5;16915:4;16921:9;16932;16943:7;16952:8;16962;16972:14;16988:6;16882:21;:113::i;:::-;16872:124;;;;;;16865:131;;16493:510;;;;;;;;;;;;:::o;2008:565:5:-;244:4:11;222:27;;:10;:27;;;214:84;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2230:1:5;2203:29;;2211:6;2203:29;;;;:68;;;;;539:3;2236:35;;2244:6;2236:35;;;;2203:68;2195:112;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2365:6;2325:47;;:7;:28;2341:10;2325:28;;;;;;;;;;;;;;;;;;;;;;;;;:47;;;2317:100;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2458:7;:24;2474:6;2458:24;;;;;;;;;;;;;;;;;;;;;;;;;2427:7;:28;2443:10;2427:28;;;;;;;;;;;;;;;;:55;;;;;;;;;;;;;;;;;;2527:1;2492:7;:24;2508:6;2492:24;;;;;;;;;;;;;;;;:37;;;;;;;;;;;;;;;;;;2544:22;2559:6;2544:22;;;;;;;;;;;;;;;;;;;;;;2008:565;;:::o;4406:859:6:-;244:4:11;222:27;;:10;:27;;;214:84;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4597:1:6;4577:22;;:8;:22;;;;:53;;;;;469:3;4603:27;;:8;:27;;;;4577:53;4569:96;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4751:1;4723:30;;:6;:16;4730:8;4723:16;;;;;;;;;;;;;;;;;;;;;;;;;:30;;;4715:70;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4906:1;4886:22;;:8;:22;;;;:53;;;;;469:3;4912:27;;:8;:27;;;;4886:53;4878:96;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5013:8;4992:29;;:6;:17;4999:9;4992:17;;;;;;;;;;;;;;;;;;;;;;;;;:29;;;4984:80;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5093:6;:16;5100:8;5093:16;;;;;;;;;;;;;;;;;;;;;;;;;5074:6;:16;5081:8;5074:16;;;;;;;;;;;;;;;;:35;;;;;;;;;;;;;;;;;;5139:8;5119:6;:17;5126:9;5119:17;;;;;;;;;;;;;;;;:28;;;;;;;;;;;;;;;;;;5184:1;5157:6;:16;5164:8;5157:16;;;;;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;5201:22;5214:8;5201:22;;;;;;;;;;;;;;;;;;;;;;5238:20;5249:8;5238:20;;;;;;;;;;;;;;;;;;;;;;4406:859;;;:::o;5901:115::-;5970:7;6000:9;;5993:16;;5901:115;:::o;15149:658:0:-;15501:12;15529:18;1258:66;15584:16;;15602:2;15606:5;15623:4;15613:15;;;;;;15630:9;15641;15652:7;15661:8;15671;15681:14;15697:6;15573:131;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;15573:131:0;;;15550:164;;;;;;15529:185;;15753:4;15748:10;;15765:4;15760:10;;15772:15;;15789:10;15731:69;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;15731:69:0;;;15724:76;;;15149:658;;;;;;;;;;;;:::o;1583:30::-;;;;:::o;3237:835:6:-;244:4:11;222:27;;:10;:27;;;214:84;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3463:10:6;3458:1;3445:10;;:14;:28;;3437:94;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3646:1;3629:19;;:5;:19;;;;:47;;;;;469:3;3652:24;;:5;:24;;;;3629:47;3621:90;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3750:5;3729:26;;:6;:17;3736:9;3729:17;;;;;;;;;;;;;;;;;;;;;;;;;:26;;;3721:77;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3828:6;:13;3835:5;3828:13;;;;;;;;;;;;;;;;;;;;;;;;;3808:6;:17;3815:9;3808:17;;;;;;;;;;;;;;;;:33;;;;;;;;;;;;;;;;;;3875:1;3851:6;:13;3858:5;3851:13;;;;;;;;;;;;;;;;:26;;;;;;;;;;;;;;;;;;3887:10;;:12;;;;;;;;;;;;;;3914:19;3927:5;3914:19;;;;;;;;;;;;;;;;;;;;;;4014:10;4001:9;;:23;3997:68;;4038:27;4054:10;4038:15;:27::i;:::-;3997:68;3237:835;;;:::o;762:40:0:-;;;;;;;;;;;;;;;;;;;:::o;7072:3744::-;7304:17;7318:2;7304:9;;:13;;:17;;;;:::i;:::-;7283:10;:17;:38;;7275:76;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7413:17;7441:1;7413:30;;7453:20;7483:7;7500:9;7519;7538;7566:1;7562:5;;7557:3253;7573:9;;7569:1;:13;7557:3253;;;7615:29;7630:10;7642:1;7615:14;:29::i;:::-;7603:41;;;;;;;;;;;;7724:1;7719;:6;;;7715:2900;;;7875:1;7867:10;;7844:34;;8279:17;8293:2;8279:9;;:13;;:17;;;;:::i;:::-;8273:1;8265:10;;:31;;8257:99;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8518:10;:17;8496:18;8511:2;8504:1;8496:10;;:14;;:18;;;;:::i;:::-;:39;;8488:107;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8739:28;8942:4;8938:1;8926:10;8922:18;8918:29;8912:36;8888:60;;9039:10;:17;8991:44;9014:20;8991:18;9006:2;8999:1;8991:10;;:14;;:18;;;;:::i;:::-;:22;;:44;;;;:::i;:::-;:65;;8983:132;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9169:30;9504:4;9500:1;9488:10;9484:18;9480:29;9459:50;;164:10:14;9631:19:0;;9552:98;;;9572:12;9552:50;;;9603:4;9609:17;9552:75;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;9552:75:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;9552:75:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9552:75:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;9552:75:0;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;9552:75:0;;;;;;;;;;;;;;;;:98;;;;9544:146;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7715:2900;;;;;9773:1;9768;:6;;;9764:851;;;9920:1;9912:10;;9889:34;;10108:12;10094:26;;:10;:26;;;:73;;;;10166:1;10124:14;:28;10139:12;10124:28;;;;;;;;;;;;;;;:38;10153:8;10124:38;;;;;;;;;;;;:43;;10094:73;10086:112;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10320:11;:41;;;;;10349:12;10335:26;;:10;:26;;;;10320:41;10316:130;;;10426:1;10385:14;:28;10400:12;10385:28;;;;;;;;;;;;;;;:38;10414:8;10385:38;;;;;;;;;;;:42;;;;10316:130;9764:851;;;10572:28;10582:8;10592:1;10595;10598;10572:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10572:28:0;;;;;;;;10557:43;;9764:851;7715:2900;10652:9;10637:24;;:12;:24;;;:62;;;;;10697:1;10665:34;;:6;:20;10672:12;10665:20;;;;;;;;;;;;;;;;;;;;;;;;;:34;;;;10637:62;:97;;;;;469:3:6;10703:31:0;;:12;:31;;;;10637:97;10628:133;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10787:12;10775:24;;7584:3;;;;;;;7557:3253;;;7072:3744;;;;;;;;;;:::o;313:564:3:-;451:12;496:19;483:32;;;;;;;;:9;:32;;;;;;;;;479:392;;;539:35;551:2;555:5;562:4;568:5;539:11;:35::i;:::-;529:45;;479:392;;;606:27;593:40;;;;;;;;:9;:40;;;;;;;;;589:282;;;657:36;677:2;681:4;687:5;657:19;:36::i;:::-;647:46;;589:282;;;722:19;744;758:4;744:13;:19::i;:::-;722:41;;810:1;787:25;;:11;:25;;;;777:35;;831:29;848:11;831:29;;;;;;;;;;;;;;;;;;;;;;589:282;;479:392;313:564;;;;;;;:::o;1133:131:13:-;1191:7;1219:1;1214;:6;;1206:15;;;;;;1227:9;1243:1;1239;:5;1227:17;;1258:1;1251:8;;;1133:131;;;;:::o;5800:717:0:-;6001:14;6018:34;6043:8;6018:20;6030:7;6018;:11;;:20;;;;:::i;:::-;:24;;:34;;;;:::i;:::-;6001:51;;6120:24;6173:1;6147:28;;:14;:28;;;:57;;6190:14;6147:57;;;6178:9;6147:57;6120:84;;6238:1;6218:22;;:8;:22;;;6214:297;;;6321:8;:13;;:21;6335:6;6321:21;;;;;;;;;;;;;;;;;;;;;;;6313:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6214:297;;;6420:41;6434:8;6444;6454:6;6420:13;:41::i;:::-;6412:88;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6214:297;5800:717;;;;;;;:::o;740:323:2:-;867:32;879:7;888:10;867:11;:32::i;:::-;1034:22;1047:2;1051:4;1034:12;:22::i;:::-;740:323;;;;:::o;259:381:13:-;317:7;546:1;541;:6;537:35;;;564:1;557:8;;;;537:35;578:9;594:1;590;:5;578:17;;618:1;613;609;:5;;;;;;:10;601:19;;;;;;634:1;627:8;;;259:381;;;;;:::o;1220:921:12:-;1329:7;1338:9;1349;1649:3;1643:4;1639:14;1711:4;1697:12;1693:23;1681:10;1677:40;1671:47;1666:52;;1776:4;1762:12;1758:23;1746:10;1742:40;1736:47;1731:52;;2120:4;2111;2097:12;2093:23;2081:10;2077:40;2071:47;2067:58;2062:63;;1605:530;;;;;;:::o;1327:131:13:-;1385:7;1400:9;1416:1;1412;:5;1400:17;;1436:1;1431;:6;;1423:15;;;;;;1452:1;1445:8;;;1327:131;;;;:::o;883:316:3:-;999:12;1181:1;1178;1171:4;1165:11;1158:4;1152;1148:15;1141:5;1137:2;1130:5;1125:58;1114:69;;1100:93;;;;;;:::o;1205:310::-;1314:12;1497:1;1494;1487:4;1481:11;1474:4;1468;1464:15;1460:2;1453:5;1440:59;1429:70;;1415:94;;;;;:::o;1521:268::-;1597:19;1767:4;1761:11;1754:4;1748;1744:15;1741:1;1734:39;1719:54;;1705:78;;;:::o;430:752:10:-;568:16;600:17;673:8;683:6;620:70;;;;;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;620:70:10;;;;;;;38:4:-1;29:7;25:18;67:10;61:17;96:58;199:8;192:4;186;182:15;179:29;167:10;160:49;0:215;;;620:70:10;600:90;;867:1;864;857:4;851:11;844:4;838;834:15;831:1;824:5;816;811:3;807:15;802:67;899:4;893:11;940:14;937:1;932:3;917:38;975:14;1008:1;1003:33;;;;1054:4;1049:76;;;;1163:1;1148:16;;968:198;;1003:33;1027:7;1012:22;;1003:33;;1049:76;1116:3;1110:10;1103:18;1093:7;1086:15;1083:39;1076:47;1061:62;;968:198;;773:403;;;;;;;;:::o;775:1235:6:-;1018:1;1005:9;;:14;997:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1161:7;:14;1147:10;:28;;1139:76;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1299:1;1285:10;:15;;1277:64;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1388:20;469:3;1388:38;;1441:9;1453:1;1441:13;;1436:451;1460:7;:14;1456:1;:18;1436:451;;;1540:13;1556:7;1564:1;1556:10;;;;;;;;;;;;;;1540:26;;1605:1;1588:19;;:5;:19;;;;:47;;;;;469:3;1611:24;;:5;:24;;;;1588:47;1580:90;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1761:1;1736:27;;:6;:13;1743:5;1736:13;;;;;;;;;;;;;;;;;;;;;;;;;:27;;;1728:72;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1837:5;1814:6;:20;1821:12;1814:20;;;;;;;;;;;;;;;;:28;;;;;;;;;;;;;;;;;;1871:5;1856:20;;1436:451;1476:3;;;;;;;1436:451;;;;469:3;1896:6;:20;1903:12;1896:20;;;;;;;;;;;;;;;;:38;;;;;;;;;;;;;;;;;;1957:7;:14;1944:10;:27;;;;1993:10;1981:9;:22;;;;775:1235;;;:::o;606:434:5:-;735:1;698:39;;:7;:25;539:3;698:25;;;;;;;;;;;;;;;;;;;;;;;;;:39;;;690:89;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;539:3;789:7;:25;539:3;789:25;;;;;;;;;;;;;;;;:44;;;;;;;;;;;;;;;;;;861:1;847:16;;:2;:16;;;843:190;;957:40;977:2;981:4;987:9;957:19;:40::i;:::-;949:84;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;843:190;606:434;;:::o";
  var source = "pragma solidity ^0.5.0;\nimport \"./base/BaseSafe.sol\";\nimport \"./common/MasterCopy.sol\";\nimport \"./common/SignatureDecoder.sol\";\nimport \"./common/SecuredTokenTransfer.sol\";\nimport \"./interfaces/ISignatureValidator.sol\";\nimport \"./external/SafeMath.sol\";\n\n/// @title Gnosis Safe - A multisignature wallet with support for confirmations using signed messages based on ERC191.\n/// @author Stefan George - <stefan@gnosis.pm>\n/// @author Richard Meissner - <richard@gnosis.pm>\n/// @author Ricardo Guilherme Schmidt - (Status Research & Development GmbH) - Gas Token Payment\ncontract GnosisSafe is MasterCopy, BaseSafe, SignatureDecoder, SecuredTokenTransfer, ISignatureValidator {\n\n    using SafeMath for uint256;\n\n    string public constant NAME = \"Gnosis Safe\";\n    string public constant VERSION = \"1.0.0\";\n\n    //keccak256(\n    //    \"EIP712Domain(address verifyingContract)\"\n    //);\n    bytes32 public constant DOMAIN_SEPARATOR_TYPEHASH = 0x035aff83d86937d35b32e04f0ddc6ff469290eef2f1b692d8a815c89404d4749;\n\n    //keccak256(\n    //    \"SafeTx(address to,uint256 value,bytes data,uint8 operation,uint256 safeTxGas,uint256 baseGas,uint256 gasPrice,address gasToken,address refundReceiver,uint256 nonce)\"\n    //);\n    bytes32 public constant SAFE_TX_TYPEHASH = 0xbb8310d486368db6bd6f849402fdd73ad53d316b5a4b2644ad6efe0f941286d8;\n\n    //keccak256(\n    //    \"SafeMessage(bytes message)\"\n    //);\n    bytes32 public constant SAFE_MSG_TYPEHASH = 0x60b3cbf8b4a223d68d641b3b6ddf9a298e7f33710cf3d3a9d1146b5a6150fbca;\n\n    event ExecutionFailed(bytes32 txHash);\n\n    uint256 public nonce;\n    bytes32 public domainSeparator;\n    // Mapping to keep track of all message hashes that have been approve by ALL REQUIRED owners\n    mapping(bytes32 => uint256) public signedMessages;\n    // Mapping to keep track of all hashes (message or transaction) that have been approve by ANY owners\n    mapping(address => mapping(bytes32 => uint256)) public approvedHashes;\n\n    /// @dev Setup function sets initial storage of contract.\n    /// @param _owners List of Safe owners.\n    /// @param _threshold Number of required confirmations for a Safe transaction.\n    /// @param to Contract address for optional delegate call.\n    /// @param data Data payload for optional delegate call.\n    /// @param paymentToken Token that should be used for the payment (0 is ETH)\n    /// @param payment Value that should be paid\n    /// @param paymentReceiver Adddress that should receive the payment (or 0 if tx.origin)\n    function setup(address[] calldata _owners, uint256 _threshold, address to, bytes calldata data, address paymentToken, uint256 payment, address payable paymentReceiver)\n        external\n    {\n        require(domainSeparator == 0, \"Domain Separator already set!\");\n        domainSeparator = keccak256(abi.encode(DOMAIN_SEPARATOR_TYPEHASH, this));\n        setupSafe(_owners, _threshold, to, data);\n        \n        if (payment > 0) {\n            // To avoid running into issues with EIP-170 we reuse the handlePayment function (to avoid adjusting code of that has been verified we do not adjust the method itself)\n            // baseGas = 0, gasPrice = 1 and gas = payment => amount = (payment + 0) * 1 = payment\n            handlePayment(payment, 0, 1, paymentToken, paymentReceiver);\n        } \n    }\n\n    /// @dev Allows to execute a Safe transaction confirmed by required number of owners and then pays the account that submitted the transaction.\n    ///      Note: The fees are always transfered, even if the user transaction fails.\n    /// @param to Destination address of Safe transaction.\n    /// @param value Ether value of Safe transaction.\n    /// @param data Data payload of Safe transaction.\n    /// @param operation Operation type of Safe transaction.\n    /// @param safeTxGas Gas that should be used for the Safe transaction.\n    /// @param baseGas Gas costs for that are indipendent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)\n    /// @param gasPrice Gas price that should be used for the payment calculation.\n    /// @param gasToken Token address (or 0 if ETH) that is used for the payment.\n    /// @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\n    /// @param signatures Packed signature data ({bytes32 r}{bytes32 s}{uint8 v})\n    function execTransaction(\n        address to,\n        uint256 value,\n        bytes calldata data,\n        Enum.Operation operation,\n        uint256 safeTxGas,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address payable refundReceiver,\n        bytes calldata signatures\n    )\n        external\n        returns (bool success)\n    {\n        bytes memory txHashData = encodeTransactionData(\n            to, value, data, operation, // Transaction info\n            safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, // Payment info\n            nonce\n        );\n        // Increase nonce and execute transaction.\n        nonce++;\n        checkSignatures(keccak256(txHashData), txHashData, signatures, true);\n        require(gasleft() >= safeTxGas, \"Not enough gas to execute safe transaction\");\n        uint256 gasUsed = gasleft();\n        // If no safeTxGas has been set and the gasPrice is 0 we assume that all available gas can be used\n        success = execute(to, value, data, operation, safeTxGas == 0 && gasPrice == 0 ? gasleft() : safeTxGas);\n        gasUsed = gasUsed.sub(gasleft());\n        if (!success) {\n            emit ExecutionFailed(keccak256(txHashData));\n        }\n\n        // We transfer the calculated tx costs to the tx.origin to avoid sending it to intermediate contracts that have made calls\n        if (gasPrice > 0) {\n            handlePayment(gasUsed, baseGas, gasPrice, gasToken, refundReceiver);\n        }\n    }\n\n    function handlePayment(\n        uint256 gasUsed,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address payable refundReceiver\n    )\n        private\n    {\n        uint256 amount = gasUsed.add(baseGas).mul(gasPrice);\n        // solium-disable-next-line security/no-tx-origin\n        address payable receiver = refundReceiver == address(0) ? tx.origin : refundReceiver;\n        if (gasToken == address(0)) {\n            // solium-disable-next-line security/no-send\n            require(receiver.send(amount), \"Could not pay gas costs with ether\");\n        } else {\n            require(transferToken(gasToken, receiver, amount), \"Could not pay gas costs with token\");\n        }\n    }\n\n    /**\n    * @dev Checks whether the signature provided is valid for the provided data, hash. Will revert otherwise.\n    * @param dataHash Hash of the data (could be either a message hash or transaction hash)\n    * @param data That should be signed (this is passed to an external validator contract)\n    * @param signatures Signature data that should be verified. Can be ECDSA signature, contract signature (EIP-1271) or approved hash.\n    * @param consumeHash Indicates that in case of an approved hash the storage can be freed to save gas\n    */\n    function checkSignatures(bytes32 dataHash, bytes memory data, bytes memory signatures, bool consumeHash)\n        internal\n    {\n        // Check that the provided signature data is not too short\n        require(signatures.length >= threshold.mul(65), \"Signatures data too short\");\n        // There cannot be an owner with address 0.\n        address lastOwner = address(0);\n        address currentOwner;\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n        uint256 i;\n        for (i = 0; i < threshold; i++) {\n            (v, r, s) = signatureSplit(signatures, i);\n            // If v is 0 then it is a contract signature\n            if (v == 0) {\n                // When handling contract signatures the address of the contract is encoded into r\n                currentOwner = address(uint256(r));\n\n                // Check that signature data pointer (s) is not pointing inside the static part of the signatures bytes\n                // This check is not completely accurate, since it is possible that more signatures than the threshold are send.\n                // Here we only check that the pointer is not pointing inside the part that is being processed\n                require(uint256(s) >= threshold.mul(65), \"Invalid contract signature location: inside static part\");\n\n                // Check that signature data pointer (s) is in bounds (points to the length of data -> 32 bytes)\n                require(uint256(s).add(32) <= signatures.length, \"Invalid contract signature location: length not present\");\n\n                // Check if the contract signature is in bounds: start of data is s + 32 and end is start + signature length\n                uint256 contractSignatureLen;\n                // solium-disable-next-line security/no-inline-assembly\n                assembly {\n                    contractSignatureLen := mload(add(add(signatures, s), 0x20))\n                }\n                require(uint256(s).add(32).add(contractSignatureLen) <= signatures.length, \"Invalid contract signature location: data not complete\");\n\n                // Check signature\n                bytes memory contractSignature;\n                // solium-disable-next-line security/no-inline-assembly\n                assembly {\n                    // The signature data for contract signatures is appended to the concatenated signatures and the offset is stored in s\n                    contractSignature := add(add(signatures, s), 0x20)\n                }\n                require(ISignatureValidator(currentOwner).isValidSignature(data, contractSignature) == EIP1271_MAGIC_VALUE, \"Invalid contract signature provided\");\n            // If v is 1 then it is an approved hash\n            } else if (v == 1) {\n                // When handling approved hashes the address of the approver is encoded into r\n                currentOwner = address(uint256(r));\n                // Hashes are automatically approved by the sender of the message or when they have been pre-approved via a separate transaction\n                require(msg.sender == currentOwner || approvedHashes[currentOwner][dataHash] != 0, \"Hash has not been approved\");\n                // Hash has been marked for consumption. If this hash was pre-approved free storage\n                if (consumeHash && msg.sender != currentOwner) {\n                    approvedHashes[currentOwner][dataHash] = 0;\n                }\n            } else {\n                // Use ecrecover with the messageHash for EOA signatures\n                currentOwner = ecrecover(dataHash, v, r, s);\n            }\n            require (currentOwner > lastOwner && owners[currentOwner] != address(0) && currentOwner != SENTINEL_OWNERS, \"Invalid owner provided\");\n            lastOwner = currentOwner;\n        }\n    }\n\n    /// @dev Allows to estimate a Safe transaction.\n    ///      This method is only meant for estimation purpose, therfore two different protection mechanism against execution in a transaction have been made:\n    ///      1.) The method can only be called from the safe itself\n    ///      2.) The response is returned with a revert\n    ///      When estimating set `from` to the address of the safe.\n    ///      Since the `estimateGas` function includes refunds, call this method to get an estimated of the costs that are deducted from the safe with `execTransaction`\n    /// @param to Destination address of Safe transaction.\n    /// @param value Ether value of Safe transaction.\n    /// @param data Data payload of Safe transaction.\n    /// @param operation Operation type of Safe transaction.\n    /// @return Estimate without refunds and overhead fees (base transaction and payload data gas costs).\n    function requiredTxGas(address to, uint256 value, bytes calldata data, Enum.Operation operation)\n        external\n        authorized\n        returns (uint256)\n    {\n        uint256 startGas = gasleft();\n        // We don't provide an error message here, as we use it to return the estimate\n        // solium-disable-next-line error-reason\n        require(execute(to, value, data, operation, gasleft()));\n        uint256 requiredGas = startGas - gasleft();\n        // Convert response to string and return via error message\n        revert(string(abi.encodePacked(requiredGas)));\n    }\n\n    /**\n    * @dev Marks a hash as approved. This can be used to validate a hash that is used by a signature.\n    * @param hashToApprove The hash that should be marked as approved for signatures that are verified by this contract.\n    */\n    function approveHash(bytes32 hashToApprove)\n        external\n    {\n        require(owners[msg.sender] != address(0), \"Only owners can approve a hash\");\n        approvedHashes[msg.sender][hashToApprove] = 1;\n    }\n\n    /**\n    * @dev Marks a message as signed\n    * @param _data Arbitrary length data that should be marked as signed on the behalf of address(this)\n    */ \n    function signMessage(bytes calldata _data) \n        external\n        authorized\n    {\n        signedMessages[getMessageHash(_data)] = 1;\n    }\n\n    /**\n    * @dev Should return whether the signature provided is valid for the provided data\n    * @param _data Arbitrary length data signed on the behalf of address(this)\n    * @param _signature Signature byte array associated with _data\n    * @return a bool upon valid or invalid signature with corresponding _data\n    */ \n    function isValidSignature(bytes calldata _data, bytes calldata _signature)\n        external\n        returns (bytes4)\n    {\n        bytes32 messageHash = getMessageHash(_data);\n        if (_signature.length == 0) {\n            require(signedMessages[messageHash] != 0, \"Hash not approved\");\n        } else {\n            // consumeHash needs to be false, as the state should not be changed\n            checkSignatures(messageHash, _data, _signature, false);\n        }\n        return EIP1271_MAGIC_VALUE;\n    }\n\n    /// @dev Returns hash of a message that can be signed by owners.\n    /// @param message Message that should be hashed\n    /// @return Message hash.\n    function getMessageHash(\n        bytes memory message\n    )\n        public\n        view\n        returns (bytes32)\n    {\n        bytes32 safeMessageHash = keccak256(\n            abi.encode(SAFE_MSG_TYPEHASH, keccak256(message))\n        );\n        return keccak256(\n            abi.encodePacked(byte(0x19), byte(0x01), domainSeparator, safeMessageHash)\n        );\n    }\n\n    /// @dev Returns the bytes that are hashed to be signed by owners.\n    /// @param to Destination address.\n    /// @param value Ether value.\n    /// @param data Data payload.\n    /// @param operation Operation type.\n    /// @param safeTxGas Fas that should be used for the safe transaction.\n    /// @param baseGas Gas costs for data used to trigger the safe transaction.\n    /// @param gasPrice Maximum gas price that should be used for this transaction.\n    /// @param gasToken Token address (or 0 if ETH) that is used for the payment.\n    /// @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\n    /// @param _nonce Transaction nonce.\n    /// @return Transaction hash bytes.\n    function encodeTransactionData(\n        address to, \n        uint256 value, \n        bytes memory data, \n        Enum.Operation operation, \n        uint256 safeTxGas, \n        uint256 baseGas, \n        uint256 gasPrice,\n        address gasToken,\n        address refundReceiver,\n        uint256 _nonce\n    )\n        public\n        view\n        returns (bytes memory)\n    {\n        bytes32 safeTxHash = keccak256(\n            abi.encode(SAFE_TX_TYPEHASH, to, value, keccak256(data), operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, _nonce)\n        );\n        return abi.encodePacked(byte(0x19), byte(0x01), domainSeparator, safeTxHash);\n    }\n\n    /// @dev Returns hash to be signed by owners.\n    /// @param to Destination address.\n    /// @param value Ether value.\n    /// @param data Data payload.\n    /// @param operation Operation type.\n    /// @param safeTxGas Fas that should be used for the safe transaction.\n    /// @param baseGas Gas costs for data used to trigger the safe transaction.\n    /// @param gasPrice Maximum gas price that should be used for this transaction.\n    /// @param gasToken Token address (or 0 if ETH) that is used for the payment.\n    /// @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\n    /// @param _nonce Transaction nonce.\n    /// @return Transaction hash.\n    function getTransactionHash(\n        address to, \n        uint256 value, \n        bytes memory data, \n        Enum.Operation operation, \n        uint256 safeTxGas, \n        uint256 baseGas, \n        uint256 gasPrice,\n        address gasToken,\n        address refundReceiver,\n        uint256 _nonce\n    )\n        public\n        view\n        returns (bytes32)\n    {\n        return keccak256(encodeTransactionData(to, value, data, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, _nonce));\n    }\n}\n";
  var compiler = {
    name: "solc",
    version: "0.5.7+commit.6da8b019.Emscripten.clang"
  };
  var networks = {
    "1": {
      links: {},
      events: {},
      address: "0xb6029EA3B2c51D09a50B53CA8012FeEB05bDa35A",
      updated_at: 1554371714116
    },
    "4": {
      links: {},
      events: {},
      address: "0xb6029EA3B2c51D09a50B53CA8012FeEB05bDa35A",
      updated_at: 1554371714138
    },
    "5": {
      links: {},
      events: {},
      address: "0xb6029EA3B2c51D09a50B53CA8012FeEB05bDa35A",
      updated_at: 1554371714173
    },
    "42": {
      links: {},
      events: {},
      address: "0xb6029EA3B2c51D09a50B53CA8012FeEB05bDa35A",
      updated_at: 1554371714156
    }
  };
  var schemaVersion = "2.0.1";
  var updatedAt = "2019-04-04T09:55:13.695Z";
  var GnosisSafeContract = {
    contractName: contractName,
    abi: abi,
    bytecode: bytecode,
    deployedBytecode: deployedBytecode,
    sourceMap: sourceMap,
    deployedSourceMap: deployedSourceMap,
    source: source,
    compiler: compiler,
    networks: networks,
    schemaVersion: schemaVersion,
    updatedAt: updatedAt
  };

  var contractName$1 = "Hub";
  var abi$1 = [{
    constant: true,
    inputs: [{
      name: "",
      type: "address"
    }],
    name: "userToToken",
    outputs: [{
      name: "",
      type: "address"
    }],
    payable: false,
    stateMutability: "view",
    type: "function"
  }, {
    constant: true,
    inputs: [],
    name: "issuanceRate",
    outputs: [{
      name: "",
      type: "uint256"
    }],
    payable: false,
    stateMutability: "view",
    type: "function"
  }, {
    constant: true,
    inputs: [{
      name: "",
      type: "address"
    }],
    name: "relayers",
    outputs: [{
      name: "",
      type: "bool"
    }],
    payable: false,
    stateMutability: "view",
    type: "function"
  }, {
    constant: true,
    inputs: [],
    name: "owner",
    outputs: [{
      name: "",
      type: "address"
    }],
    payable: false,
    stateMutability: "view",
    type: "function"
  }, {
    constant: true,
    inputs: [],
    name: "symbol",
    outputs: [{
      name: "",
      type: "string"
    }],
    payable: false,
    stateMutability: "view",
    type: "function"
  }, {
    constant: true,
    inputs: [{
      name: "",
      type: "address"
    }],
    name: "tokenToUser",
    outputs: [{
      name: "",
      type: "address"
    }],
    payable: false,
    stateMutability: "view",
    type: "function"
  }, {
    constant: true,
    inputs: [{
      name: "",
      type: "address"
    }, {
      name: "",
      type: "address"
    }],
    name: "limits",
    outputs: [{
      name: "",
      type: "uint256"
    }],
    payable: false,
    stateMutability: "view",
    type: "function"
  }, {
    constant: true,
    inputs: [],
    name: "demurrageRate",
    outputs: [{
      name: "",
      type: "uint256"
    }],
    payable: false,
    stateMutability: "view",
    type: "function"
  }, {
    inputs: [{
      name: "_owner",
      type: "address"
    }, {
      name: "_issuance",
      type: "uint256"
    }, {
      name: "_demurrage",
      type: "uint256"
    }, {
      name: "_symbol",
      type: "string"
    }, {
      name: "_initialPayout",
      type: "uint256"
    }],
    payable: false,
    stateMutability: "nonpayable",
    type: "constructor"
  }, {
    anonymous: false,
    inputs: [{
      indexed: true,
      name: "user",
      type: "address"
    }, {
      indexed: false,
      name: "token",
      type: "address"
    }],
    name: "Signup",
    type: "event"
  }, {
    anonymous: false,
    inputs: [{
      indexed: true,
      name: "from",
      type: "address"
    }, {
      indexed: true,
      name: "to",
      type: "address"
    }, {
      indexed: false,
      name: "limit",
      type: "uint256"
    }],
    name: "Trust",
    type: "event"
  }, {
    constant: false,
    inputs: [{
      name: "_newOwner",
      type: "address"
    }],
    name: "changeOwner",
    outputs: [{
      name: "",
      type: "bool"
    }],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  }, {
    constant: false,
    inputs: [{
      name: "_relayer",
      type: "address"
    }, {
      name: "isRelayer",
      type: "bool"
    }],
    name: "updateRelayer",
    outputs: [{
      name: "",
      type: "bool"
    }],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  }, {
    constant: false,
    inputs: [{
      name: "_issuance",
      type: "uint256"
    }],
    name: "updateIssuance",
    outputs: [{
      name: "",
      type: "bool"
    }],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  }, {
    constant: false,
    inputs: [{
      name: "_demurrage",
      type: "uint256"
    }],
    name: "updateDemurrage",
    outputs: [{
      name: "",
      type: "bool"
    }],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  }, {
    constant: false,
    inputs: [{
      name: "_symbol",
      type: "string"
    }],
    name: "updateSymbol",
    outputs: [{
      name: "",
      type: "bool"
    }],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  }, {
    constant: true,
    inputs: [],
    name: "time",
    outputs: [{
      name: "",
      type: "uint256"
    }],
    payable: false,
    stateMutability: "view",
    type: "function"
  }, {
    constant: true,
    inputs: [{
      name: "_address",
      type: "address"
    }],
    name: "trustable",
    outputs: [{
      name: "",
      type: "bool"
    }],
    payable: false,
    stateMutability: "view",
    type: "function"
  }, {
    constant: false,
    inputs: [{
      name: "_name",
      type: "string"
    }],
    name: "signup",
    outputs: [{
      name: "",
      type: "bool"
    }],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  }, {
    constant: false,
    inputs: [{
      name: "toTrust",
      type: "address"
    }, {
      name: "limit",
      type: "uint256"
    }],
    name: "trust",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  }, {
    constant: true,
    inputs: [{
      name: "from",
      type: "address"
    }, {
      name: "to",
      type: "address"
    }],
    name: "checkSendLimit",
    outputs: [{
      name: "",
      type: "uint256"
    }],
    payable: false,
    stateMutability: "view",
    type: "function"
  }, {
    constant: false,
    inputs: [{
      name: "users",
      type: "address[]"
    }, {
      name: "wad",
      type: "uint256"
    }],
    name: "transferThrough",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  }];
  var metadata = "{\"compiler\":{\"version\":\"0.5.0+commit.1d4f565a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"time\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userToToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"trustable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"issuanceRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_demurrage\",\"type\":\"uint256\"}],\"name\":\"updateDemurrage\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"signup\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"relayers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"updateSymbol\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_issuance\",\"type\":\"uint256\"}],\"name\":\"updateIssuance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"users\",\"type\":\"address[]\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transferThrough\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"toTrust\",\"type\":\"address\"},{\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"trust\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_relayer\",\"type\":\"address\"},{\"name\":\"isRelayer\",\"type\":\"bool\"}],\"name\":\"updateRelayer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenToUser\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"limits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"demurrageRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"checkSendLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_issuance\",\"type\":\"uint256\"},{\"name\":\"_demurrage\",\"type\":\"uint256\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_initialPayout\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"}],\"name\":\"Signup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"Trust\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/media/000/Documents/Circles/circles-contracts/contracts/Hub.sol\":\"Hub\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/media/000/Documents/Circles/circles-contracts/contracts/Hub.sol\":{\"keccak256\":\"0x7a08e9daa319885ce67d030d99458e502ca16c970382bdf00492f9d3cd17f991\",\"urls\":[\"bzzr://9b1ddb37e58c04935b4ce495fd44834092920e86e2135b3494edc760995a607b\"]},\"/media/000/Documents/Circles/circles-contracts/contracts/Token.sol\":{\"keccak256\":\"0x21253d407adb4fba93b3f3db29452e99fc0b95abdebf1ba982dadff02f3b6192\",\"urls\":[\"bzzr://a2c93fca6d6ea1a147253f6be91fde83451523b4e7d0a3d523949e11949c5f71\"]},\"/media/000/Documents/Circles/circles-contracts/contracts/interfaces/HubI.sol\":{\"keccak256\":\"0xa830c94b4107e886f4a62ad8a4225d23f83931ee56b3c661dd618e77a9b60939\",\"urls\":[\"bzzr://8833f72a85f215914ad8de8acaca1ad7c1c2e629b39929bc76515cc1cacb7592\"]},\"openzeppelin-solidity/contracts/math/SafeMath.sol\":{\"keccak256\":\"0x965012d27b4262d7a41f5028cbb30c51ebd9ecd4be8fb30380aaa7a3c64fbc8b\",\"urls\":[\"bzzr://41ca38f6b0fa4b77b0feec43e422cfbec48b7eb38a41edf0b85c77e8d9a296b1\"]},\"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xba431353cb4fe70777ac026231eb5468e41aa1e81240a2b8136917acc5fff4dc\",\"urls\":[\"bzzr://80cd02a56e6e33504318124d0d645c82e615cc8a4b5829cc9d82d17635c644c8\"]},\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x079c4e23ee448f529e43bfa3c4e8fb4be52cd0318ee923a276835bedf45b93d8\",\"urls\":[\"bzzr://48248e86f64407a95f241d6c5c8cfea6b4d4ebf4ebb467e5c98c8af3868fafe4\"]}},\"version\":1}";
  var bytecode$1 = "0x60806040523480156200001157600080fd5b5060405162003dcc38038062003dcc833981018060405260a08110156200003757600080fd5b8101908080519060200190929190805190602001909291908051906020019092919080516401000000008111156200006e57600080fd5b828101905060208101848111156200008557600080fd5b8151856001820283011164010000000082111715620000a357600080fd5b505092919060200180519060200190929190505050600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614151515620000f557600080fd5b846000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550836001819055508260028190555081600390805190602001906200015b9291906200016e565b508060048190555050505050506200021d565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001b157805160ff1916838001178555620001e2565b82800160010185558215620001e2579182015b82811115620001e1578251825591602001919060010190620001c4565b5b509050620001f19190620001f5565b5090565b6200021a91905b8082111562000216576000816000905550600101620001fc565b5090565b90565b613b9f806200022d6000396000f3fe6080604052600436106200011b576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806316ada547146200012057806328d249fe146200014e57806332d9cb1a14620001e35780633c9ae2ba14620002505780634510c50c146200027e578063519c637714620002d55780635300f84114620003bc578063537f531214620004295780636659459914620005105780638da5cb5b14620005675780639549294114620005c157806395d89b4114620006975780639951d62f146200072d5780639dbf5eca146200078c578063a18b506b1462000805578063a3eb2b4a146200089a578063a6f9dae11462000923578063ae853faf1462000990578063ef3bf3ad14620009be575b600080fd5b3480156200012d57600080fd5b506200013862000a47565b6040518082815260200191505060405180910390f35b3480156200015b57600080fd5b50620001a1600480360360208110156200017457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505062000a4f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015620001f057600080fd5b5062000236600480360360208110156200020957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505062000a82565b604051808215151515815260200191505060405180910390f35b3480156200025d57600080fd5b506200026862000b1a565b6040518082815260200191505060405180910390f35b3480156200028b57600080fd5b50620002bb60048036036020811015620002a457600080fd5b810190808035906020019092919050505062000b20565b604051808215151515815260200191505060405180910390f35b348015620002e257600080fd5b50620003a260048036036020811015620002fb57600080fd5b81019080803590602001906401000000008111156200031957600080fd5b8201836020820111156200032c57600080fd5b803590602001918460018302840111640100000000831117156200034f57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505062000b8e565b604051808215151515815260200191505060405180910390f35b348015620003c957600080fd5b506200040f60048036036020811015620003e257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505062000e87565b604051808215151515815260200191505060405180910390f35b3480156200043657600080fd5b50620004f6600480360360208110156200044f57600080fd5b81019080803590602001906401000000008111156200046d57600080fd5b8201836020820111156200048057600080fd5b80359060200191846001830284011164010000000083111715620004a357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505062000ea7565b604051808215151515815260200191505060405180910390f35b3480156200051d57600080fd5b506200054d600480360360208110156200053657600080fd5b810190808035906020019092919050505062000f27565b604051808215151515815260200191505060405180910390f35b3480156200057457600080fd5b506200057f62000f95565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015620005ce57600080fd5b506200069560048036036040811015620005e757600080fd5b81019080803590602001906401000000008111156200060557600080fd5b8201836020820111156200061857600080fd5b803590602001918460208302840111640100000000831117156200063b57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019092919050505062000fba565b005b348015620006a457600080fd5b50620006af620014eb565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015620006f1578082015181840152602081019050620006d4565b50505050905090810190601f1680156200071f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156200073a57600080fd5b506200078a600480360360408110156200075357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506200158d565b005b3480156200079957600080fd5b50620007eb60048036036040811015620007b257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035151590602001909291905050506200168e565b604051808215151515815260200191505060405180910390f35b3480156200081257600080fd5b5062000858600480360360208110156200082b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506200178a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015620008a757600080fd5b506200090d60048036036040811015620008c057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050620017bd565b6040518082815260200191505060405180910390f35b3480156200093057600080fd5b5062000976600480360360208110156200094957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050620017e2565b604051808215151515815260200191505060405180910390f35b3480156200099d57600080fd5b50620009a8620018c6565b6040518082815260200191505060405180910390f35b348015620009cb57600080fd5b5062000a3160048036036040811015620009e457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050620018cc565b6040518082815260200191505060405180910390f35b600042905090565b60066020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008073ffffffffffffffffffffffffffffffffffffffff16600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b60015481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151562000b7e57600080fd5b8160028190555060019050919050565b60008073ffffffffffffffffffffffffffffffffffffffff16600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151562000c2a57600080fd5b6000338360045462000c3b62001c59565b808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b8381101562000cb257808201518184015260208101905062000c95565b50505050905090810190601f16801562000ce05780820380516001836020036101000a031916815260200191505b50945050505050604051809103906000f08015801562000d04573d6000803e3d6000fd5b50905080600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f358ba8f768af134eb5af120e9a61dc1ef29b29f597f047b555fc3675064a034282604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a26001915050919050565b60056020528060005260406000206000915054906101000a900460ff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151562000f0557600080fd5b816003908051906020019062000f1d92919062001c6a565b5060019050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151562000f8557600080fd5b8160018190555060019050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600582511115151562000fcc57600080fd5b600033905060008090505b8351811015620014e5576000848281518110151562000ff257fe5b9060200190602002015190506000620011ab670de0b6b3a76400006200119c600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156200115057600080fd5b505afa15801562001165573d6000803e3d6000fd5b505050506040513d60208110156200117c57600080fd5b810190808051906020019092919050505062001bc890919063ffffffff16565b62001c0a90919063ffffffff16565b90508085600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015620012a857600080fd5b505afa158015620012bd573d6000803e3d6000fd5b505050506040513d6020811015620012d457600080fd5b810190808051906020019092919050505001111515156200135d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f5472757374206c696d697420657863656564656400000000000000000000000081525060200191505060405180910390fd5b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166320a6703c8584886040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b1580156200149457600080fd5b505af1158015620014a9573d6000803e3d6000fd5b505050506040513d6020811015620014c057600080fd5b8101908080519060200190929190505050508193505050808060010191505062000fd7565b50505050565b60038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015620015855780601f10620015595761010080835404028352916020019162001585565b820191906000526020600020905b8154815290600101906020018083116200156757829003601f168201915b505050505081565b620015988262000a82565b1515620015a457600080fd5b80600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fe60c754dd8ab0b1b5fccba257d6ebcd7d09e360ab7dd7a6e58198ca1f57cdcec836040518082815260200191505060405180910390a35050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515620016ec57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156200172957600080fd5b81600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001905092915050565b60076020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6008602052816000526040600020602052806000526040600020600091509150505481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156200184057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156200187d57600080fd5b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050919050565b60025481565b60008062001a73606462001a64600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801562001a1857600080fd5b505afa15801562001a2d573d6000803e3d6000fd5b505050506040513d602081101562001a4457600080fd5b810190808051906020019092919050505062001bc890919063ffffffff16565b62001c0a90919063ffffffff16565b905062001bbf600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231866040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801562001b7257600080fd5b505afa15801562001b87573d6000803e3d6000fd5b505050506040513d602081101562001b9e57600080fd5b81019080805190602001909291905050508262001c3690919063ffffffff16565b91505092915050565b60008083141562001bdd576000905062001c04565b6000828402905082848281151562001bf157fe5b0414151562001bff57600080fd5b809150505b92915050565b6000808211151562001c1b57600080fd5b6000828481151562001c2957fe5b0490508091505092915050565b600082821115151562001c4857600080fd5b600082840390508091505092915050565b604051611e5a8062001d1a83390190565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1062001cad57805160ff191683800117855562001cde565b8280016001018555821562001cde579182015b8281111562001cdd57825182559160200191906001019062001cc0565b5b50905062001ced919062001cf1565b5090565b62001d1691905b8082111562001d1257600081600090555060010162001cf8565b5090565b9056fe60806040526012600360006101000a81548160ff021916908360ff1602179055503480156200002d57600080fd5b5060405162001e5a38038062001e5a833981018060405260608110156200005357600080fd5b810190808051906020019092919080516401000000008111156200007657600080fd5b828101905060208101848111156200008d57600080fd5b8151856001820283011164010000000082111715620000ab57600080fd5b505092919060200180519060200190929190505050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515620000fd57600080fd5b8160049080519060200190620001159291906200037a565b5082600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620001b1620001db640100000000026401000000009004565b600581905550620001d28382620001e3640100000000026401000000009004565b50505062000429565b600042905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156200022057600080fd5b620002458160025462000358640100000000026200192f179091906401000000009004565b600281905550620002ac816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205462000358640100000000026200192f179091906401000000009004565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b60008082840190508381101515156200037057600080fd5b8091505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620003bd57805160ff1916838001178555620003ee565b82800160010185558215620003ee579182015b82811115620003ed578251825591602001919060010190620003d0565b5b509050620003fd919062000401565b5090565b6200042691905b808211156200042257600081600090555060010162000408565b5090565b90565b611a2180620004396000396000f3fe608060405260043610610112576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610117578063095ea7b3146101a757806318160ddd1461021a57806320a6703c1461024557806323b872dd146102d8578063313ce5671461036b578063365a86fc1461039c57806339509351146103f35780636c050eae1461046657806370a08231146104915780638b4eed81146104f65780638da5cb5b1461052157806395d89b4114610578578063a2e6204514610608578063a457c2d71461061f578063a6f9dae114610692578063a9059cbb146106fb578063dd62ed3e1461076e578063f77c4791146107f3578063fbf08da91461084a575b600080fd5b34801561012357600080fd5b5061012c6108b3565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561016c578082015181840152602081019050610151565b50505050905090810190601f1680156101995780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101b357600080fd5b50610200600480360360408110156101ca57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610951565b604051808215151515815260200191505060405180910390f35b34801561022657600080fd5b5061022f610965565b6040518082815260200191505060405180910390f35b34801561025157600080fd5b506102be6004803603606081101561026857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610974565b604051808215151515815260200191505060405180910390f35b3480156102e457600080fd5b50610351600480360360608110156102fb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506109e4565b604051808215151515815260200191505060405180910390f35b34801561037757600080fd5b50610380610bec565b604051808260ff1660ff16815260200191505060405180910390f35b3480156103a857600080fd5b506103b1610bff565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103ff57600080fd5b5061044c6004803603604081101561041657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c25565b604051808215151515815260200191505060405180910390f35b34801561047257600080fd5b5061047b610e5c565b6040518082815260200191505060405180910390f35b34801561049d57600080fd5b506104e0600480360360208110156104b457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f5a565b6040518082815260200191505060405180910390f35b34801561050257600080fd5b5061050b610f71565b6040518082815260200191505060405180910390f35b34801561052d57600080fd5b50610536610f77565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561058457600080fd5b5061058d610f9d565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105cd5780820151818401526020810190506105b2565b50505050905090810190601f1680156105fa5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561061457600080fd5b5061061d6110b9565b005b34801561062b57600080fd5b506106786004803603604081101561064257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061110c565b604051808215151515815260200191505060405180910390f35b34801561069e57600080fd5b506106e1600480360360208110156106b557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611343565b604051808215151515815260200191505060405180910390f35b34801561070757600080fd5b506107546004803603604081101561071e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611427565b604051808215151515815260200191505060405180910390f35b34801561077a57600080fd5b506107dd6004803603604081101561079157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611479565b6040518082815260200191505060405180910390f35b3480156107ff57600080fd5b50610808611500565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561085657600080fd5b506108996004803603602081101561086d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611526565b604051808215151515815260200191505060405180910390f35b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109495780601f1061091e57610100808354040283529160200191610949565b820191906000526020600020905b81548152906001019060200180831161092c57829003601f168201915b505050505081565b600061095d838361160a565b905092915050565b600061096f611737565b905090565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109d257600080fd5b6109dd848484611741565b9392505050565b6000610a7582600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461190d90919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b00848484611741565b3373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600190509392505050565b600360009054906101000a900460ff1681565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610c6257600080fd5b610cf182600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461192f90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b600080610e7b600554610e6d611950565b61190d90919063ffffffff16565b90506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633c9ae2ba6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015610f0357600080fd5b505afa158015610f17573d6000803e3d6000fd5b505050506040513d6020811015610f2d57600080fd5b81019080805190602001909291905050509050610f53828261195890919063ffffffff16565b9250505090565b600080610f6683611996565b905080915050919050565b60055481565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160006040518083038186803b15801561102357600080fd5b505afa158015611037573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561106157600080fd5b81019080805164010000000081111561107957600080fd5b8281019050602081018481111561108f57600080fd5b81518560018202830111640100000000821117156110ac57600080fd5b5050929190505050905090565b60006110c3610e5c565b90506110cd611950565b6005819055507e098457d5059532053339e27f35a9a51bf3e70411156881f497e56d7576922d816040518082815260200191505060405180910390a150565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561114957600080fd5b6111d882600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461190d90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113a157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156113dd57600080fd5b81600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050919050565b60003073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611467576114666110b9565b5b61147183836119de565b905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561158457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156115c057600080fd5b81600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561164757600080fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600254905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561177d57600080fd5b6117ce816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461190d90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611861816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461192f90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b600082821115151561191e57600080fd5b600082840390508091505092915050565b600080828401905083811015151561194657600080fd5b8091505092915050565b600042905090565b60008083141561196b5760009050611990565b6000828402905082848281151561197e57fe5b0414151561198b57600080fd5b809150505b92915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60006119eb338484611741565b600190509291505056fea165627a7a723058202ee497bc3823d1fc5d59d9c6cf82499227543b9f2253dfdab46ff76cd98cbadd0029a165627a7a72305820b07e8be73095eb05a1b7f2693b6ca9a747ed54ddce0336cb4105e6d3a3855d540029";
  var deployedBytecode$1 = "0x6080604052600436106200011b576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806316ada547146200012057806328d249fe146200014e57806332d9cb1a14620001e35780633c9ae2ba14620002505780634510c50c146200027e578063519c637714620002d55780635300f84114620003bc578063537f531214620004295780636659459914620005105780638da5cb5b14620005675780639549294114620005c157806395d89b4114620006975780639951d62f146200072d5780639dbf5eca146200078c578063a18b506b1462000805578063a3eb2b4a146200089a578063a6f9dae11462000923578063ae853faf1462000990578063ef3bf3ad14620009be575b600080fd5b3480156200012d57600080fd5b506200013862000a47565b6040518082815260200191505060405180910390f35b3480156200015b57600080fd5b50620001a1600480360360208110156200017457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505062000a4f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015620001f057600080fd5b5062000236600480360360208110156200020957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505062000a82565b604051808215151515815260200191505060405180910390f35b3480156200025d57600080fd5b506200026862000b1a565b6040518082815260200191505060405180910390f35b3480156200028b57600080fd5b50620002bb60048036036020811015620002a457600080fd5b810190808035906020019092919050505062000b20565b604051808215151515815260200191505060405180910390f35b348015620002e257600080fd5b50620003a260048036036020811015620002fb57600080fd5b81019080803590602001906401000000008111156200031957600080fd5b8201836020820111156200032c57600080fd5b803590602001918460018302840111640100000000831117156200034f57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505062000b8e565b604051808215151515815260200191505060405180910390f35b348015620003c957600080fd5b506200040f60048036036020811015620003e257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505062000e87565b604051808215151515815260200191505060405180910390f35b3480156200043657600080fd5b50620004f6600480360360208110156200044f57600080fd5b81019080803590602001906401000000008111156200046d57600080fd5b8201836020820111156200048057600080fd5b80359060200191846001830284011164010000000083111715620004a357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505062000ea7565b604051808215151515815260200191505060405180910390f35b3480156200051d57600080fd5b506200054d600480360360208110156200053657600080fd5b810190808035906020019092919050505062000f27565b604051808215151515815260200191505060405180910390f35b3480156200057457600080fd5b506200057f62000f95565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015620005ce57600080fd5b506200069560048036036040811015620005e757600080fd5b81019080803590602001906401000000008111156200060557600080fd5b8201836020820111156200061857600080fd5b803590602001918460208302840111640100000000831117156200063b57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019092919050505062000fba565b005b348015620006a457600080fd5b50620006af620014eb565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015620006f1578082015181840152602081019050620006d4565b50505050905090810190601f1680156200071f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156200073a57600080fd5b506200078a600480360360408110156200075357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506200158d565b005b3480156200079957600080fd5b50620007eb60048036036040811015620007b257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035151590602001909291905050506200168e565b604051808215151515815260200191505060405180910390f35b3480156200081257600080fd5b5062000858600480360360208110156200082b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506200178a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015620008a757600080fd5b506200090d60048036036040811015620008c057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050620017bd565b6040518082815260200191505060405180910390f35b3480156200093057600080fd5b5062000976600480360360208110156200094957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050620017e2565b604051808215151515815260200191505060405180910390f35b3480156200099d57600080fd5b50620009a8620018c6565b6040518082815260200191505060405180910390f35b348015620009cb57600080fd5b5062000a3160048036036040811015620009e457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050620018cc565b6040518082815260200191505060405180910390f35b600042905090565b60066020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008073ffffffffffffffffffffffffffffffffffffffff16600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b60015481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151562000b7e57600080fd5b8160028190555060019050919050565b60008073ffffffffffffffffffffffffffffffffffffffff16600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151562000c2a57600080fd5b6000338360045462000c3b62001c59565b808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b8381101562000cb257808201518184015260208101905062000c95565b50505050905090810190601f16801562000ce05780820380516001836020036101000a031916815260200191505b50945050505050604051809103906000f08015801562000d04573d6000803e3d6000fd5b50905080600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f358ba8f768af134eb5af120e9a61dc1ef29b29f597f047b555fc3675064a034282604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a26001915050919050565b60056020528060005260406000206000915054906101000a900460ff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151562000f0557600080fd5b816003908051906020019062000f1d92919062001c6a565b5060019050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151562000f8557600080fd5b8160018190555060019050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600582511115151562000fcc57600080fd5b600033905060008090505b8351811015620014e5576000848281518110151562000ff257fe5b9060200190602002015190506000620011ab670de0b6b3a76400006200119c600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156200115057600080fd5b505afa15801562001165573d6000803e3d6000fd5b505050506040513d60208110156200117c57600080fd5b810190808051906020019092919050505062001bc890919063ffffffff16565b62001c0a90919063ffffffff16565b90508085600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015620012a857600080fd5b505afa158015620012bd573d6000803e3d6000fd5b505050506040513d6020811015620012d457600080fd5b810190808051906020019092919050505001111515156200135d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f5472757374206c696d697420657863656564656400000000000000000000000081525060200191505060405180910390fd5b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166320a6703c8584886040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b1580156200149457600080fd5b505af1158015620014a9573d6000803e3d6000fd5b505050506040513d6020811015620014c057600080fd5b8101908080519060200190929190505050508193505050808060010191505062000fd7565b50505050565b60038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015620015855780601f10620015595761010080835404028352916020019162001585565b820191906000526020600020905b8154815290600101906020018083116200156757829003601f168201915b505050505081565b620015988262000a82565b1515620015a457600080fd5b80600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fe60c754dd8ab0b1b5fccba257d6ebcd7d09e360ab7dd7a6e58198ca1f57cdcec836040518082815260200191505060405180910390a35050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515620016ec57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156200172957600080fd5b81600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001905092915050565b60076020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6008602052816000526040600020602052806000526040600020600091509150505481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156200184057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156200187d57600080fd5b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050919050565b60025481565b60008062001a73606462001a64600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801562001a1857600080fd5b505afa15801562001a2d573d6000803e3d6000fd5b505050506040513d602081101562001a4457600080fd5b810190808051906020019092919050505062001bc890919063ffffffff16565b62001c0a90919063ffffffff16565b905062001bbf600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231866040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801562001b7257600080fd5b505afa15801562001b87573d6000803e3d6000fd5b505050506040513d602081101562001b9e57600080fd5b81019080805190602001909291905050508262001c3690919063ffffffff16565b91505092915050565b60008083141562001bdd576000905062001c04565b6000828402905082848281151562001bf157fe5b0414151562001bff57600080fd5b809150505b92915050565b6000808211151562001c1b57600080fd5b6000828481151562001c2957fe5b0490508091505092915050565b600082821115151562001c4857600080fd5b600082840390508091505092915050565b604051611e5a8062001d1a83390190565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1062001cad57805160ff191683800117855562001cde565b8280016001018555821562001cde579182015b8281111562001cdd57825182559160200191906001019062001cc0565b5b50905062001ced919062001cf1565b5090565b62001d1691905b8082111562001d1257600081600090555060010162001cf8565b5090565b9056fe60806040526012600360006101000a81548160ff021916908360ff1602179055503480156200002d57600080fd5b5060405162001e5a38038062001e5a833981018060405260608110156200005357600080fd5b810190808051906020019092919080516401000000008111156200007657600080fd5b828101905060208101848111156200008d57600080fd5b8151856001820283011164010000000082111715620000ab57600080fd5b505092919060200180519060200190929190505050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515620000fd57600080fd5b8160049080519060200190620001159291906200037a565b5082600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620001b1620001db640100000000026401000000009004565b600581905550620001d28382620001e3640100000000026401000000009004565b50505062000429565b600042905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156200022057600080fd5b620002458160025462000358640100000000026200192f179091906401000000009004565b600281905550620002ac816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205462000358640100000000026200192f179091906401000000009004565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b60008082840190508381101515156200037057600080fd5b8091505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620003bd57805160ff1916838001178555620003ee565b82800160010185558215620003ee579182015b82811115620003ed578251825591602001919060010190620003d0565b5b509050620003fd919062000401565b5090565b6200042691905b808211156200042257600081600090555060010162000408565b5090565b90565b611a2180620004396000396000f3fe608060405260043610610112576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610117578063095ea7b3146101a757806318160ddd1461021a57806320a6703c1461024557806323b872dd146102d8578063313ce5671461036b578063365a86fc1461039c57806339509351146103f35780636c050eae1461046657806370a08231146104915780638b4eed81146104f65780638da5cb5b1461052157806395d89b4114610578578063a2e6204514610608578063a457c2d71461061f578063a6f9dae114610692578063a9059cbb146106fb578063dd62ed3e1461076e578063f77c4791146107f3578063fbf08da91461084a575b600080fd5b34801561012357600080fd5b5061012c6108b3565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561016c578082015181840152602081019050610151565b50505050905090810190601f1680156101995780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101b357600080fd5b50610200600480360360408110156101ca57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610951565b604051808215151515815260200191505060405180910390f35b34801561022657600080fd5b5061022f610965565b6040518082815260200191505060405180910390f35b34801561025157600080fd5b506102be6004803603606081101561026857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610974565b604051808215151515815260200191505060405180910390f35b3480156102e457600080fd5b50610351600480360360608110156102fb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506109e4565b604051808215151515815260200191505060405180910390f35b34801561037757600080fd5b50610380610bec565b604051808260ff1660ff16815260200191505060405180910390f35b3480156103a857600080fd5b506103b1610bff565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103ff57600080fd5b5061044c6004803603604081101561041657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c25565b604051808215151515815260200191505060405180910390f35b34801561047257600080fd5b5061047b610e5c565b6040518082815260200191505060405180910390f35b34801561049d57600080fd5b506104e0600480360360208110156104b457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f5a565b6040518082815260200191505060405180910390f35b34801561050257600080fd5b5061050b610f71565b6040518082815260200191505060405180910390f35b34801561052d57600080fd5b50610536610f77565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561058457600080fd5b5061058d610f9d565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105cd5780820151818401526020810190506105b2565b50505050905090810190601f1680156105fa5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561061457600080fd5b5061061d6110b9565b005b34801561062b57600080fd5b506106786004803603604081101561064257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061110c565b604051808215151515815260200191505060405180910390f35b34801561069e57600080fd5b506106e1600480360360208110156106b557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611343565b604051808215151515815260200191505060405180910390f35b34801561070757600080fd5b506107546004803603604081101561071e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611427565b604051808215151515815260200191505060405180910390f35b34801561077a57600080fd5b506107dd6004803603604081101561079157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611479565b6040518082815260200191505060405180910390f35b3480156107ff57600080fd5b50610808611500565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561085657600080fd5b506108996004803603602081101561086d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611526565b604051808215151515815260200191505060405180910390f35b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109495780601f1061091e57610100808354040283529160200191610949565b820191906000526020600020905b81548152906001019060200180831161092c57829003601f168201915b505050505081565b600061095d838361160a565b905092915050565b600061096f611737565b905090565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109d257600080fd5b6109dd848484611741565b9392505050565b6000610a7582600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461190d90919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b00848484611741565b3373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600190509392505050565b600360009054906101000a900460ff1681565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610c6257600080fd5b610cf182600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461192f90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b600080610e7b600554610e6d611950565b61190d90919063ffffffff16565b90506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633c9ae2ba6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015610f0357600080fd5b505afa158015610f17573d6000803e3d6000fd5b505050506040513d6020811015610f2d57600080fd5b81019080805190602001909291905050509050610f53828261195890919063ffffffff16565b9250505090565b600080610f6683611996565b905080915050919050565b60055481565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160006040518083038186803b15801561102357600080fd5b505afa158015611037573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561106157600080fd5b81019080805164010000000081111561107957600080fd5b8281019050602081018481111561108f57600080fd5b81518560018202830111640100000000821117156110ac57600080fd5b5050929190505050905090565b60006110c3610e5c565b90506110cd611950565b6005819055507e098457d5059532053339e27f35a9a51bf3e70411156881f497e56d7576922d816040518082815260200191505060405180910390a150565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561114957600080fd5b6111d882600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461190d90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113a157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156113dd57600080fd5b81600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050919050565b60003073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611467576114666110b9565b5b61147183836119de565b905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561158457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156115c057600080fd5b81600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561164757600080fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600254905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561177d57600080fd5b6117ce816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461190d90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611861816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461192f90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b600082821115151561191e57600080fd5b600082840390508091505092915050565b600080828401905083811015151561194657600080fd5b8091505092915050565b600042905090565b60008083141561196b5760009050611990565b6000828402905082848281151561197e57fe5b0414151561198b57600080fd5b809150505b92915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60006119eb338484611741565b600190509291505056fea165627a7a723058202ee497bc3823d1fc5d59d9c6cf82499227543b9f2253dfdab46ff76cd98cbadd0029a165627a7a72305820b07e8be73095eb05a1b7f2693b6ca9a747ed54ddce0336cb4105e6d3a3855d540029";
  var sourceMap$1 = "284:3837:0:-;;;987:328;8:9:-1;5:2;;;30:1;27;20:12;5:2;987:328:0;;;;;;;;;;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;987:328:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;330:9;325:1;311:12;307:20;289:16;285:43;282:58;261:11;247:12;244:29;233:115;230:2;;;361:1;358;351:12;230:2;0:372;;987:328:0;;;;;;;;;;;;;;;;;1145:1;1127:20;;:6;:20;;;;1118:30;;;;;;;;1166:6;1158:5;;:14;;;;;;;;;;;;;;;;;;1197:9;1182:12;:24;;;;1232:10;1216:13;:26;;;;1261:7;1252:6;:16;;;;;;;;;;;;:::i;:::-;;1294:14;1278:13;:30;;;;987:328;;;;;284:3837;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;";
  var deployedSourceMap$1 = "284:3837:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2270:70;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2270:70:0;;;;;;;;;;;;;;;;;;;;;;;599:45;;8:9:-1;5:2;;;30:1;27;20:12;5:2;599:45:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;599:45:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2346:134;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2346:134:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2346:134:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;363:27;;8:9:-1;5:2;;;30:1;27;20:12;5:2;363:27:0;;;;;;;;;;;;;;;;;;;;;;;1888:187;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1888:187:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1888:187:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2564:361;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2564:361:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2564:361:0;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;2564:361:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;2564:361:0;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;2564:361:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;2564:361:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;552:41;;8:9:-1;5:2;;;30:1;27;20:12;5:2;552:41:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;552:41:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2081:183;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2081:183:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2081:183:0;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;2081:183:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;2081:183:0;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;2081:183:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;2081:183:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1700:182;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1700:182:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1700:182:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;336:20;;8:9:-1;5:2;;;30:1;27;20:12;5:2;336:20:0;;;;;;;;;;;;;;;;;;;;;;;;;;;3586:532;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3586:532:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3586:532:0;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;3586:532:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;3586:532:0;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;3586:532:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;3586:532:0;;;;;;;;;;;;;;;;;;;;;;;;;;;486:20;;8:9:-1;5:2;;;30:1;27;20:12;5:2;486:20:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;486:20:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3039:188;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3039:188:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3039:188:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1496:198;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1496:198:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1496:198:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;650:47;;8:9:-1;5:2;;;30:1;27;20:12;5:2;650:47:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;650:47:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;703:63;;8:9:-1;5:2;;;30:1;27;20:12;5:2;703:63:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;703:63:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1321:169;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1321:169:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1321:169:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;444:28;;8:9:-1;5:2;;;30:1;27;20:12;5:2;444:28:0;;;;;;;;;;;;;;;;;;;;;;;3233:230;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3233:230:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3233:230:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2270:70;2307:4;2322:15;2315:22;;2270:70;:::o;599:45::-;;;;;;;;;;;;;;;;;;;;;;:::o;2346:134::-;2404:4;2470:1;2428:44;;2436:11;:21;2448:8;2436:21;;;;;;;;;;;;;;;;;;;;;;;;;2428:44;;;;2420:53;;2346:134;;;:::o;363:27::-;;;;:::o;1888:187::-;1959:4;957:5;;;;;;;;;;;943:19;;:10;:19;;;934:29;;;;;;;;2037:10;2021:13;:26;;;;2064:4;2057:11;;1888:187;;;:::o;2564:361::-;2617:4;2685:1;2641:46;;2649:11;:23;2661:10;2649:23;;;;;;;;;;;;;;;;;;;;;;;;;2641:46;;;2633:55;;;;;;;;2699:11;2723:10;2735:5;2742:13;;2713:43;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;2713:43:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2713:43:0;2699:57;;2792:5;2766:11;:23;2778:10;2766:23;;;;;;;;;;;;;;;;:31;;;;;;;;;;;;;;;;;;2837:10;2807:11;:27;2827:5;2807:27;;;;;;;;;;;;;;;;:40;;;;;;;;;;;;;;;;;;2870:10;2863:34;;;2890:5;2863:34;;;;;;;;;;;;;;;;;;;;;;2914:4;2907:11;;;2564:361;;;:::o;552:41::-;;;;;;;;;;;;;;;;;;;;;;:::o;2081:183::-;2152:4;957:5;;;;;;;;;;;943:19;;:10;:19;;;934:29;;;;;;;;2229:7;2220:6;:16;;;;;;;;;;;;:::i;:::-;;2253:4;2246:11;;2081:183;;;:::o;1700:182::-;1769:4;957:5;;;;;;;;;;;943:19;;:10;:19;;;934:29;;;;;;;;1845:9;1830:12;:24;;;;1871:4;1864:11;;1700:182;;;:::o;336:20::-;;;;;;;;;;;;;:::o;3586:532::-;3686:1;3670:5;:12;:17;;3662:26;;;;;;;;3698:12;3713:10;3698:25;;3738:6;3747:1;3738:10;;3733:379;3754:5;:12;3750:1;:16;3733:379;;;3787:12;3802:5;3808:1;3802:8;;;;;;;;;;;;;;;;;;3787:23;;3824:11;3838:82;3900:19;3839:55;3875:6;:12;3882:4;3875:12;;;;;;;;;;;;;;;:18;3888:4;3875:18;;;;;;;;;;;;;;;;3839:11;:17;3851:4;3839:17;;;;;;;;;;;;;;;;;;;;;;;;;:29;;;:31;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3839:31:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3839:31:0;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3839:31:0;;;;;;;;;;;;;;;;:35;;:55;;;;:::i;:::-;3838:61;;:82;;;;:::i;:::-;3824:96;;3986:3;3979;3943:11;:17;3955:4;3943:17;;;;;;;;;;;;;;;;;;;;;;;;;:27;;;3971:4;3943:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3943:33:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3943:33:0;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3943:33:0;;;;;;;;;;;;;;;;:39;:46;;3935:79;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4029:11;:17;4041:4;4029:17;;;;;;;;;;;;;;;;;;;;;;;;;:29;;;4059:4;4065;4071:3;4029:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4029:46:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4029:46:0;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4029:46:0;;;;;;;;;;;;;;;;;4096:4;4089:11;;3733:379;;3768:3;;;;;;;3733:379;;;;3586:532;;;:::o;486:20::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;3039:188::-;3108:18;3118:7;3108:9;:18::i;:::-;3100:27;;;;;;;;3167:5;3137:6;:18;3144:10;3137:18;;;;;;;;;;;;;;;:27;3156:7;3137:27;;;;;;;;;;;;;;;:35;;;;3205:7;3187:33;;3193:10;3187:33;;;3214:5;3187:33;;;;;;;;;;;;;;;;;;3039:188;;:::o;1496:198::-;1579:4;957:5;;;;;;;;;;;943:19;;:10;:19;;;934:29;;;;;;;;1623:1;1603:22;;:8;:22;;;;1595:31;;;;;;;;1657:9;1636:8;:18;1645:8;1636:18;;;;;;;;;;;;;;;;:30;;;;;;;;;;;;;;;;;;1683:4;1676:11;;1496:198;;;;:::o;650:47::-;;;;;;;;;;;;;;;;;;;;;;:::o;703:63::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1321:169::-;1387:4;957:5;;;;;;;;;;;943:19;;:10;:19;;;934:29;;;;;;;;1432:1;1411:23;;:9;:23;;;;1403:32;;;;;;;;1453:9;1445:5;;:17;;;;;;;;;;;;;;;;;;1479:4;1472:11;;1321:169;;;:::o;444:28::-;;;;:::o;3233:230::-;3304:7;3323:11;3337:62;3395:3;3338:51;3372:6;:10;3379:2;3372:10;;;;;;;;;;;;;;;:16;3383:4;3372:16;;;;;;;;;;;;;;;;3338:11;:15;3350:2;3338:15;;;;;;;;;;;;;;;;;;;;;;;;;:27;;;:29;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3338:29:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3338:29:0;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3338:29:0;;;;;;;;;;;;;;;;:33;;:51;;;;:::i;:::-;3337:57;;:62;;;;:::i;:::-;3323:76;;3416:40;3424:11;:15;3436:2;3424:15;;;;;;;;;;;;;;;;;;;;;;;;;:25;;;3450:4;3424:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3424:31:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3424:31:0;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3424:31:0;;;;;;;;;;;;;;;;3416:3;:7;;:40;;;;:::i;:::-;3409:47;;;3233:230;;;;:::o;229:421:5:-;287:7;532:1;527;:6;523:45;;;556:1;549:8;;;;523:45;578:9;594:1;590;:5;578:17;;622:1;617;613;:5;;;;;;;;:10;605:19;;;;;;;;642:1;635:8;;;229:421;;;;;:::o;778:296::-;836:7;933:1;929;:5;921:14;;;;;;;;945:9;961:1;957;:5;;;;;;;;945:17;;1066:1;1059:8;;;778:296;;;;:::o;1205:145::-;1263:7;1295:1;1290;:6;;1282:15;;;;;;;;1307:9;1323:1;1319;:5;1307:17;;1342:1;1335:8;;;1205:145;;;;:::o;284:3837:0:-;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o";
  var source$1 = "pragma solidity ^0.5.0;\n\nimport \"openzeppelin-solidity/contracts/math/SafeMath.sol\";\nimport \"./Token.sol\";\n\n//finish update function in token\n//what should initial demurrage rate be? And initial issuance?\n//more events in Token\n//parallel transfer helper\n//abstract ownership utils?\n\ncontract Hub {\n    using SafeMath for uint256;\n\n    address public owner;\n\n    uint256 public issuanceRate; // = 1736111111111111; // ~1050 tokens per week\n    uint256 public demurrageRate; // = 0;\n    string public symbol; // = 'CRC';\n    uint256 initialPayout;\n\n    mapping (address => bool) public relayers;\n    mapping (address => Token) public userToToken;\n    mapping (address => address) public tokenToUser;\n    mapping (address => mapping (address => uint256)) public limits;\n\n    event Signup(address indexed user, address token);\n    event Trust(address indexed from, address indexed to, uint256 limit);\n\n    modifier onlyOwner() {\n        require (msg.sender == owner);\n        _;\n    }\n\n    constructor(address _owner, uint256 _issuance, uint256 _demurrage, string memory _symbol, uint256 _initialPayout) public {\n        require (_owner != address(0));\n        owner = _owner;\n        issuanceRate = _issuance;\n        demurrageRate = _demurrage;\n        symbol = _symbol;\n        initialPayout = _initialPayout;\n    }\n\n    function changeOwner(address _newOwner) public onlyOwner returns (bool) {\n        require(_newOwner != address(0));\n        owner = _newOwner;\n        return true;\n    }\n\n    function updateRelayer(address _relayer, bool isRelayer) public onlyOwner returns (bool) {\n        require(_relayer != address(0));\n        relayers[_relayer] = isRelayer;\n        return true;\n    }\n\n    function updateIssuance(uint256 _issuance) public onlyOwner returns (bool) {\n        // safety checks on issuance go here\n        issuanceRate = _issuance;\n        return true;\n    }\n\n    function updateDemurrage(uint256 _demurrage) public onlyOwner returns (bool) {\n        // safety checks on demurrage go here\n        demurrageRate = _demurrage;\n        return true;\n    }\n\n    function updateSymbol(string memory _symbol) public onlyOwner returns (bool) {\n        //maybe we don't need to validate this one?\n        symbol = _symbol;\n        return true;\n    }\n\n    function time() public view returns (uint) { return block.timestamp; }\n\n    function trustable(address _address) public view returns (bool) {\n        return (address(userToToken[_address]) != address(0));\n    }\n\n    // No exit allowed. Once you create a personal token, you're in for good.\n    function signup(string memory _name) public returns (bool) {\n        require(address(userToToken[msg.sender]) == address(0));\n\n        Token token = new Token(msg.sender, _name, initialPayout);\n        userToToken[msg.sender] = token;\n        tokenToUser[address(token)] = msg.sender;\n\n        emit Signup(msg.sender, address(token));\n        return true;\n    }\n\n    // Trust does not have to be reciprocated.\n    // (e.g. I can trust you but you don't have to trust me)\n    function trust(address toTrust, uint limit) public {\n        require(trustable(toTrust));\n        limits[msg.sender][toTrust] = limit;\n        emit Trust(msg.sender, toTrust, limit);\n    }\n\n    function checkSendLimit(address from, address to) public view returns (uint256) {\n        uint256 max = (userToToken[to].totalSupply().mul(limits[to][from])).div(100);\n        return max.sub(userToToken[to].balanceOf(from));\n    }\n\n    // Starts with msg.sender then ,\n    // iterates through the nodes list swapping the nth token for the n+1 token\n    function transferThrough(address[] memory users, uint wad) public {\n        require(users.length <= 5);\n        address prev = msg.sender;\n        for (uint i = 0; i < users.length; i++) {\n            address curr = users[i];\n            uint256 max = (userToToken[curr].totalSupply().mul(limits[curr][prev])).div(1000000000000000000);\n\n            require(userToToken[prev].balanceOf(curr) + wad <= max, \"Trust limit exceeded\");\n\n            userToToken[prev].hubTransfer(prev, curr, wad);\n            prev = curr;\n\n        }\n    }\n\n}\n\n";
  var sourcePath = "/media/000/Documents/Circles/circles-contracts/contracts/Hub.sol";
  var ast = {
    absolutePath: "/media/000/Documents/Circles/circles-contracts/contracts/Hub.sol",
    exportedSymbols: {
      Hub: [442]
    },
    id: 443,
    nodeType: "SourceUnit",
    nodes: [{
      id: 1,
      literals: ["solidity", "^", "0.5", ".0"],
      nodeType: "PragmaDirective",
      src: "0:23:0"
    }, {
      absolutePath: "openzeppelin-solidity/contracts/math/SafeMath.sol",
      file: "openzeppelin-solidity/contracts/math/SafeMath.sol",
      id: 2,
      nodeType: "ImportDirective",
      scope: 443,
      sourceUnit: 1030,
      src: "25:59:0",
      symbolAliases: [],
      unitAlias: ""
    }, {
      absolutePath: "/media/000/Documents/Circles/circles-contracts/contracts/Token.sol",
      file: "./Token.sol",
      id: 3,
      nodeType: "ImportDirective",
      scope: 443,
      sourceUnit: 795,
      src: "85:21:0",
      symbolAliases: [],
      unitAlias: ""
    }, {
      baseContracts: [],
      contractDependencies: [794],
      contractKind: "contract",
      documentation: null,
      fullyImplemented: true,
      id: 442,
      linearizedBaseContracts: [442],
      name: "Hub",
      nodeType: "ContractDefinition",
      nodes: [{
        id: 6,
        libraryName: {
          contractScope: null,
          id: 4,
          name: "SafeMath",
          nodeType: "UserDefinedTypeName",
          referencedDeclaration: 1029,
          src: "309:8:0",
          typeDescriptions: {
            typeIdentifier: "t_contract$_SafeMath_$1029",
            typeString: "library SafeMath"
          }
        },
        nodeType: "UsingForDirective",
        src: "303:27:0",
        typeName: {
          id: 5,
          name: "uint256",
          nodeType: "ElementaryTypeName",
          src: "322:7:0",
          typeDescriptions: {
            typeIdentifier: "t_uint256",
            typeString: "uint256"
          }
        }
      }, {
        constant: false,
        id: 8,
        name: "owner",
        nodeType: "VariableDeclaration",
        scope: 442,
        src: "336:20:0",
        stateVariable: true,
        storageLocation: "default",
        typeDescriptions: {
          typeIdentifier: "t_address",
          typeString: "address"
        },
        typeName: {
          id: 7,
          name: "address",
          nodeType: "ElementaryTypeName",
          src: "336:7:0",
          stateMutability: "nonpayable",
          typeDescriptions: {
            typeIdentifier: "t_address",
            typeString: "address"
          }
        },
        value: null,
        visibility: "public"
      }, {
        constant: false,
        id: 10,
        name: "issuanceRate",
        nodeType: "VariableDeclaration",
        scope: 442,
        src: "363:27:0",
        stateVariable: true,
        storageLocation: "default",
        typeDescriptions: {
          typeIdentifier: "t_uint256",
          typeString: "uint256"
        },
        typeName: {
          id: 9,
          name: "uint256",
          nodeType: "ElementaryTypeName",
          src: "363:7:0",
          typeDescriptions: {
            typeIdentifier: "t_uint256",
            typeString: "uint256"
          }
        },
        value: null,
        visibility: "public"
      }, {
        constant: false,
        id: 12,
        name: "demurrageRate",
        nodeType: "VariableDeclaration",
        scope: 442,
        src: "444:28:0",
        stateVariable: true,
        storageLocation: "default",
        typeDescriptions: {
          typeIdentifier: "t_uint256",
          typeString: "uint256"
        },
        typeName: {
          id: 11,
          name: "uint256",
          nodeType: "ElementaryTypeName",
          src: "444:7:0",
          typeDescriptions: {
            typeIdentifier: "t_uint256",
            typeString: "uint256"
          }
        },
        value: null,
        visibility: "public"
      }, {
        constant: false,
        id: 14,
        name: "symbol",
        nodeType: "VariableDeclaration",
        scope: 442,
        src: "486:20:0",
        stateVariable: true,
        storageLocation: "default",
        typeDescriptions: {
          typeIdentifier: "t_string_storage",
          typeString: "string"
        },
        typeName: {
          id: 13,
          name: "string",
          nodeType: "ElementaryTypeName",
          src: "486:6:0",
          typeDescriptions: {
            typeIdentifier: "t_string_storage_ptr",
            typeString: "string"
          }
        },
        value: null,
        visibility: "public"
      }, {
        constant: false,
        id: 16,
        name: "initialPayout",
        nodeType: "VariableDeclaration",
        scope: 442,
        src: "524:21:0",
        stateVariable: true,
        storageLocation: "default",
        typeDescriptions: {
          typeIdentifier: "t_uint256",
          typeString: "uint256"
        },
        typeName: {
          id: 15,
          name: "uint256",
          nodeType: "ElementaryTypeName",
          src: "524:7:0",
          typeDescriptions: {
            typeIdentifier: "t_uint256",
            typeString: "uint256"
          }
        },
        value: null,
        visibility: "internal"
      }, {
        constant: false,
        id: 20,
        name: "relayers",
        nodeType: "VariableDeclaration",
        scope: 442,
        src: "552:41:0",
        stateVariable: true,
        storageLocation: "default",
        typeDescriptions: {
          typeIdentifier: "t_mapping$_t_address_$_t_bool_$",
          typeString: "mapping(address => bool)"
        },
        typeName: {
          id: 19,
          keyType: {
            id: 17,
            name: "address",
            nodeType: "ElementaryTypeName",
            src: "561:7:0",
            typeDescriptions: {
              typeIdentifier: "t_address",
              typeString: "address"
            }
          },
          nodeType: "Mapping",
          src: "552:25:0",
          typeDescriptions: {
            typeIdentifier: "t_mapping$_t_address_$_t_bool_$",
            typeString: "mapping(address => bool)"
          },
          valueType: {
            id: 18,
            name: "bool",
            nodeType: "ElementaryTypeName",
            src: "572:4:0",
            typeDescriptions: {
              typeIdentifier: "t_bool",
              typeString: "bool"
            }
          }
        },
        value: null,
        visibility: "public"
      }, {
        constant: false,
        id: 24,
        name: "userToToken",
        nodeType: "VariableDeclaration",
        scope: 442,
        src: "599:45:0",
        stateVariable: true,
        storageLocation: "default",
        typeDescriptions: {
          typeIdentifier: "t_mapping$_t_address_$_t_contract$_Token_$794_$",
          typeString: "mapping(address => contract Token)"
        },
        typeName: {
          id: 23,
          keyType: {
            id: 21,
            name: "address",
            nodeType: "ElementaryTypeName",
            src: "608:7:0",
            typeDescriptions: {
              typeIdentifier: "t_address",
              typeString: "address"
            }
          },
          nodeType: "Mapping",
          src: "599:26:0",
          typeDescriptions: {
            typeIdentifier: "t_mapping$_t_address_$_t_contract$_Token_$794_$",
            typeString: "mapping(address => contract Token)"
          },
          valueType: {
            contractScope: null,
            id: 22,
            name: "Token",
            nodeType: "UserDefinedTypeName",
            referencedDeclaration: 794,
            src: "619:5:0",
            typeDescriptions: {
              typeIdentifier: "t_contract$_Token_$794",
              typeString: "contract Token"
            }
          }
        },
        value: null,
        visibility: "public"
      }, {
        constant: false,
        id: 28,
        name: "tokenToUser",
        nodeType: "VariableDeclaration",
        scope: 442,
        src: "650:47:0",
        stateVariable: true,
        storageLocation: "default",
        typeDescriptions: {
          typeIdentifier: "t_mapping$_t_address_$_t_address_$",
          typeString: "mapping(address => address)"
        },
        typeName: {
          id: 27,
          keyType: {
            id: 25,
            name: "address",
            nodeType: "ElementaryTypeName",
            src: "659:7:0",
            typeDescriptions: {
              typeIdentifier: "t_address",
              typeString: "address"
            }
          },
          nodeType: "Mapping",
          src: "650:28:0",
          typeDescriptions: {
            typeIdentifier: "t_mapping$_t_address_$_t_address_$",
            typeString: "mapping(address => address)"
          },
          valueType: {
            id: 26,
            name: "address",
            nodeType: "ElementaryTypeName",
            src: "670:7:0",
            stateMutability: "nonpayable",
            typeDescriptions: {
              typeIdentifier: "t_address",
              typeString: "address"
            }
          }
        },
        value: null,
        visibility: "public"
      }, {
        constant: false,
        id: 34,
        name: "limits",
        nodeType: "VariableDeclaration",
        scope: 442,
        src: "703:63:0",
        stateVariable: true,
        storageLocation: "default",
        typeDescriptions: {
          typeIdentifier: "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
          typeString: "mapping(address => mapping(address => uint256))"
        },
        typeName: {
          id: 33,
          keyType: {
            id: 29,
            name: "address",
            nodeType: "ElementaryTypeName",
            src: "712:7:0",
            typeDescriptions: {
              typeIdentifier: "t_address",
              typeString: "address"
            }
          },
          nodeType: "Mapping",
          src: "703:49:0",
          typeDescriptions: {
            typeIdentifier: "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
            typeString: "mapping(address => mapping(address => uint256))"
          },
          valueType: {
            id: 32,
            keyType: {
              id: 30,
              name: "address",
              nodeType: "ElementaryTypeName",
              src: "732:7:0",
              typeDescriptions: {
                typeIdentifier: "t_address",
                typeString: "address"
              }
            },
            nodeType: "Mapping",
            src: "723:28:0",
            typeDescriptions: {
              typeIdentifier: "t_mapping$_t_address_$_t_uint256_$",
              typeString: "mapping(address => uint256)"
            },
            valueType: {
              id: 31,
              name: "uint256",
              nodeType: "ElementaryTypeName",
              src: "743:7:0",
              typeDescriptions: {
                typeIdentifier: "t_uint256",
                typeString: "uint256"
              }
            }
          }
        },
        value: null,
        visibility: "public"
      }, {
        anonymous: false,
        documentation: null,
        id: 40,
        name: "Signup",
        nodeType: "EventDefinition",
        parameters: {
          id: 39,
          nodeType: "ParameterList",
          parameters: [{
            constant: false,
            id: 36,
            indexed: true,
            name: "user",
            nodeType: "VariableDeclaration",
            scope: 40,
            src: "786:20:0",
            stateVariable: false,
            storageLocation: "default",
            typeDescriptions: {
              typeIdentifier: "t_address",
              typeString: "address"
            },
            typeName: {
              id: 35,
              name: "address",
              nodeType: "ElementaryTypeName",
              src: "786:7:0",
              stateMutability: "nonpayable",
              typeDescriptions: {
                typeIdentifier: "t_address",
                typeString: "address"
              }
            },
            value: null,
            visibility: "internal"
          }, {
            constant: false,
            id: 38,
            indexed: false,
            name: "token",
            nodeType: "VariableDeclaration",
            scope: 40,
            src: "808:13:0",
            stateVariable: false,
            storageLocation: "default",
            typeDescriptions: {
              typeIdentifier: "t_address",
              typeString: "address"
            },
            typeName: {
              id: 37,
              name: "address",
              nodeType: "ElementaryTypeName",
              src: "808:7:0",
              stateMutability: "nonpayable",
              typeDescriptions: {
                typeIdentifier: "t_address",
                typeString: "address"
              }
            },
            value: null,
            visibility: "internal"
          }],
          src: "785:37:0"
        },
        src: "773:50:0"
      }, {
        anonymous: false,
        documentation: null,
        id: 48,
        name: "Trust",
        nodeType: "EventDefinition",
        parameters: {
          id: 47,
          nodeType: "ParameterList",
          parameters: [{
            constant: false,
            id: 42,
            indexed: true,
            name: "from",
            nodeType: "VariableDeclaration",
            scope: 48,
            src: "840:20:0",
            stateVariable: false,
            storageLocation: "default",
            typeDescriptions: {
              typeIdentifier: "t_address",
              typeString: "address"
            },
            typeName: {
              id: 41,
              name: "address",
              nodeType: "ElementaryTypeName",
              src: "840:7:0",
              stateMutability: "nonpayable",
              typeDescriptions: {
                typeIdentifier: "t_address",
                typeString: "address"
              }
            },
            value: null,
            visibility: "internal"
          }, {
            constant: false,
            id: 44,
            indexed: true,
            name: "to",
            nodeType: "VariableDeclaration",
            scope: 48,
            src: "862:18:0",
            stateVariable: false,
            storageLocation: "default",
            typeDescriptions: {
              typeIdentifier: "t_address",
              typeString: "address"
            },
            typeName: {
              id: 43,
              name: "address",
              nodeType: "ElementaryTypeName",
              src: "862:7:0",
              stateMutability: "nonpayable",
              typeDescriptions: {
                typeIdentifier: "t_address",
                typeString: "address"
              }
            },
            value: null,
            visibility: "internal"
          }, {
            constant: false,
            id: 46,
            indexed: false,
            name: "limit",
            nodeType: "VariableDeclaration",
            scope: 48,
            src: "882:13:0",
            stateVariable: false,
            storageLocation: "default",
            typeDescriptions: {
              typeIdentifier: "t_uint256",
              typeString: "uint256"
            },
            typeName: {
              id: 45,
              name: "uint256",
              nodeType: "ElementaryTypeName",
              src: "882:7:0",
              typeDescriptions: {
                typeIdentifier: "t_uint256",
                typeString: "uint256"
              }
            },
            value: null,
            visibility: "internal"
          }],
          src: "839:57:0"
        },
        src: "828:69:0"
      }, {
        body: {
          id: 58,
          nodeType: "Block",
          src: "924:57:0",
          statements: [{
            expression: {
              argumentTypes: null,
              "arguments": [{
                argumentTypes: null,
                commonType: {
                  typeIdentifier: "t_address",
                  typeString: "address"
                },
                id: 54,
                isConstant: false,
                isLValue: false,
                isPure: false,
                lValueRequested: false,
                leftExpression: {
                  argumentTypes: null,
                  expression: {
                    argumentTypes: null,
                    id: 51,
                    name: "msg",
                    nodeType: "Identifier",
                    overloadedDeclarations: [],
                    referencedDeclaration: 1545,
                    src: "943:3:0",
                    typeDescriptions: {
                      typeIdentifier: "t_magic_message",
                      typeString: "msg"
                    }
                  },
                  id: 52,
                  isConstant: false,
                  isLValue: false,
                  isPure: false,
                  lValueRequested: false,
                  memberName: "sender",
                  nodeType: "MemberAccess",
                  referencedDeclaration: null,
                  src: "943:10:0",
                  typeDescriptions: {
                    typeIdentifier: "t_address_payable",
                    typeString: "address payable"
                  }
                },
                nodeType: "BinaryOperation",
                operator: "==",
                rightExpression: {
                  argumentTypes: null,
                  id: 53,
                  name: "owner",
                  nodeType: "Identifier",
                  overloadedDeclarations: [],
                  referencedDeclaration: 8,
                  src: "957:5:0",
                  typeDescriptions: {
                    typeIdentifier: "t_address",
                    typeString: "address"
                  }
                },
                src: "943:19:0",
                typeDescriptions: {
                  typeIdentifier: "t_bool",
                  typeString: "bool"
                }
              }],
              expression: {
                argumentTypes: [{
                  typeIdentifier: "t_bool",
                  typeString: "bool"
                }],
                id: 50,
                name: "require",
                nodeType: "Identifier",
                overloadedDeclarations: [1548, 1549],
                referencedDeclaration: 1548,
                src: "934:7:0",
                typeDescriptions: {
                  typeIdentifier: "t_function_require_pure$_t_bool_$returns$__$",
                  typeString: "function (bool) pure"
                }
              },
              id: 55,
              isConstant: false,
              isLValue: false,
              isPure: false,
              kind: "functionCall",
              lValueRequested: false,
              names: [],
              nodeType: "FunctionCall",
              src: "934:29:0",
              typeDescriptions: {
                typeIdentifier: "t_tuple$__$",
                typeString: "tuple()"
              }
            },
            id: 56,
            nodeType: "ExpressionStatement",
            src: "934:29:0"
          }, {
            id: 57,
            nodeType: "PlaceholderStatement",
            src: "973:1:0"
          }]
        },
        documentation: null,
        id: 59,
        name: "onlyOwner",
        nodeType: "ModifierDefinition",
        parameters: {
          id: 49,
          nodeType: "ParameterList",
          parameters: [],
          src: "921:2:0"
        },
        src: "903:78:0",
        visibility: "internal"
      }, {
        body: {
          id: 100,
          nodeType: "Block",
          src: "1108:207:0",
          statements: [{
            expression: {
              argumentTypes: null,
              "arguments": [{
                argumentTypes: null,
                commonType: {
                  typeIdentifier: "t_address",
                  typeString: "address"
                },
                id: 77,
                isConstant: false,
                isLValue: false,
                isPure: false,
                lValueRequested: false,
                leftExpression: {
                  argumentTypes: null,
                  id: 73,
                  name: "_owner",
                  nodeType: "Identifier",
                  overloadedDeclarations: [],
                  referencedDeclaration: 61,
                  src: "1127:6:0",
                  typeDescriptions: {
                    typeIdentifier: "t_address",
                    typeString: "address"
                  }
                },
                nodeType: "BinaryOperation",
                operator: "!=",
                rightExpression: {
                  argumentTypes: null,
                  "arguments": [{
                    argumentTypes: null,
                    hexValue: "30",
                    id: 75,
                    isConstant: false,
                    isLValue: false,
                    isPure: true,
                    kind: "number",
                    lValueRequested: false,
                    nodeType: "Literal",
                    src: "1145:1:0",
                    subdenomination: null,
                    typeDescriptions: {
                      typeIdentifier: "t_rational_0_by_1",
                      typeString: "int_const 0"
                    },
                    value: "0"
                  }],
                  expression: {
                    argumentTypes: [{
                      typeIdentifier: "t_rational_0_by_1",
                      typeString: "int_const 0"
                    }],
                    id: 74,
                    isConstant: false,
                    isLValue: false,
                    isPure: true,
                    lValueRequested: false,
                    nodeType: "ElementaryTypeNameExpression",
                    src: "1137:7:0",
                    typeDescriptions: {
                      typeIdentifier: "t_type$_t_address_$",
                      typeString: "type(address)"
                    },
                    typeName: "address"
                  },
                  id: 76,
                  isConstant: false,
                  isLValue: false,
                  isPure: true,
                  kind: "typeConversion",
                  lValueRequested: false,
                  names: [],
                  nodeType: "FunctionCall",
                  src: "1137:10:0",
                  typeDescriptions: {
                    typeIdentifier: "t_address_payable",
                    typeString: "address payable"
                  }
                },
                src: "1127:20:0",
                typeDescriptions: {
                  typeIdentifier: "t_bool",
                  typeString: "bool"
                }
              }],
              expression: {
                argumentTypes: [{
                  typeIdentifier: "t_bool",
                  typeString: "bool"
                }],
                id: 72,
                name: "require",
                nodeType: "Identifier",
                overloadedDeclarations: [1548, 1549],
                referencedDeclaration: 1548,
                src: "1118:7:0",
                typeDescriptions: {
                  typeIdentifier: "t_function_require_pure$_t_bool_$returns$__$",
                  typeString: "function (bool) pure"
                }
              },
              id: 78,
              isConstant: false,
              isLValue: false,
              isPure: false,
              kind: "functionCall",
              lValueRequested: false,
              names: [],
              nodeType: "FunctionCall",
              src: "1118:30:0",
              typeDescriptions: {
                typeIdentifier: "t_tuple$__$",
                typeString: "tuple()"
              }
            },
            id: 79,
            nodeType: "ExpressionStatement",
            src: "1118:30:0"
          }, {
            expression: {
              argumentTypes: null,
              id: 82,
              isConstant: false,
              isLValue: false,
              isPure: false,
              lValueRequested: false,
              leftHandSide: {
                argumentTypes: null,
                id: 80,
                name: "owner",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 8,
                src: "1158:5:0",
                typeDescriptions: {
                  typeIdentifier: "t_address",
                  typeString: "address"
                }
              },
              nodeType: "Assignment",
              operator: "=",
              rightHandSide: {
                argumentTypes: null,
                id: 81,
                name: "_owner",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 61,
                src: "1166:6:0",
                typeDescriptions: {
                  typeIdentifier: "t_address",
                  typeString: "address"
                }
              },
              src: "1158:14:0",
              typeDescriptions: {
                typeIdentifier: "t_address",
                typeString: "address"
              }
            },
            id: 83,
            nodeType: "ExpressionStatement",
            src: "1158:14:0"
          }, {
            expression: {
              argumentTypes: null,
              id: 86,
              isConstant: false,
              isLValue: false,
              isPure: false,
              lValueRequested: false,
              leftHandSide: {
                argumentTypes: null,
                id: 84,
                name: "issuanceRate",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 10,
                src: "1182:12:0",
                typeDescriptions: {
                  typeIdentifier: "t_uint256",
                  typeString: "uint256"
                }
              },
              nodeType: "Assignment",
              operator: "=",
              rightHandSide: {
                argumentTypes: null,
                id: 85,
                name: "_issuance",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 63,
                src: "1197:9:0",
                typeDescriptions: {
                  typeIdentifier: "t_uint256",
                  typeString: "uint256"
                }
              },
              src: "1182:24:0",
              typeDescriptions: {
                typeIdentifier: "t_uint256",
                typeString: "uint256"
              }
            },
            id: 87,
            nodeType: "ExpressionStatement",
            src: "1182:24:0"
          }, {
            expression: {
              argumentTypes: null,
              id: 90,
              isConstant: false,
              isLValue: false,
              isPure: false,
              lValueRequested: false,
              leftHandSide: {
                argumentTypes: null,
                id: 88,
                name: "demurrageRate",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 12,
                src: "1216:13:0",
                typeDescriptions: {
                  typeIdentifier: "t_uint256",
                  typeString: "uint256"
                }
              },
              nodeType: "Assignment",
              operator: "=",
              rightHandSide: {
                argumentTypes: null,
                id: 89,
                name: "_demurrage",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 65,
                src: "1232:10:0",
                typeDescriptions: {
                  typeIdentifier: "t_uint256",
                  typeString: "uint256"
                }
              },
              src: "1216:26:0",
              typeDescriptions: {
                typeIdentifier: "t_uint256",
                typeString: "uint256"
              }
            },
            id: 91,
            nodeType: "ExpressionStatement",
            src: "1216:26:0"
          }, {
            expression: {
              argumentTypes: null,
              id: 94,
              isConstant: false,
              isLValue: false,
              isPure: false,
              lValueRequested: false,
              leftHandSide: {
                argumentTypes: null,
                id: 92,
                name: "symbol",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 14,
                src: "1252:6:0",
                typeDescriptions: {
                  typeIdentifier: "t_string_storage",
                  typeString: "string storage ref"
                }
              },
              nodeType: "Assignment",
              operator: "=",
              rightHandSide: {
                argumentTypes: null,
                id: 93,
                name: "_symbol",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 67,
                src: "1261:7:0",
                typeDescriptions: {
                  typeIdentifier: "t_string_memory_ptr",
                  typeString: "string memory"
                }
              },
              src: "1252:16:0",
              typeDescriptions: {
                typeIdentifier: "t_string_storage",
                typeString: "string storage ref"
              }
            },
            id: 95,
            nodeType: "ExpressionStatement",
            src: "1252:16:0"
          }, {
            expression: {
              argumentTypes: null,
              id: 98,
              isConstant: false,
              isLValue: false,
              isPure: false,
              lValueRequested: false,
              leftHandSide: {
                argumentTypes: null,
                id: 96,
                name: "initialPayout",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 16,
                src: "1278:13:0",
                typeDescriptions: {
                  typeIdentifier: "t_uint256",
                  typeString: "uint256"
                }
              },
              nodeType: "Assignment",
              operator: "=",
              rightHandSide: {
                argumentTypes: null,
                id: 97,
                name: "_initialPayout",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 69,
                src: "1294:14:0",
                typeDescriptions: {
                  typeIdentifier: "t_uint256",
                  typeString: "uint256"
                }
              },
              src: "1278:30:0",
              typeDescriptions: {
                typeIdentifier: "t_uint256",
                typeString: "uint256"
              }
            },
            id: 99,
            nodeType: "ExpressionStatement",
            src: "1278:30:0"
          }]
        },
        documentation: null,
        id: 101,
        implemented: true,
        kind: "constructor",
        modifiers: [],
        name: "",
        nodeType: "FunctionDefinition",
        parameters: {
          id: 70,
          nodeType: "ParameterList",
          parameters: [{
            constant: false,
            id: 61,
            name: "_owner",
            nodeType: "VariableDeclaration",
            scope: 101,
            src: "999:14:0",
            stateVariable: false,
            storageLocation: "default",
            typeDescriptions: {
              typeIdentifier: "t_address",
              typeString: "address"
            },
            typeName: {
              id: 60,
              name: "address",
              nodeType: "ElementaryTypeName",
              src: "999:7:0",
              stateMutability: "nonpayable",
              typeDescriptions: {
                typeIdentifier: "t_address",
                typeString: "address"
              }
            },
            value: null,
            visibility: "internal"
          }, {
            constant: false,
            id: 63,
            name: "_issuance",
            nodeType: "VariableDeclaration",
            scope: 101,
            src: "1015:17:0",
            stateVariable: false,
            storageLocation: "default",
            typeDescriptions: {
              typeIdentifier: "t_uint256",
              typeString: "uint256"
            },
            typeName: {
              id: 62,
              name: "uint256",
              nodeType: "ElementaryTypeName",
              src: "1015:7:0",
              typeDescriptions: {
                typeIdentifier: "t_uint256",
                typeString: "uint256"
              }
            },
            value: null,
            visibility: "internal"
          }, {
            constant: false,
            id: 65,
            name: "_demurrage",
            nodeType: "VariableDeclaration",
            scope: 101,
            src: "1034:18:0",
            stateVariable: false,
            storageLocation: "default",
            typeDescriptions: {
              typeIdentifier: "t_uint256",
              typeString: "uint256"
            },
            typeName: {
              id: 64,
              name: "uint256",
              nodeType: "ElementaryTypeName",
              src: "1034:7:0",
              typeDescriptions: {
                typeIdentifier: "t_uint256",
                typeString: "uint256"
              }
            },
            value: null,
            visibility: "internal"
          }, {
            constant: false,
            id: 67,
            name: "_symbol",
            nodeType: "VariableDeclaration",
            scope: 101,
            src: "1054:21:0",
            stateVariable: false,
            storageLocation: "memory",
            typeDescriptions: {
              typeIdentifier: "t_string_memory_ptr",
              typeString: "string"
            },
            typeName: {
              id: 66,
              name: "string",
              nodeType: "ElementaryTypeName",
              src: "1054:6:0",
              typeDescriptions: {
                typeIdentifier: "t_string_storage_ptr",
                typeString: "string"
              }
            },
            value: null,
            visibility: "internal"
          }, {
            constant: false,
            id: 69,
            name: "_initialPayout",
            nodeType: "VariableDeclaration",
            scope: 101,
            src: "1077:22:0",
            stateVariable: false,
            storageLocation: "default",
            typeDescriptions: {
              typeIdentifier: "t_uint256",
              typeString: "uint256"
            },
            typeName: {
              id: 68,
              name: "uint256",
              nodeType: "ElementaryTypeName",
              src: "1077:7:0",
              typeDescriptions: {
                typeIdentifier: "t_uint256",
                typeString: "uint256"
              }
            },
            value: null,
            visibility: "internal"
          }],
          src: "998:102:0"
        },
        returnParameters: {
          id: 71,
          nodeType: "ParameterList",
          parameters: [],
          src: "1108:0:0"
        },
        scope: 442,
        src: "987:328:0",
        stateMutability: "nonpayable",
        superFunction: null,
        visibility: "public"
      }, {
        body: {
          id: 124,
          nodeType: "Block",
          src: "1393:97:0",
          statements: [{
            expression: {
              argumentTypes: null,
              "arguments": [{
                argumentTypes: null,
                commonType: {
                  typeIdentifier: "t_address",
                  typeString: "address"
                },
                id: 115,
                isConstant: false,
                isLValue: false,
                isPure: false,
                lValueRequested: false,
                leftExpression: {
                  argumentTypes: null,
                  id: 111,
                  name: "_newOwner",
                  nodeType: "Identifier",
                  overloadedDeclarations: [],
                  referencedDeclaration: 103,
                  src: "1411:9:0",
                  typeDescriptions: {
                    typeIdentifier: "t_address",
                    typeString: "address"
                  }
                },
                nodeType: "BinaryOperation",
                operator: "!=",
                rightExpression: {
                  argumentTypes: null,
                  "arguments": [{
                    argumentTypes: null,
                    hexValue: "30",
                    id: 113,
                    isConstant: false,
                    isLValue: false,
                    isPure: true,
                    kind: "number",
                    lValueRequested: false,
                    nodeType: "Literal",
                    src: "1432:1:0",
                    subdenomination: null,
                    typeDescriptions: {
                      typeIdentifier: "t_rational_0_by_1",
                      typeString: "int_const 0"
                    },
                    value: "0"
                  }],
                  expression: {
                    argumentTypes: [{
                      typeIdentifier: "t_rational_0_by_1",
                      typeString: "int_const 0"
                    }],
                    id: 112,
                    isConstant: false,
                    isLValue: false,
                    isPure: true,
                    lValueRequested: false,
                    nodeType: "ElementaryTypeNameExpression",
                    src: "1424:7:0",
                    typeDescriptions: {
                      typeIdentifier: "t_type$_t_address_$",
                      typeString: "type(address)"
                    },
                    typeName: "address"
                  },
                  id: 114,
                  isConstant: false,
                  isLValue: false,
                  isPure: true,
                  kind: "typeConversion",
                  lValueRequested: false,
                  names: [],
                  nodeType: "FunctionCall",
                  src: "1424:10:0",
                  typeDescriptions: {
                    typeIdentifier: "t_address_payable",
                    typeString: "address payable"
                  }
                },
                src: "1411:23:0",
                typeDescriptions: {
                  typeIdentifier: "t_bool",
                  typeString: "bool"
                }
              }],
              expression: {
                argumentTypes: [{
                  typeIdentifier: "t_bool",
                  typeString: "bool"
                }],
                id: 110,
                name: "require",
                nodeType: "Identifier",
                overloadedDeclarations: [1548, 1549],
                referencedDeclaration: 1548,
                src: "1403:7:0",
                typeDescriptions: {
                  typeIdentifier: "t_function_require_pure$_t_bool_$returns$__$",
                  typeString: "function (bool) pure"
                }
              },
              id: 116,
              isConstant: false,
              isLValue: false,
              isPure: false,
              kind: "functionCall",
              lValueRequested: false,
              names: [],
              nodeType: "FunctionCall",
              src: "1403:32:0",
              typeDescriptions: {
                typeIdentifier: "t_tuple$__$",
                typeString: "tuple()"
              }
            },
            id: 117,
            nodeType: "ExpressionStatement",
            src: "1403:32:0"
          }, {
            expression: {
              argumentTypes: null,
              id: 120,
              isConstant: false,
              isLValue: false,
              isPure: false,
              lValueRequested: false,
              leftHandSide: {
                argumentTypes: null,
                id: 118,
                name: "owner",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 8,
                src: "1445:5:0",
                typeDescriptions: {
                  typeIdentifier: "t_address",
                  typeString: "address"
                }
              },
              nodeType: "Assignment",
              operator: "=",
              rightHandSide: {
                argumentTypes: null,
                id: 119,
                name: "_newOwner",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 103,
                src: "1453:9:0",
                typeDescriptions: {
                  typeIdentifier: "t_address",
                  typeString: "address"
                }
              },
              src: "1445:17:0",
              typeDescriptions: {
                typeIdentifier: "t_address",
                typeString: "address"
              }
            },
            id: 121,
            nodeType: "ExpressionStatement",
            src: "1445:17:0"
          }, {
            expression: {
              argumentTypes: null,
              hexValue: "74727565",
              id: 122,
              isConstant: false,
              isLValue: false,
              isPure: true,
              kind: "bool",
              lValueRequested: false,
              nodeType: "Literal",
              src: "1479:4:0",
              subdenomination: null,
              typeDescriptions: {
                typeIdentifier: "t_bool",
                typeString: "bool"
              },
              value: "true"
            },
            functionReturnParameters: 109,
            id: 123,
            nodeType: "Return",
            src: "1472:11:0"
          }]
        },
        documentation: null,
        id: 125,
        implemented: true,
        kind: "function",
        modifiers: [{
          "arguments": null,
          id: 106,
          modifierName: {
            argumentTypes: null,
            id: 105,
            name: "onlyOwner",
            nodeType: "Identifier",
            overloadedDeclarations: [],
            referencedDeclaration: 59,
            src: "1368:9:0",
            typeDescriptions: {
              typeIdentifier: "t_modifier$__$",
              typeString: "modifier ()"
            }
          },
          nodeType: "ModifierInvocation",
          src: "1368:9:0"
        }],
        name: "changeOwner",
        nodeType: "FunctionDefinition",
        parameters: {
          id: 104,
          nodeType: "ParameterList",
          parameters: [{
            constant: false,
            id: 103,
            name: "_newOwner",
            nodeType: "VariableDeclaration",
            scope: 125,
            src: "1342:17:0",
            stateVariable: false,
            storageLocation: "default",
            typeDescriptions: {
              typeIdentifier: "t_address",
              typeString: "address"
            },
            typeName: {
              id: 102,
              name: "address",
              nodeType: "ElementaryTypeName",
              src: "1342:7:0",
              stateMutability: "nonpayable",
              typeDescriptions: {
                typeIdentifier: "t_address",
                typeString: "address"
              }
            },
            value: null,
            visibility: "internal"
          }],
          src: "1341:19:0"
        },
        returnParameters: {
          id: 109,
          nodeType: "ParameterList",
          parameters: [{
            constant: false,
            id: 108,
            name: "",
            nodeType: "VariableDeclaration",
            scope: 125,
            src: "1387:4:0",
            stateVariable: false,
            storageLocation: "default",
            typeDescriptions: {
              typeIdentifier: "t_bool",
              typeString: "bool"
            },
            typeName: {
              id: 107,
              name: "bool",
              nodeType: "ElementaryTypeName",
              src: "1387:4:0",
              typeDescriptions: {
                typeIdentifier: "t_bool",
                typeString: "bool"
              }
            },
            value: null,
            visibility: "internal"
          }],
          src: "1386:6:0"
        },
        scope: 442,
        src: "1321:169:0",
        stateMutability: "nonpayable",
        superFunction: null,
        visibility: "public"
      }, {
        body: {
          id: 152,
          nodeType: "Block",
          src: "1585:109:0",
          statements: [{
            expression: {
              argumentTypes: null,
              "arguments": [{
                argumentTypes: null,
                commonType: {
                  typeIdentifier: "t_address",
                  typeString: "address"
                },
                id: 141,
                isConstant: false,
                isLValue: false,
                isPure: false,
                lValueRequested: false,
                leftExpression: {
                  argumentTypes: null,
                  id: 137,
                  name: "_relayer",
                  nodeType: "Identifier",
                  overloadedDeclarations: [],
                  referencedDeclaration: 127,
                  src: "1603:8:0",
                  typeDescriptions: {
                    typeIdentifier: "t_address",
                    typeString: "address"
                  }
                },
                nodeType: "BinaryOperation",
                operator: "!=",
                rightExpression: {
                  argumentTypes: null,
                  "arguments": [{
                    argumentTypes: null,
                    hexValue: "30",
                    id: 139,
                    isConstant: false,
                    isLValue: false,
                    isPure: true,
                    kind: "number",
                    lValueRequested: false,
                    nodeType: "Literal",
                    src: "1623:1:0",
                    subdenomination: null,
                    typeDescriptions: {
                      typeIdentifier: "t_rational_0_by_1",
                      typeString: "int_const 0"
                    },
                    value: "0"
                  }],
                  expression: {
                    argumentTypes: [{
                      typeIdentifier: "t_rational_0_by_1",
                      typeString: "int_const 0"
                    }],
                    id: 138,
                    isConstant: false,
                    isLValue: false,
                    isPure: true,
                    lValueRequested: false,
                    nodeType: "ElementaryTypeNameExpression",
                    src: "1615:7:0",
                    typeDescriptions: {
                      typeIdentifier: "t_type$_t_address_$",
                      typeString: "type(address)"
                    },
                    typeName: "address"
                  },
                  id: 140,
                  isConstant: false,
                  isLValue: false,
                  isPure: true,
                  kind: "typeConversion",
                  lValueRequested: false,
                  names: [],
                  nodeType: "FunctionCall",
                  src: "1615:10:0",
                  typeDescriptions: {
                    typeIdentifier: "t_address_payable",
                    typeString: "address payable"
                  }
                },
                src: "1603:22:0",
                typeDescriptions: {
                  typeIdentifier: "t_bool",
                  typeString: "bool"
                }
              }],
              expression: {
                argumentTypes: [{
                  typeIdentifier: "t_bool",
                  typeString: "bool"
                }],
                id: 136,
                name: "require",
                nodeType: "Identifier",
                overloadedDeclarations: [1548, 1549],
                referencedDeclaration: 1548,
                src: "1595:7:0",
                typeDescriptions: {
                  typeIdentifier: "t_function_require_pure$_t_bool_$returns$__$",
                  typeString: "function (bool) pure"
                }
              },
              id: 142,
              isConstant: false,
              isLValue: false,
              isPure: false,
              kind: "functionCall",
              lValueRequested: false,
              names: [],
              nodeType: "FunctionCall",
              src: "1595:31:0",
              typeDescriptions: {
                typeIdentifier: "t_tuple$__$",
                typeString: "tuple()"
              }
            },
            id: 143,
            nodeType: "ExpressionStatement",
            src: "1595:31:0"
          }, {
            expression: {
              argumentTypes: null,
              id: 148,
              isConstant: false,
              isLValue: false,
              isPure: false,
              lValueRequested: false,
              leftHandSide: {
                argumentTypes: null,
                baseExpression: {
                  argumentTypes: null,
                  id: 144,
                  name: "relayers",
                  nodeType: "Identifier",
                  overloadedDeclarations: [],
                  referencedDeclaration: 20,
                  src: "1636:8:0",
                  typeDescriptions: {
                    typeIdentifier: "t_mapping$_t_address_$_t_bool_$",
                    typeString: "mapping(address => bool)"
                  }
                },
                id: 146,
                indexExpression: {
                  argumentTypes: null,
                  id: 145,
                  name: "_relayer",
                  nodeType: "Identifier",
                  overloadedDeclarations: [],
                  referencedDeclaration: 127,
                  src: "1645:8:0",
                  typeDescriptions: {
                    typeIdentifier: "t_address",
                    typeString: "address"
                  }
                },
                isConstant: false,
                isLValue: true,
                isPure: false,
                lValueRequested: true,
                nodeType: "IndexAccess",
                src: "1636:18:0",
                typeDescriptions: {
                  typeIdentifier: "t_bool",
                  typeString: "bool"
                }
              },
              nodeType: "Assignment",
              operator: "=",
              rightHandSide: {
                argumentTypes: null,
                id: 147,
                name: "isRelayer",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 129,
                src: "1657:9:0",
                typeDescriptions: {
                  typeIdentifier: "t_bool",
                  typeString: "bool"
                }
              },
              src: "1636:30:0",
              typeDescriptions: {
                typeIdentifier: "t_bool",
                typeString: "bool"
              }
            },
            id: 149,
            nodeType: "ExpressionStatement",
            src: "1636:30:0"
          }, {
            expression: {
              argumentTypes: null,
              hexValue: "74727565",
              id: 150,
              isConstant: false,
              isLValue: false,
              isPure: true,
              kind: "bool",
              lValueRequested: false,
              nodeType: "Literal",
              src: "1683:4:0",
              subdenomination: null,
              typeDescriptions: {
                typeIdentifier: "t_bool",
                typeString: "bool"
              },
              value: "true"
            },
            functionReturnParameters: 135,
            id: 151,
            nodeType: "Return",
            src: "1676:11:0"
          }]
        },
        documentation: null,
        id: 153,
        implemented: true,
        kind: "function",
        modifiers: [{
          "arguments": null,
          id: 132,
          modifierName: {
            argumentTypes: null,
            id: 131,
            name: "onlyOwner",
            nodeType: "Identifier",
            overloadedDeclarations: [],
            referencedDeclaration: 59,
            src: "1560:9:0",
            typeDescriptions: {
              typeIdentifier: "t_modifier$__$",
              typeString: "modifier ()"
            }
          },
          nodeType: "ModifierInvocation",
          src: "1560:9:0"
        }],
        name: "updateRelayer",
        nodeType: "FunctionDefinition",
        parameters: {
          id: 130,
          nodeType: "ParameterList",
          parameters: [{
            constant: false,
            id: 127,
            name: "_relayer",
            nodeType: "VariableDeclaration",
            scope: 153,
            src: "1519:16:0",
            stateVariable: false,
            storageLocation: "default",
            typeDescriptions: {
              typeIdentifier: "t_address",
              typeString: "address"
            },
            typeName: {
              id: 126,
              name: "address",
              nodeType: "ElementaryTypeName",
              src: "1519:7:0",
              stateMutability: "nonpayable",
              typeDescriptions: {
                typeIdentifier: "t_address",
                typeString: "address"
              }
            },
            value: null,
            visibility: "internal"
          }, {
            constant: false,
            id: 129,
            name: "isRelayer",
            nodeType: "VariableDeclaration",
            scope: 153,
            src: "1537:14:0",
            stateVariable: false,
            storageLocation: "default",
            typeDescriptions: {
              typeIdentifier: "t_bool",
              typeString: "bool"
            },
            typeName: {
              id: 128,
              name: "bool",
              nodeType: "ElementaryTypeName",
              src: "1537:4:0",
              typeDescriptions: {
                typeIdentifier: "t_bool",
                typeString: "bool"
              }
            },
            value: null,
            visibility: "internal"
          }],
          src: "1518:34:0"
        },
        returnParameters: {
          id: 135,
          nodeType: "ParameterList",
          parameters: [{
            constant: false,
            id: 134,
            name: "",
            nodeType: "VariableDeclaration",
            scope: 153,
            src: "1579:4:0",
            stateVariable: false,
            storageLocation: "default",
            typeDescriptions: {
              typeIdentifier: "t_bool",
              typeString: "bool"
            },
            typeName: {
              id: 133,
              name: "bool",
              nodeType: "ElementaryTypeName",
              src: "1579:4:0",
              typeDescriptions: {
                typeIdentifier: "t_bool",
                typeString: "bool"
              }
            },
            value: null,
            visibility: "internal"
          }],
          src: "1578:6:0"
        },
        scope: 442,
        src: "1496:198:0",
        stateMutability: "nonpayable",
        superFunction: null,
        visibility: "public"
      }, {
        body: {
          id: 168,
          nodeType: "Block",
          src: "1775:107:0",
          statements: [{
            expression: {
              argumentTypes: null,
              id: 164,
              isConstant: false,
              isLValue: false,
              isPure: false,
              lValueRequested: false,
              leftHandSide: {
                argumentTypes: null,
                id: 162,
                name: "issuanceRate",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 10,
                src: "1830:12:0",
                typeDescriptions: {
                  typeIdentifier: "t_uint256",
                  typeString: "uint256"
                }
              },
              nodeType: "Assignment",
              operator: "=",
              rightHandSide: {
                argumentTypes: null,
                id: 163,
                name: "_issuance",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 155,
                src: "1845:9:0",
                typeDescriptions: {
                  typeIdentifier: "t_uint256",
                  typeString: "uint256"
                }
              },
              src: "1830:24:0",
              typeDescriptions: {
                typeIdentifier: "t_uint256",
                typeString: "uint256"
              }
            },
            id: 165,
            nodeType: "ExpressionStatement",
            src: "1830:24:0"
          }, {
            expression: {
              argumentTypes: null,
              hexValue: "74727565",
              id: 166,
              isConstant: false,
              isLValue: false,
              isPure: true,
              kind: "bool",
              lValueRequested: false,
              nodeType: "Literal",
              src: "1871:4:0",
              subdenomination: null,
              typeDescriptions: {
                typeIdentifier: "t_bool",
                typeString: "bool"
              },
              value: "true"
            },
            functionReturnParameters: 161,
            id: 167,
            nodeType: "Return",
            src: "1864:11:0"
          }]
        },
        documentation: null,
        id: 169,
        implemented: true,
        kind: "function",
        modifiers: [{
          "arguments": null,
          id: 158,
          modifierName: {
            argumentTypes: null,
            id: 157,
            name: "onlyOwner",
            nodeType: "Identifier",
            overloadedDeclarations: [],
            referencedDeclaration: 59,
            src: "1750:9:0",
            typeDescriptions: {
              typeIdentifier: "t_modifier$__$",
              typeString: "modifier ()"
            }
          },
          nodeType: "ModifierInvocation",
          src: "1750:9:0"
        }],
        name: "updateIssuance",
        nodeType: "FunctionDefinition",
        parameters: {
          id: 156,
          nodeType: "ParameterList",
          parameters: [{
            constant: false,
            id: 155,
            name: "_issuance",
            nodeType: "VariableDeclaration",
            scope: 169,
            src: "1724:17:0",
            stateVariable: false,
            storageLocation: "default",
            typeDescriptions: {
              typeIdentifier: "t_uint256",
              typeString: "uint256"
            },
            typeName: {
              id: 154,
              name: "uint256",
              nodeType: "ElementaryTypeName",
              src: "1724:7:0",
              typeDescriptions: {
                typeIdentifier: "t_uint256",
                typeString: "uint256"
              }
            },
            value: null,
            visibility: "internal"
          }],
          src: "1723:19:0"
        },
        returnParameters: {
          id: 161,
          nodeType: "ParameterList",
          parameters: [{
            constant: false,
            id: 160,
            name: "",
            nodeType: "VariableDeclaration",
            scope: 169,
            src: "1769:4:0",
            stateVariable: false,
            storageLocation: "default",
            typeDescriptions: {
              typeIdentifier: "t_bool",
              typeString: "bool"
            },
            typeName: {
              id: 159,
              name: "bool",
              nodeType: "ElementaryTypeName",
              src: "1769:4:0",
              typeDescriptions: {
                typeIdentifier: "t_bool",
                typeString: "bool"
              }
            },
            value: null,
            visibility: "internal"
          }],
          src: "1768:6:0"
        },
        scope: 442,
        src: "1700:182:0",
        stateMutability: "nonpayable",
        superFunction: null,
        visibility: "public"
      }, {
        body: {
          id: 184,
          nodeType: "Block",
          src: "1965:110:0",
          statements: [{
            expression: {
              argumentTypes: null,
              id: 180,
              isConstant: false,
              isLValue: false,
              isPure: false,
              lValueRequested: false,
              leftHandSide: {
                argumentTypes: null,
                id: 178,
                name: "demurrageRate",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 12,
                src: "2021:13:0",
                typeDescriptions: {
                  typeIdentifier: "t_uint256",
                  typeString: "uint256"
                }
              },
              nodeType: "Assignment",
              operator: "=",
              rightHandSide: {
                argumentTypes: null,
                id: 179,
                name: "_demurrage",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 171,
                src: "2037:10:0",
                typeDescriptions: {
                  typeIdentifier: "t_uint256",
                  typeString: "uint256"
                }
              },
              src: "2021:26:0",
              typeDescriptions: {
                typeIdentifier: "t_uint256",
                typeString: "uint256"
              }
            },
            id: 181,
            nodeType: "ExpressionStatement",
            src: "2021:26:0"
          }, {
            expression: {
              argumentTypes: null,
              hexValue: "74727565",
              id: 182,
              isConstant: false,
              isLValue: false,
              isPure: true,
              kind: "bool",
              lValueRequested: false,
              nodeType: "Literal",
              src: "2064:4:0",
              subdenomination: null,
              typeDescriptions: {
                typeIdentifier: "t_bool",
                typeString: "bool"
              },
              value: "true"
            },
            functionReturnParameters: 177,
            id: 183,
            nodeType: "Return",
            src: "2057:11:0"
          }]
        },
        documentation: null,
        id: 185,
        implemented: true,
        kind: "function",
        modifiers: [{
          "arguments": null,
          id: 174,
          modifierName: {
            argumentTypes: null,
            id: 173,
            name: "onlyOwner",
            nodeType: "Identifier",
            overloadedDeclarations: [],
            referencedDeclaration: 59,
            src: "1940:9:0",
            typeDescriptions: {
              typeIdentifier: "t_modifier$__$",
              typeString: "modifier ()"
            }
          },
          nodeType: "ModifierInvocation",
          src: "1940:9:0"
        }],
        name: "updateDemurrage",
        nodeType: "FunctionDefinition",
        parameters: {
          id: 172,
          nodeType: "ParameterList",
          parameters: [{
            constant: false,
            id: 171,
            name: "_demurrage",
            nodeType: "VariableDeclaration",
            scope: 185,
            src: "1913:18:0",
            stateVariable: false,
            storageLocation: "default",
            typeDescriptions: {
              typeIdentifier: "t_uint256",
              typeString: "uint256"
            },
            typeName: {
              id: 170,
              name: "uint256",
              nodeType: "ElementaryTypeName",
              src: "1913:7:0",
              typeDescriptions: {
                typeIdentifier: "t_uint256",
                typeString: "uint256"
              }
            },
            value: null,
            visibility: "internal"
          }],
          src: "1912:20:0"
        },
        returnParameters: {
          id: 177,
          nodeType: "ParameterList",
          parameters: [{
            constant: false,
            id: 176,
            name: "",
            nodeType: "VariableDeclaration",
            scope: 185,
            src: "1959:4:0",
            stateVariable: false,
            storageLocation: "default",
            typeDescriptions: {
              typeIdentifier: "t_bool",
              typeString: "bool"
            },
            typeName: {
              id: 175,
              name: "bool",
              nodeType: "ElementaryTypeName",
              src: "1959:4:0",
              typeDescriptions: {
                typeIdentifier: "t_bool",
                typeString: "bool"
              }
            },
            value: null,
            visibility: "internal"
          }],
          src: "1958:6:0"
        },
        scope: 442,
        src: "1888:187:0",
        stateMutability: "nonpayable",
        superFunction: null,
        visibility: "public"
      }, {
        body: {
          id: 200,
          nodeType: "Block",
          src: "2158:106:0",
          statements: [{
            expression: {
              argumentTypes: null,
              id: 196,
              isConstant: false,
              isLValue: false,
              isPure: false,
              lValueRequested: false,
              leftHandSide: {
                argumentTypes: null,
                id: 194,
                name: "symbol",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 14,
                src: "2220:6:0",
                typeDescriptions: {
                  typeIdentifier: "t_string_storage",
                  typeString: "string storage ref"
                }
              },
              nodeType: "Assignment",
              operator: "=",
              rightHandSide: {
                argumentTypes: null,
                id: 195,
                name: "_symbol",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 187,
                src: "2229:7:0",
                typeDescriptions: {
                  typeIdentifier: "t_string_memory_ptr",
                  typeString: "string memory"
                }
              },
              src: "2220:16:0",
              typeDescriptions: {
                typeIdentifier: "t_string_storage",
                typeString: "string storage ref"
              }
            },
            id: 197,
            nodeType: "ExpressionStatement",
            src: "2220:16:0"
          }, {
            expression: {
              argumentTypes: null,
              hexValue: "74727565",
              id: 198,
              isConstant: false,
              isLValue: false,
              isPure: true,
              kind: "bool",
              lValueRequested: false,
              nodeType: "Literal",
              src: "2253:4:0",
              subdenomination: null,
              typeDescriptions: {
                typeIdentifier: "t_bool",
                typeString: "bool"
              },
              value: "true"
            },
            functionReturnParameters: 193,
            id: 199,
            nodeType: "Return",
            src: "2246:11:0"
          }]
        },
        documentation: null,
        id: 201,
        implemented: true,
        kind: "function",
        modifiers: [{
          "arguments": null,
          id: 190,
          modifierName: {
            argumentTypes: null,
            id: 189,
            name: "onlyOwner",
            nodeType: "Identifier",
            overloadedDeclarations: [],
            referencedDeclaration: 59,
            src: "2133:9:0",
            typeDescriptions: {
              typeIdentifier: "t_modifier$__$",
              typeString: "modifier ()"
            }
          },
          nodeType: "ModifierInvocation",
          src: "2133:9:0"
        }],
        name: "updateSymbol",
        nodeType: "FunctionDefinition",
        parameters: {
          id: 188,
          nodeType: "ParameterList",
          parameters: [{
            constant: false,
            id: 187,
            name: "_symbol",
            nodeType: "VariableDeclaration",
            scope: 201,
            src: "2103:21:0",
            stateVariable: false,
            storageLocation: "memory",
            typeDescriptions: {
              typeIdentifier: "t_string_memory_ptr",
              typeString: "string"
            },
            typeName: {
              id: 186,
              name: "string",
              nodeType: "ElementaryTypeName",
              src: "2103:6:0",
              typeDescriptions: {
                typeIdentifier: "t_string_storage_ptr",
                typeString: "string"
              }
            },
            value: null,
            visibility: "internal"
          }],
          src: "2102:23:0"
        },
        returnParameters: {
          id: 193,
          nodeType: "ParameterList",
          parameters: [{
            constant: false,
            id: 192,
            name: "",
            nodeType: "VariableDeclaration",
            scope: 201,
            src: "2152:4:0",
            stateVariable: false,
            storageLocation: "default",
            typeDescriptions: {
              typeIdentifier: "t_bool",
              typeString: "bool"
            },
            typeName: {
              id: 191,
              name: "bool",
              nodeType: "ElementaryTypeName",
              src: "2152:4:0",
              typeDescriptions: {
                typeIdentifier: "t_bool",
                typeString: "bool"
              }
            },
            value: null,
            visibility: "internal"
          }],
          src: "2151:6:0"
        },
        scope: 442,
        src: "2081:183:0",
        stateMutability: "nonpayable",
        superFunction: null,
        visibility: "public"
      }, {
        body: {
          id: 209,
          nodeType: "Block",
          src: "2313:27:0",
          statements: [{
            expression: {
              argumentTypes: null,
              expression: {
                argumentTypes: null,
                id: 206,
                name: "block",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 1535,
                src: "2322:5:0",
                typeDescriptions: {
                  typeIdentifier: "t_magic_block",
                  typeString: "block"
                }
              },
              id: 207,
              isConstant: false,
              isLValue: false,
              isPure: false,
              lValueRequested: false,
              memberName: "timestamp",
              nodeType: "MemberAccess",
              referencedDeclaration: null,
              src: "2322:15:0",
              typeDescriptions: {
                typeIdentifier: "t_uint256",
                typeString: "uint256"
              }
            },
            functionReturnParameters: 205,
            id: 208,
            nodeType: "Return",
            src: "2315:22:0"
          }]
        },
        documentation: null,
        id: 210,
        implemented: true,
        kind: "function",
        modifiers: [],
        name: "time",
        nodeType: "FunctionDefinition",
        parameters: {
          id: 202,
          nodeType: "ParameterList",
          parameters: [],
          src: "2283:2:0"
        },
        returnParameters: {
          id: 205,
          nodeType: "ParameterList",
          parameters: [{
            constant: false,
            id: 204,
            name: "",
            nodeType: "VariableDeclaration",
            scope: 210,
            src: "2307:4:0",
            stateVariable: false,
            storageLocation: "default",
            typeDescriptions: {
              typeIdentifier: "t_uint256",
              typeString: "uint256"
            },
            typeName: {
              id: 203,
              name: "uint",
              nodeType: "ElementaryTypeName",
              src: "2307:4:0",
              typeDescriptions: {
                typeIdentifier: "t_uint256",
                typeString: "uint256"
              }
            },
            value: null,
            visibility: "internal"
          }],
          src: "2306:6:0"
        },
        scope: 442,
        src: "2270:70:0",
        stateMutability: "view",
        superFunction: null,
        visibility: "public"
      }, {
        body: {
          id: 228,
          nodeType: "Block",
          src: "2410:70:0",
          statements: [{
            expression: {
              argumentTypes: null,
              components: [{
                argumentTypes: null,
                commonType: {
                  typeIdentifier: "t_address",
                  typeString: "address"
                },
                id: 225,
                isConstant: false,
                isLValue: false,
                isPure: false,
                lValueRequested: false,
                leftExpression: {
                  argumentTypes: null,
                  "arguments": [{
                    argumentTypes: null,
                    baseExpression: {
                      argumentTypes: null,
                      id: 218,
                      name: "userToToken",
                      nodeType: "Identifier",
                      overloadedDeclarations: [],
                      referencedDeclaration: 24,
                      src: "2436:11:0",
                      typeDescriptions: {
                        typeIdentifier: "t_mapping$_t_address_$_t_contract$_Token_$794_$",
                        typeString: "mapping(address => contract Token)"
                      }
                    },
                    id: 220,
                    indexExpression: {
                      argumentTypes: null,
                      id: 219,
                      name: "_address",
                      nodeType: "Identifier",
                      overloadedDeclarations: [],
                      referencedDeclaration: 212,
                      src: "2448:8:0",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      }
                    },
                    isConstant: false,
                    isLValue: true,
                    isPure: false,
                    lValueRequested: false,
                    nodeType: "IndexAccess",
                    src: "2436:21:0",
                    typeDescriptions: {
                      typeIdentifier: "t_contract$_Token_$794",
                      typeString: "contract Token"
                    }
                  }],
                  expression: {
                    argumentTypes: [{
                      typeIdentifier: "t_contract$_Token_$794",
                      typeString: "contract Token"
                    }],
                    id: 217,
                    isConstant: false,
                    isLValue: false,
                    isPure: true,
                    lValueRequested: false,
                    nodeType: "ElementaryTypeNameExpression",
                    src: "2428:7:0",
                    typeDescriptions: {
                      typeIdentifier: "t_type$_t_address_$",
                      typeString: "type(address)"
                    },
                    typeName: "address"
                  },
                  id: 221,
                  isConstant: false,
                  isLValue: false,
                  isPure: false,
                  kind: "typeConversion",
                  lValueRequested: false,
                  names: [],
                  nodeType: "FunctionCall",
                  src: "2428:30:0",
                  typeDescriptions: {
                    typeIdentifier: "t_address",
                    typeString: "address"
                  }
                },
                nodeType: "BinaryOperation",
                operator: "!=",
                rightExpression: {
                  argumentTypes: null,
                  "arguments": [{
                    argumentTypes: null,
                    hexValue: "30",
                    id: 223,
                    isConstant: false,
                    isLValue: false,
                    isPure: true,
                    kind: "number",
                    lValueRequested: false,
                    nodeType: "Literal",
                    src: "2470:1:0",
                    subdenomination: null,
                    typeDescriptions: {
                      typeIdentifier: "t_rational_0_by_1",
                      typeString: "int_const 0"
                    },
                    value: "0"
                  }],
                  expression: {
                    argumentTypes: [{
                      typeIdentifier: "t_rational_0_by_1",
                      typeString: "int_const 0"
                    }],
                    id: 222,
                    isConstant: false,
                    isLValue: false,
                    isPure: true,
                    lValueRequested: false,
                    nodeType: "ElementaryTypeNameExpression",
                    src: "2462:7:0",
                    typeDescriptions: {
                      typeIdentifier: "t_type$_t_address_$",
                      typeString: "type(address)"
                    },
                    typeName: "address"
                  },
                  id: 224,
                  isConstant: false,
                  isLValue: false,
                  isPure: true,
                  kind: "typeConversion",
                  lValueRequested: false,
                  names: [],
                  nodeType: "FunctionCall",
                  src: "2462:10:0",
                  typeDescriptions: {
                    typeIdentifier: "t_address_payable",
                    typeString: "address payable"
                  }
                },
                src: "2428:44:0",
                typeDescriptions: {
                  typeIdentifier: "t_bool",
                  typeString: "bool"
                }
              }],
              id: 226,
              isConstant: false,
              isInlineArray: false,
              isLValue: false,
              isPure: false,
              lValueRequested: false,
              nodeType: "TupleExpression",
              src: "2427:46:0",
              typeDescriptions: {
                typeIdentifier: "t_bool",
                typeString: "bool"
              }
            },
            functionReturnParameters: 216,
            id: 227,
            nodeType: "Return",
            src: "2420:53:0"
          }]
        },
        documentation: null,
        id: 229,
        implemented: true,
        kind: "function",
        modifiers: [],
        name: "trustable",
        nodeType: "FunctionDefinition",
        parameters: {
          id: 213,
          nodeType: "ParameterList",
          parameters: [{
            constant: false,
            id: 212,
            name: "_address",
            nodeType: "VariableDeclaration",
            scope: 229,
            src: "2365:16:0",
            stateVariable: false,
            storageLocation: "default",
            typeDescriptions: {
              typeIdentifier: "t_address",
              typeString: "address"
            },
            typeName: {
              id: 211,
              name: "address",
              nodeType: "ElementaryTypeName",
              src: "2365:7:0",
              stateMutability: "nonpayable",
              typeDescriptions: {
                typeIdentifier: "t_address",
                typeString: "address"
              }
            },
            value: null,
            visibility: "internal"
          }],
          src: "2364:18:0"
        },
        returnParameters: {
          id: 216,
          nodeType: "ParameterList",
          parameters: [{
            constant: false,
            id: 215,
            name: "",
            nodeType: "VariableDeclaration",
            scope: 229,
            src: "2404:4:0",
            stateVariable: false,
            storageLocation: "default",
            typeDescriptions: {
              typeIdentifier: "t_bool",
              typeString: "bool"
            },
            typeName: {
              id: 214,
              name: "bool",
              nodeType: "ElementaryTypeName",
              src: "2404:4:0",
              typeDescriptions: {
                typeIdentifier: "t_bool",
                typeString: "bool"
              }
            },
            value: null,
            visibility: "internal"
          }],
          src: "2403:6:0"
        },
        scope: 442,
        src: "2346:134:0",
        stateMutability: "view",
        superFunction: null,
        visibility: "public"
      }, {
        body: {
          id: 285,
          nodeType: "Block",
          src: "2623:302:0",
          statements: [{
            expression: {
              argumentTypes: null,
              "arguments": [{
                argumentTypes: null,
                commonType: {
                  typeIdentifier: "t_address",
                  typeString: "address"
                },
                id: 246,
                isConstant: false,
                isLValue: false,
                isPure: false,
                lValueRequested: false,
                leftExpression: {
                  argumentTypes: null,
                  "arguments": [{
                    argumentTypes: null,
                    baseExpression: {
                      argumentTypes: null,
                      id: 238,
                      name: "userToToken",
                      nodeType: "Identifier",
                      overloadedDeclarations: [],
                      referencedDeclaration: 24,
                      src: "2649:11:0",
                      typeDescriptions: {
                        typeIdentifier: "t_mapping$_t_address_$_t_contract$_Token_$794_$",
                        typeString: "mapping(address => contract Token)"
                      }
                    },
                    id: 241,
                    indexExpression: {
                      argumentTypes: null,
                      expression: {
                        argumentTypes: null,
                        id: 239,
                        name: "msg",
                        nodeType: "Identifier",
                        overloadedDeclarations: [],
                        referencedDeclaration: 1545,
                        src: "2661:3:0",
                        typeDescriptions: {
                          typeIdentifier: "t_magic_message",
                          typeString: "msg"
                        }
                      },
                      id: 240,
                      isConstant: false,
                      isLValue: false,
                      isPure: false,
                      lValueRequested: false,
                      memberName: "sender",
                      nodeType: "MemberAccess",
                      referencedDeclaration: null,
                      src: "2661:10:0",
                      typeDescriptions: {
                        typeIdentifier: "t_address_payable",
                        typeString: "address payable"
                      }
                    },
                    isConstant: false,
                    isLValue: true,
                    isPure: false,
                    lValueRequested: false,
                    nodeType: "IndexAccess",
                    src: "2649:23:0",
                    typeDescriptions: {
                      typeIdentifier: "t_contract$_Token_$794",
                      typeString: "contract Token"
                    }
                  }],
                  expression: {
                    argumentTypes: [{
                      typeIdentifier: "t_contract$_Token_$794",
                      typeString: "contract Token"
                    }],
                    id: 237,
                    isConstant: false,
                    isLValue: false,
                    isPure: true,
                    lValueRequested: false,
                    nodeType: "ElementaryTypeNameExpression",
                    src: "2641:7:0",
                    typeDescriptions: {
                      typeIdentifier: "t_type$_t_address_$",
                      typeString: "type(address)"
                    },
                    typeName: "address"
                  },
                  id: 242,
                  isConstant: false,
                  isLValue: false,
                  isPure: false,
                  kind: "typeConversion",
                  lValueRequested: false,
                  names: [],
                  nodeType: "FunctionCall",
                  src: "2641:32:0",
                  typeDescriptions: {
                    typeIdentifier: "t_address",
                    typeString: "address"
                  }
                },
                nodeType: "BinaryOperation",
                operator: "==",
                rightExpression: {
                  argumentTypes: null,
                  "arguments": [{
                    argumentTypes: null,
                    hexValue: "30",
                    id: 244,
                    isConstant: false,
                    isLValue: false,
                    isPure: true,
                    kind: "number",
                    lValueRequested: false,
                    nodeType: "Literal",
                    src: "2685:1:0",
                    subdenomination: null,
                    typeDescriptions: {
                      typeIdentifier: "t_rational_0_by_1",
                      typeString: "int_const 0"
                    },
                    value: "0"
                  }],
                  expression: {
                    argumentTypes: [{
                      typeIdentifier: "t_rational_0_by_1",
                      typeString: "int_const 0"
                    }],
                    id: 243,
                    isConstant: false,
                    isLValue: false,
                    isPure: true,
                    lValueRequested: false,
                    nodeType: "ElementaryTypeNameExpression",
                    src: "2677:7:0",
                    typeDescriptions: {
                      typeIdentifier: "t_type$_t_address_$",
                      typeString: "type(address)"
                    },
                    typeName: "address"
                  },
                  id: 245,
                  isConstant: false,
                  isLValue: false,
                  isPure: true,
                  kind: "typeConversion",
                  lValueRequested: false,
                  names: [],
                  nodeType: "FunctionCall",
                  src: "2677:10:0",
                  typeDescriptions: {
                    typeIdentifier: "t_address_payable",
                    typeString: "address payable"
                  }
                },
                src: "2641:46:0",
                typeDescriptions: {
                  typeIdentifier: "t_bool",
                  typeString: "bool"
                }
              }],
              expression: {
                argumentTypes: [{
                  typeIdentifier: "t_bool",
                  typeString: "bool"
                }],
                id: 236,
                name: "require",
                nodeType: "Identifier",
                overloadedDeclarations: [1548, 1549],
                referencedDeclaration: 1548,
                src: "2633:7:0",
                typeDescriptions: {
                  typeIdentifier: "t_function_require_pure$_t_bool_$returns$__$",
                  typeString: "function (bool) pure"
                }
              },
              id: 247,
              isConstant: false,
              isLValue: false,
              isPure: false,
              kind: "functionCall",
              lValueRequested: false,
              names: [],
              nodeType: "FunctionCall",
              src: "2633:55:0",
              typeDescriptions: {
                typeIdentifier: "t_tuple$__$",
                typeString: "tuple()"
              }
            },
            id: 248,
            nodeType: "ExpressionStatement",
            src: "2633:55:0"
          }, {
            assignments: [250],
            declarations: [{
              constant: false,
              id: 250,
              name: "token",
              nodeType: "VariableDeclaration",
              scope: 285,
              src: "2699:11:0",
              stateVariable: false,
              storageLocation: "default",
              typeDescriptions: {
                typeIdentifier: "t_contract$_Token_$794",
                typeString: "contract Token"
              },
              typeName: {
                contractScope: null,
                id: 249,
                name: "Token",
                nodeType: "UserDefinedTypeName",
                referencedDeclaration: 794,
                src: "2699:5:0",
                typeDescriptions: {
                  typeIdentifier: "t_contract$_Token_$794",
                  typeString: "contract Token"
                }
              },
              value: null,
              visibility: "internal"
            }],
            id: 258,
            initialValue: {
              argumentTypes: null,
              "arguments": [{
                argumentTypes: null,
                expression: {
                  argumentTypes: null,
                  id: 253,
                  name: "msg",
                  nodeType: "Identifier",
                  overloadedDeclarations: [],
                  referencedDeclaration: 1545,
                  src: "2723:3:0",
                  typeDescriptions: {
                    typeIdentifier: "t_magic_message",
                    typeString: "msg"
                  }
                },
                id: 254,
                isConstant: false,
                isLValue: false,
                isPure: false,
                lValueRequested: false,
                memberName: "sender",
                nodeType: "MemberAccess",
                referencedDeclaration: null,
                src: "2723:10:0",
                typeDescriptions: {
                  typeIdentifier: "t_address_payable",
                  typeString: "address payable"
                }
              }, {
                argumentTypes: null,
                id: 255,
                name: "_name",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 231,
                src: "2735:5:0",
                typeDescriptions: {
                  typeIdentifier: "t_string_memory_ptr",
                  typeString: "string memory"
                }
              }, {
                argumentTypes: null,
                id: 256,
                name: "initialPayout",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 16,
                src: "2742:13:0",
                typeDescriptions: {
                  typeIdentifier: "t_uint256",
                  typeString: "uint256"
                }
              }],
              expression: {
                argumentTypes: [{
                  typeIdentifier: "t_address_payable",
                  typeString: "address payable"
                }, {
                  typeIdentifier: "t_string_memory_ptr",
                  typeString: "string memory"
                }, {
                  typeIdentifier: "t_uint256",
                  typeString: "uint256"
                }],
                id: 252,
                isConstant: false,
                isLValue: false,
                isPure: false,
                lValueRequested: false,
                nodeType: "NewExpression",
                src: "2713:9:0",
                typeDescriptions: {
                  typeIdentifier: "t_function_creation_nonpayable$_t_address_$_t_string_memory_ptr_$_t_uint256_$returns$_t_contract$_Token_$794_$",
                  typeString: "function (address,string memory,uint256) returns (contract Token)"
                },
                typeName: {
                  contractScope: null,
                  id: 251,
                  name: "Token",
                  nodeType: "UserDefinedTypeName",
                  referencedDeclaration: 794,
                  src: "2717:5:0",
                  typeDescriptions: {
                    typeIdentifier: "t_contract$_Token_$794",
                    typeString: "contract Token"
                  }
                }
              },
              id: 257,
              isConstant: false,
              isLValue: false,
              isPure: false,
              kind: "functionCall",
              lValueRequested: false,
              names: [],
              nodeType: "FunctionCall",
              src: "2713:43:0",
              typeDescriptions: {
                typeIdentifier: "t_contract$_Token_$794",
                typeString: "contract Token"
              }
            },
            nodeType: "VariableDeclarationStatement",
            src: "2699:57:0"
          }, {
            expression: {
              argumentTypes: null,
              id: 264,
              isConstant: false,
              isLValue: false,
              isPure: false,
              lValueRequested: false,
              leftHandSide: {
                argumentTypes: null,
                baseExpression: {
                  argumentTypes: null,
                  id: 259,
                  name: "userToToken",
                  nodeType: "Identifier",
                  overloadedDeclarations: [],
                  referencedDeclaration: 24,
                  src: "2766:11:0",
                  typeDescriptions: {
                    typeIdentifier: "t_mapping$_t_address_$_t_contract$_Token_$794_$",
                    typeString: "mapping(address => contract Token)"
                  }
                },
                id: 262,
                indexExpression: {
                  argumentTypes: null,
                  expression: {
                    argumentTypes: null,
                    id: 260,
                    name: "msg",
                    nodeType: "Identifier",
                    overloadedDeclarations: [],
                    referencedDeclaration: 1545,
                    src: "2778:3:0",
                    typeDescriptions: {
                      typeIdentifier: "t_magic_message",
                      typeString: "msg"
                    }
                  },
                  id: 261,
                  isConstant: false,
                  isLValue: false,
                  isPure: false,
                  lValueRequested: false,
                  memberName: "sender",
                  nodeType: "MemberAccess",
                  referencedDeclaration: null,
                  src: "2778:10:0",
                  typeDescriptions: {
                    typeIdentifier: "t_address_payable",
                    typeString: "address payable"
                  }
                },
                isConstant: false,
                isLValue: true,
                isPure: false,
                lValueRequested: true,
                nodeType: "IndexAccess",
                src: "2766:23:0",
                typeDescriptions: {
                  typeIdentifier: "t_contract$_Token_$794",
                  typeString: "contract Token"
                }
              },
              nodeType: "Assignment",
              operator: "=",
              rightHandSide: {
                argumentTypes: null,
                id: 263,
                name: "token",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 250,
                src: "2792:5:0",
                typeDescriptions: {
                  typeIdentifier: "t_contract$_Token_$794",
                  typeString: "contract Token"
                }
              },
              src: "2766:31:0",
              typeDescriptions: {
                typeIdentifier: "t_contract$_Token_$794",
                typeString: "contract Token"
              }
            },
            id: 265,
            nodeType: "ExpressionStatement",
            src: "2766:31:0"
          }, {
            expression: {
              argumentTypes: null,
              id: 273,
              isConstant: false,
              isLValue: false,
              isPure: false,
              lValueRequested: false,
              leftHandSide: {
                argumentTypes: null,
                baseExpression: {
                  argumentTypes: null,
                  id: 266,
                  name: "tokenToUser",
                  nodeType: "Identifier",
                  overloadedDeclarations: [],
                  referencedDeclaration: 28,
                  src: "2807:11:0",
                  typeDescriptions: {
                    typeIdentifier: "t_mapping$_t_address_$_t_address_$",
                    typeString: "mapping(address => address)"
                  }
                },
                id: 270,
                indexExpression: {
                  argumentTypes: null,
                  "arguments": [{
                    argumentTypes: null,
                    id: 268,
                    name: "token",
                    nodeType: "Identifier",
                    overloadedDeclarations: [],
                    referencedDeclaration: 250,
                    src: "2827:5:0",
                    typeDescriptions: {
                      typeIdentifier: "t_contract$_Token_$794",
                      typeString: "contract Token"
                    }
                  }],
                  expression: {
                    argumentTypes: [{
                      typeIdentifier: "t_contract$_Token_$794",
                      typeString: "contract Token"
                    }],
                    id: 267,
                    isConstant: false,
                    isLValue: false,
                    isPure: true,
                    lValueRequested: false,
                    nodeType: "ElementaryTypeNameExpression",
                    src: "2819:7:0",
                    typeDescriptions: {
                      typeIdentifier: "t_type$_t_address_$",
                      typeString: "type(address)"
                    },
                    typeName: "address"
                  },
                  id: 269,
                  isConstant: false,
                  isLValue: false,
                  isPure: false,
                  kind: "typeConversion",
                  lValueRequested: false,
                  names: [],
                  nodeType: "FunctionCall",
                  src: "2819:14:0",
                  typeDescriptions: {
                    typeIdentifier: "t_address",
                    typeString: "address"
                  }
                },
                isConstant: false,
                isLValue: true,
                isPure: false,
                lValueRequested: true,
                nodeType: "IndexAccess",
                src: "2807:27:0",
                typeDescriptions: {
                  typeIdentifier: "t_address",
                  typeString: "address"
                }
              },
              nodeType: "Assignment",
              operator: "=",
              rightHandSide: {
                argumentTypes: null,
                expression: {
                  argumentTypes: null,
                  id: 271,
                  name: "msg",
                  nodeType: "Identifier",
                  overloadedDeclarations: [],
                  referencedDeclaration: 1545,
                  src: "2837:3:0",
                  typeDescriptions: {
                    typeIdentifier: "t_magic_message",
                    typeString: "msg"
                  }
                },
                id: 272,
                isConstant: false,
                isLValue: false,
                isPure: false,
                lValueRequested: false,
                memberName: "sender",
                nodeType: "MemberAccess",
                referencedDeclaration: null,
                src: "2837:10:0",
                typeDescriptions: {
                  typeIdentifier: "t_address_payable",
                  typeString: "address payable"
                }
              },
              src: "2807:40:0",
              typeDescriptions: {
                typeIdentifier: "t_address",
                typeString: "address"
              }
            },
            id: 274,
            nodeType: "ExpressionStatement",
            src: "2807:40:0"
          }, {
            eventCall: {
              argumentTypes: null,
              "arguments": [{
                argumentTypes: null,
                expression: {
                  argumentTypes: null,
                  id: 276,
                  name: "msg",
                  nodeType: "Identifier",
                  overloadedDeclarations: [],
                  referencedDeclaration: 1545,
                  src: "2870:3:0",
                  typeDescriptions: {
                    typeIdentifier: "t_magic_message",
                    typeString: "msg"
                  }
                },
                id: 277,
                isConstant: false,
                isLValue: false,
                isPure: false,
                lValueRequested: false,
                memberName: "sender",
                nodeType: "MemberAccess",
                referencedDeclaration: null,
                src: "2870:10:0",
                typeDescriptions: {
                  typeIdentifier: "t_address_payable",
                  typeString: "address payable"
                }
              }, {
                argumentTypes: null,
                "arguments": [{
                  argumentTypes: null,
                  id: 279,
                  name: "token",
                  nodeType: "Identifier",
                  overloadedDeclarations: [],
                  referencedDeclaration: 250,
                  src: "2890:5:0",
                  typeDescriptions: {
                    typeIdentifier: "t_contract$_Token_$794",
                    typeString: "contract Token"
                  }
                }],
                expression: {
                  argumentTypes: [{
                    typeIdentifier: "t_contract$_Token_$794",
                    typeString: "contract Token"
                  }],
                  id: 278,
                  isConstant: false,
                  isLValue: false,
                  isPure: true,
                  lValueRequested: false,
                  nodeType: "ElementaryTypeNameExpression",
                  src: "2882:7:0",
                  typeDescriptions: {
                    typeIdentifier: "t_type$_t_address_$",
                    typeString: "type(address)"
                  },
                  typeName: "address"
                },
                id: 280,
                isConstant: false,
                isLValue: false,
                isPure: false,
                kind: "typeConversion",
                lValueRequested: false,
                names: [],
                nodeType: "FunctionCall",
                src: "2882:14:0",
                typeDescriptions: {
                  typeIdentifier: "t_address",
                  typeString: "address"
                }
              }],
              expression: {
                argumentTypes: [{
                  typeIdentifier: "t_address_payable",
                  typeString: "address payable"
                }, {
                  typeIdentifier: "t_address",
                  typeString: "address"
                }],
                id: 275,
                name: "Signup",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 40,
                src: "2863:6:0",
                typeDescriptions: {
                  typeIdentifier: "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
                  typeString: "function (address,address)"
                }
              },
              id: 281,
              isConstant: false,
              isLValue: false,
              isPure: false,
              kind: "functionCall",
              lValueRequested: false,
              names: [],
              nodeType: "FunctionCall",
              src: "2863:34:0",
              typeDescriptions: {
                typeIdentifier: "t_tuple$__$",
                typeString: "tuple()"
              }
            },
            id: 282,
            nodeType: "EmitStatement",
            src: "2858:39:0"
          }, {
            expression: {
              argumentTypes: null,
              hexValue: "74727565",
              id: 283,
              isConstant: false,
              isLValue: false,
              isPure: true,
              kind: "bool",
              lValueRequested: false,
              nodeType: "Literal",
              src: "2914:4:0",
              subdenomination: null,
              typeDescriptions: {
                typeIdentifier: "t_bool",
                typeString: "bool"
              },
              value: "true"
            },
            functionReturnParameters: 235,
            id: 284,
            nodeType: "Return",
            src: "2907:11:0"
          }]
        },
        documentation: null,
        id: 286,
        implemented: true,
        kind: "function",
        modifiers: [],
        name: "signup",
        nodeType: "FunctionDefinition",
        parameters: {
          id: 232,
          nodeType: "ParameterList",
          parameters: [{
            constant: false,
            id: 231,
            name: "_name",
            nodeType: "VariableDeclaration",
            scope: 286,
            src: "2580:19:0",
            stateVariable: false,
            storageLocation: "memory",
            typeDescriptions: {
              typeIdentifier: "t_string_memory_ptr",
              typeString: "string"
            },
            typeName: {
              id: 230,
              name: "string",
              nodeType: "ElementaryTypeName",
              src: "2580:6:0",
              typeDescriptions: {
                typeIdentifier: "t_string_storage_ptr",
                typeString: "string"
              }
            },
            value: null,
            visibility: "internal"
          }],
          src: "2579:21:0"
        },
        returnParameters: {
          id: 235,
          nodeType: "ParameterList",
          parameters: [{
            constant: false,
            id: 234,
            name: "",
            nodeType: "VariableDeclaration",
            scope: 286,
            src: "2617:4:0",
            stateVariable: false,
            storageLocation: "default",
            typeDescriptions: {
              typeIdentifier: "t_bool",
              typeString: "bool"
            },
            typeName: {
              id: 233,
              name: "bool",
              nodeType: "ElementaryTypeName",
              src: "2617:4:0",
              typeDescriptions: {
                typeIdentifier: "t_bool",
                typeString: "bool"
              }
            },
            value: null,
            visibility: "internal"
          }],
          src: "2616:6:0"
        },
        scope: 442,
        src: "2564:361:0",
        stateMutability: "nonpayable",
        superFunction: null,
        visibility: "public"
      }, {
        body: {
          id: 315,
          nodeType: "Block",
          src: "3090:137:0",
          statements: [{
            expression: {
              argumentTypes: null,
              "arguments": [{
                argumentTypes: null,
                "arguments": [{
                  argumentTypes: null,
                  id: 295,
                  name: "toTrust",
                  nodeType: "Identifier",
                  overloadedDeclarations: [],
                  referencedDeclaration: 288,
                  src: "3118:7:0",
                  typeDescriptions: {
                    typeIdentifier: "t_address",
                    typeString: "address"
                  }
                }],
                expression: {
                  argumentTypes: [{
                    typeIdentifier: "t_address",
                    typeString: "address"
                  }],
                  id: 294,
                  name: "trustable",
                  nodeType: "Identifier",
                  overloadedDeclarations: [],
                  referencedDeclaration: 229,
                  src: "3108:9:0",
                  typeDescriptions: {
                    typeIdentifier: "t_function_internal_view$_t_address_$returns$_t_bool_$",
                    typeString: "function (address) view returns (bool)"
                  }
                },
                id: 296,
                isConstant: false,
                isLValue: false,
                isPure: false,
                kind: "functionCall",
                lValueRequested: false,
                names: [],
                nodeType: "FunctionCall",
                src: "3108:18:0",
                typeDescriptions: {
                  typeIdentifier: "t_bool",
                  typeString: "bool"
                }
              }],
              expression: {
                argumentTypes: [{
                  typeIdentifier: "t_bool",
                  typeString: "bool"
                }],
                id: 293,
                name: "require",
                nodeType: "Identifier",
                overloadedDeclarations: [1548, 1549],
                referencedDeclaration: 1548,
                src: "3100:7:0",
                typeDescriptions: {
                  typeIdentifier: "t_function_require_pure$_t_bool_$returns$__$",
                  typeString: "function (bool) pure"
                }
              },
              id: 297,
              isConstant: false,
              isLValue: false,
              isPure: false,
              kind: "functionCall",
              lValueRequested: false,
              names: [],
              nodeType: "FunctionCall",
              src: "3100:27:0",
              typeDescriptions: {
                typeIdentifier: "t_tuple$__$",
                typeString: "tuple()"
              }
            },
            id: 298,
            nodeType: "ExpressionStatement",
            src: "3100:27:0"
          }, {
            expression: {
              argumentTypes: null,
              id: 306,
              isConstant: false,
              isLValue: false,
              isPure: false,
              lValueRequested: false,
              leftHandSide: {
                argumentTypes: null,
                baseExpression: {
                  argumentTypes: null,
                  baseExpression: {
                    argumentTypes: null,
                    id: 299,
                    name: "limits",
                    nodeType: "Identifier",
                    overloadedDeclarations: [],
                    referencedDeclaration: 34,
                    src: "3137:6:0",
                    typeDescriptions: {
                      typeIdentifier: "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                      typeString: "mapping(address => mapping(address => uint256))"
                    }
                  },
                  id: 303,
                  indexExpression: {
                    argumentTypes: null,
                    expression: {
                      argumentTypes: null,
                      id: 300,
                      name: "msg",
                      nodeType: "Identifier",
                      overloadedDeclarations: [],
                      referencedDeclaration: 1545,
                      src: "3144:3:0",
                      typeDescriptions: {
                        typeIdentifier: "t_magic_message",
                        typeString: "msg"
                      }
                    },
                    id: 301,
                    isConstant: false,
                    isLValue: false,
                    isPure: false,
                    lValueRequested: false,
                    memberName: "sender",
                    nodeType: "MemberAccess",
                    referencedDeclaration: null,
                    src: "3144:10:0",
                    typeDescriptions: {
                      typeIdentifier: "t_address_payable",
                      typeString: "address payable"
                    }
                  },
                  isConstant: false,
                  isLValue: true,
                  isPure: false,
                  lValueRequested: false,
                  nodeType: "IndexAccess",
                  src: "3137:18:0",
                  typeDescriptions: {
                    typeIdentifier: "t_mapping$_t_address_$_t_uint256_$",
                    typeString: "mapping(address => uint256)"
                  }
                },
                id: 304,
                indexExpression: {
                  argumentTypes: null,
                  id: 302,
                  name: "toTrust",
                  nodeType: "Identifier",
                  overloadedDeclarations: [],
                  referencedDeclaration: 288,
                  src: "3156:7:0",
                  typeDescriptions: {
                    typeIdentifier: "t_address",
                    typeString: "address"
                  }
                },
                isConstant: false,
                isLValue: true,
                isPure: false,
                lValueRequested: true,
                nodeType: "IndexAccess",
                src: "3137:27:0",
                typeDescriptions: {
                  typeIdentifier: "t_uint256",
                  typeString: "uint256"
                }
              },
              nodeType: "Assignment",
              operator: "=",
              rightHandSide: {
                argumentTypes: null,
                id: 305,
                name: "limit",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 290,
                src: "3167:5:0",
                typeDescriptions: {
                  typeIdentifier: "t_uint256",
                  typeString: "uint256"
                }
              },
              src: "3137:35:0",
              typeDescriptions: {
                typeIdentifier: "t_uint256",
                typeString: "uint256"
              }
            },
            id: 307,
            nodeType: "ExpressionStatement",
            src: "3137:35:0"
          }, {
            eventCall: {
              argumentTypes: null,
              "arguments": [{
                argumentTypes: null,
                expression: {
                  argumentTypes: null,
                  id: 309,
                  name: "msg",
                  nodeType: "Identifier",
                  overloadedDeclarations: [],
                  referencedDeclaration: 1545,
                  src: "3193:3:0",
                  typeDescriptions: {
                    typeIdentifier: "t_magic_message",
                    typeString: "msg"
                  }
                },
                id: 310,
                isConstant: false,
                isLValue: false,
                isPure: false,
                lValueRequested: false,
                memberName: "sender",
                nodeType: "MemberAccess",
                referencedDeclaration: null,
                src: "3193:10:0",
                typeDescriptions: {
                  typeIdentifier: "t_address_payable",
                  typeString: "address payable"
                }
              }, {
                argumentTypes: null,
                id: 311,
                name: "toTrust",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 288,
                src: "3205:7:0",
                typeDescriptions: {
                  typeIdentifier: "t_address",
                  typeString: "address"
                }
              }, {
                argumentTypes: null,
                id: 312,
                name: "limit",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 290,
                src: "3214:5:0",
                typeDescriptions: {
                  typeIdentifier: "t_uint256",
                  typeString: "uint256"
                }
              }],
              expression: {
                argumentTypes: [{
                  typeIdentifier: "t_address_payable",
                  typeString: "address payable"
                }, {
                  typeIdentifier: "t_address",
                  typeString: "address"
                }, {
                  typeIdentifier: "t_uint256",
                  typeString: "uint256"
                }],
                id: 308,
                name: "Trust",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 48,
                src: "3187:5:0",
                typeDescriptions: {
                  typeIdentifier: "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                  typeString: "function (address,address,uint256)"
                }
              },
              id: 313,
              isConstant: false,
              isLValue: false,
              isPure: false,
              kind: "functionCall",
              lValueRequested: false,
              names: [],
              nodeType: "FunctionCall",
              src: "3187:33:0",
              typeDescriptions: {
                typeIdentifier: "t_tuple$__$",
                typeString: "tuple()"
              }
            },
            id: 314,
            nodeType: "EmitStatement",
            src: "3182:38:0"
          }]
        },
        documentation: null,
        id: 316,
        implemented: true,
        kind: "function",
        modifiers: [],
        name: "trust",
        nodeType: "FunctionDefinition",
        parameters: {
          id: 291,
          nodeType: "ParameterList",
          parameters: [{
            constant: false,
            id: 288,
            name: "toTrust",
            nodeType: "VariableDeclaration",
            scope: 316,
            src: "3054:15:0",
            stateVariable: false,
            storageLocation: "default",
            typeDescriptions: {
              typeIdentifier: "t_address",
              typeString: "address"
            },
            typeName: {
              id: 287,
              name: "address",
              nodeType: "ElementaryTypeName",
              src: "3054:7:0",
              stateMutability: "nonpayable",
              typeDescriptions: {
                typeIdentifier: "t_address",
                typeString: "address"
              }
            },
            value: null,
            visibility: "internal"
          }, {
            constant: false,
            id: 290,
            name: "limit",
            nodeType: "VariableDeclaration",
            scope: 316,
            src: "3071:10:0",
            stateVariable: false,
            storageLocation: "default",
            typeDescriptions: {
              typeIdentifier: "t_uint256",
              typeString: "uint256"
            },
            typeName: {
              id: 289,
              name: "uint",
              nodeType: "ElementaryTypeName",
              src: "3071:4:0",
              typeDescriptions: {
                typeIdentifier: "t_uint256",
                typeString: "uint256"
              }
            },
            value: null,
            visibility: "internal"
          }],
          src: "3053:29:0"
        },
        returnParameters: {
          id: 292,
          nodeType: "ParameterList",
          parameters: [],
          src: "3090:0:0"
        },
        scope: 442,
        src: "3039:188:0",
        stateMutability: "nonpayable",
        superFunction: null,
        visibility: "public"
      }, {
        body: {
          id: 354,
          nodeType: "Block",
          src: "3313:150:0",
          statements: [{
            assignments: [326],
            declarations: [{
              constant: false,
              id: 326,
              name: "max",
              nodeType: "VariableDeclaration",
              scope: 354,
              src: "3323:11:0",
              stateVariable: false,
              storageLocation: "default",
              typeDescriptions: {
                typeIdentifier: "t_uint256",
                typeString: "uint256"
              },
              typeName: {
                id: 325,
                name: "uint256",
                nodeType: "ElementaryTypeName",
                src: "3323:7:0",
                typeDescriptions: {
                  typeIdentifier: "t_uint256",
                  typeString: "uint256"
                }
              },
              value: null,
              visibility: "internal"
            }],
            id: 343,
            initialValue: {
              argumentTypes: null,
              "arguments": [{
                argumentTypes: null,
                hexValue: "313030",
                id: 341,
                isConstant: false,
                isLValue: false,
                isPure: true,
                kind: "number",
                lValueRequested: false,
                nodeType: "Literal",
                src: "3395:3:0",
                subdenomination: null,
                typeDescriptions: {
                  typeIdentifier: "t_rational_100_by_1",
                  typeString: "int_const 100"
                },
                value: "100"
              }],
              expression: {
                argumentTypes: [{
                  typeIdentifier: "t_rational_100_by_1",
                  typeString: "int_const 100"
                }],
                expression: {
                  argumentTypes: null,
                  components: [{
                    argumentTypes: null,
                    "arguments": [{
                      argumentTypes: null,
                      baseExpression: {
                        argumentTypes: null,
                        baseExpression: {
                          argumentTypes: null,
                          id: 333,
                          name: "limits",
                          nodeType: "Identifier",
                          overloadedDeclarations: [],
                          referencedDeclaration: 34,
                          src: "3372:6:0",
                          typeDescriptions: {
                            typeIdentifier: "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                            typeString: "mapping(address => mapping(address => uint256))"
                          }
                        },
                        id: 335,
                        indexExpression: {
                          argumentTypes: null,
                          id: 334,
                          name: "to",
                          nodeType: "Identifier",
                          overloadedDeclarations: [],
                          referencedDeclaration: 320,
                          src: "3379:2:0",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address"
                          }
                        },
                        isConstant: false,
                        isLValue: true,
                        isPure: false,
                        lValueRequested: false,
                        nodeType: "IndexAccess",
                        src: "3372:10:0",
                        typeDescriptions: {
                          typeIdentifier: "t_mapping$_t_address_$_t_uint256_$",
                          typeString: "mapping(address => uint256)"
                        }
                      },
                      id: 337,
                      indexExpression: {
                        argumentTypes: null,
                        id: 336,
                        name: "from",
                        nodeType: "Identifier",
                        overloadedDeclarations: [],
                        referencedDeclaration: 318,
                        src: "3383:4:0",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      isConstant: false,
                      isLValue: true,
                      isPure: false,
                      lValueRequested: false,
                      nodeType: "IndexAccess",
                      src: "3372:16:0",
                      typeDescriptions: {
                        typeIdentifier: "t_uint256",
                        typeString: "uint256"
                      }
                    }],
                    expression: {
                      argumentTypes: [{
                        typeIdentifier: "t_uint256",
                        typeString: "uint256"
                      }],
                      expression: {
                        argumentTypes: null,
                        "arguments": [],
                        expression: {
                          argumentTypes: [],
                          expression: {
                            argumentTypes: null,
                            baseExpression: {
                              argumentTypes: null,
                              id: 327,
                              name: "userToToken",
                              nodeType: "Identifier",
                              overloadedDeclarations: [],
                              referencedDeclaration: 24,
                              src: "3338:11:0",
                              typeDescriptions: {
                                typeIdentifier: "t_mapping$_t_address_$_t_contract$_Token_$794_$",
                                typeString: "mapping(address => contract Token)"
                              }
                            },
                            id: 329,
                            indexExpression: {
                              argumentTypes: null,
                              id: 328,
                              name: "to",
                              nodeType: "Identifier",
                              overloadedDeclarations: [],
                              referencedDeclaration: 320,
                              src: "3350:2:0",
                              typeDescriptions: {
                                typeIdentifier: "t_address",
                                typeString: "address"
                              }
                            },
                            isConstant: false,
                            isLValue: true,
                            isPure: false,
                            lValueRequested: false,
                            nodeType: "IndexAccess",
                            src: "3338:15:0",
                            typeDescriptions: {
                              typeIdentifier: "t_contract$_Token_$794",
                              typeString: "contract Token"
                            }
                          },
                          id: 330,
                          isConstant: false,
                          isLValue: false,
                          isPure: false,
                          lValueRequested: false,
                          memberName: "totalSupply",
                          nodeType: "MemberAccess",
                          referencedDeclaration: 776,
                          src: "3338:27:0",
                          typeDescriptions: {
                            typeIdentifier: "t_function_external_view$__$returns$_t_uint256_$",
                            typeString: "function () view external returns (uint256)"
                          }
                        },
                        id: 331,
                        isConstant: false,
                        isLValue: false,
                        isPure: false,
                        kind: "functionCall",
                        lValueRequested: false,
                        names: [],
                        nodeType: "FunctionCall",
                        src: "3338:29:0",
                        typeDescriptions: {
                          typeIdentifier: "t_uint256",
                          typeString: "uint256"
                        }
                      },
                      id: 332,
                      isConstant: false,
                      isLValue: false,
                      isPure: false,
                      lValueRequested: false,
                      memberName: "mul",
                      nodeType: "MemberAccess",
                      referencedDeclaration: 936,
                      src: "3338:33:0",
                      typeDescriptions: {
                        typeIdentifier: "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                        typeString: "function (uint256,uint256) pure returns (uint256)"
                      }
                    },
                    id: 338,
                    isConstant: false,
                    isLValue: false,
                    isPure: false,
                    kind: "functionCall",
                    lValueRequested: false,
                    names: [],
                    nodeType: "FunctionCall",
                    src: "3338:51:0",
                    typeDescriptions: {
                      typeIdentifier: "t_uint256",
                      typeString: "uint256"
                    }
                  }],
                  id: 339,
                  isConstant: false,
                  isInlineArray: false,
                  isLValue: false,
                  isPure: false,
                  lValueRequested: false,
                  nodeType: "TupleExpression",
                  src: "3337:53:0",
                  typeDescriptions: {
                    typeIdentifier: "t_uint256",
                    typeString: "uint256"
                  }
                },
                id: 340,
                isConstant: false,
                isLValue: false,
                isPure: false,
                lValueRequested: false,
                memberName: "div",
                nodeType: "MemberAccess",
                referencedDeclaration: 960,
                src: "3337:57:0",
                typeDescriptions: {
                  typeIdentifier: "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                  typeString: "function (uint256,uint256) pure returns (uint256)"
                }
              },
              id: 342,
              isConstant: false,
              isLValue: false,
              isPure: false,
              kind: "functionCall",
              lValueRequested: false,
              names: [],
              nodeType: "FunctionCall",
              src: "3337:62:0",
              typeDescriptions: {
                typeIdentifier: "t_uint256",
                typeString: "uint256"
              }
            },
            nodeType: "VariableDeclarationStatement",
            src: "3323:76:0"
          }, {
            expression: {
              argumentTypes: null,
              "arguments": [{
                argumentTypes: null,
                "arguments": [{
                  argumentTypes: null,
                  id: 350,
                  name: "from",
                  nodeType: "Identifier",
                  overloadedDeclarations: [],
                  referencedDeclaration: 318,
                  src: "3450:4:0",
                  typeDescriptions: {
                    typeIdentifier: "t_address",
                    typeString: "address"
                  }
                }],
                expression: {
                  argumentTypes: [{
                    typeIdentifier: "t_address",
                    typeString: "address"
                  }],
                  expression: {
                    argumentTypes: null,
                    baseExpression: {
                      argumentTypes: null,
                      id: 346,
                      name: "userToToken",
                      nodeType: "Identifier",
                      overloadedDeclarations: [],
                      referencedDeclaration: 24,
                      src: "3424:11:0",
                      typeDescriptions: {
                        typeIdentifier: "t_mapping$_t_address_$_t_contract$_Token_$794_$",
                        typeString: "mapping(address => contract Token)"
                      }
                    },
                    id: 348,
                    indexExpression: {
                      argumentTypes: null,
                      id: 347,
                      name: "to",
                      nodeType: "Identifier",
                      overloadedDeclarations: [],
                      referencedDeclaration: 320,
                      src: "3436:2:0",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      }
                    },
                    isConstant: false,
                    isLValue: true,
                    isPure: false,
                    lValueRequested: false,
                    nodeType: "IndexAccess",
                    src: "3424:15:0",
                    typeDescriptions: {
                      typeIdentifier: "t_contract$_Token_$794",
                      typeString: "contract Token"
                    }
                  },
                  id: 349,
                  isConstant: false,
                  isLValue: false,
                  isPure: false,
                  lValueRequested: false,
                  memberName: "balanceOf",
                  nodeType: "MemberAccess",
                  referencedDeclaration: 793,
                  src: "3424:25:0",
                  typeDescriptions: {
                    typeIdentifier: "t_function_external_view$_t_address_$returns$_t_uint256_$",
                    typeString: "function (address) view external returns (uint256)"
                  }
                },
                id: 351,
                isConstant: false,
                isLValue: false,
                isPure: false,
                kind: "functionCall",
                lValueRequested: false,
                names: [],
                nodeType: "FunctionCall",
                src: "3424:31:0",
                typeDescriptions: {
                  typeIdentifier: "t_uint256",
                  typeString: "uint256"
                }
              }],
              expression: {
                argumentTypes: [{
                  typeIdentifier: "t_uint256",
                  typeString: "uint256"
                }],
                expression: {
                  argumentTypes: null,
                  id: 344,
                  name: "max",
                  nodeType: "Identifier",
                  overloadedDeclarations: [],
                  referencedDeclaration: 326,
                  src: "3416:3:0",
                  typeDescriptions: {
                    typeIdentifier: "t_uint256",
                    typeString: "uint256"
                  }
                },
                id: 345,
                isConstant: false,
                isLValue: false,
                isPure: false,
                lValueRequested: false,
                memberName: "sub",
                nodeType: "MemberAccess",
                referencedDeclaration: 984,
                src: "3416:7:0",
                typeDescriptions: {
                  typeIdentifier: "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                  typeString: "function (uint256,uint256) pure returns (uint256)"
                }
              },
              id: 352,
              isConstant: false,
              isLValue: false,
              isPure: false,
              kind: "functionCall",
              lValueRequested: false,
              names: [],
              nodeType: "FunctionCall",
              src: "3416:40:0",
              typeDescriptions: {
                typeIdentifier: "t_uint256",
                typeString: "uint256"
              }
            },
            functionReturnParameters: 324,
            id: 353,
            nodeType: "Return",
            src: "3409:47:0"
          }]
        },
        documentation: null,
        id: 355,
        implemented: true,
        kind: "function",
        modifiers: [],
        name: "checkSendLimit",
        nodeType: "FunctionDefinition",
        parameters: {
          id: 321,
          nodeType: "ParameterList",
          parameters: [{
            constant: false,
            id: 318,
            name: "from",
            nodeType: "VariableDeclaration",
            scope: 355,
            src: "3257:12:0",
            stateVariable: false,
            storageLocation: "default",
            typeDescriptions: {
              typeIdentifier: "t_address",
              typeString: "address"
            },
            typeName: {
              id: 317,
              name: "address",
              nodeType: "ElementaryTypeName",
              src: "3257:7:0",
              stateMutability: "nonpayable",
              typeDescriptions: {
                typeIdentifier: "t_address",
                typeString: "address"
              }
            },
            value: null,
            visibility: "internal"
          }, {
            constant: false,
            id: 320,
            name: "to",
            nodeType: "VariableDeclaration",
            scope: 355,
            src: "3271:10:0",
            stateVariable: false,
            storageLocation: "default",
            typeDescriptions: {
              typeIdentifier: "t_address",
              typeString: "address"
            },
            typeName: {
              id: 319,
              name: "address",
              nodeType: "ElementaryTypeName",
              src: "3271:7:0",
              stateMutability: "nonpayable",
              typeDescriptions: {
                typeIdentifier: "t_address",
                typeString: "address"
              }
            },
            value: null,
            visibility: "internal"
          }],
          src: "3256:26:0"
        },
        returnParameters: {
          id: 324,
          nodeType: "ParameterList",
          parameters: [{
            constant: false,
            id: 323,
            name: "",
            nodeType: "VariableDeclaration",
            scope: 355,
            src: "3304:7:0",
            stateVariable: false,
            storageLocation: "default",
            typeDescriptions: {
              typeIdentifier: "t_uint256",
              typeString: "uint256"
            },
            typeName: {
              id: 322,
              name: "uint256",
              nodeType: "ElementaryTypeName",
              src: "3304:7:0",
              typeDescriptions: {
                typeIdentifier: "t_uint256",
                typeString: "uint256"
              }
            },
            value: null,
            visibility: "internal"
          }],
          src: "3303:9:0"
        },
        scope: 442,
        src: "3233:230:0",
        stateMutability: "view",
        superFunction: null,
        visibility: "public"
      }, {
        body: {
          id: 440,
          nodeType: "Block",
          src: "3652:466:0",
          statements: [{
            expression: {
              argumentTypes: null,
              "arguments": [{
                argumentTypes: null,
                commonType: {
                  typeIdentifier: "t_uint256",
                  typeString: "uint256"
                },
                id: 367,
                isConstant: false,
                isLValue: false,
                isPure: false,
                lValueRequested: false,
                leftExpression: {
                  argumentTypes: null,
                  expression: {
                    argumentTypes: null,
                    id: 364,
                    name: "users",
                    nodeType: "Identifier",
                    overloadedDeclarations: [],
                    referencedDeclaration: 358,
                    src: "3670:5:0",
                    typeDescriptions: {
                      typeIdentifier: "t_array$_t_address_$dyn_memory_ptr",
                      typeString: "address[] memory"
                    }
                  },
                  id: 365,
                  isConstant: false,
                  isLValue: false,
                  isPure: false,
                  lValueRequested: false,
                  memberName: "length",
                  nodeType: "MemberAccess",
                  referencedDeclaration: null,
                  src: "3670:12:0",
                  typeDescriptions: {
                    typeIdentifier: "t_uint256",
                    typeString: "uint256"
                  }
                },
                nodeType: "BinaryOperation",
                operator: "<=",
                rightExpression: {
                  argumentTypes: null,
                  hexValue: "35",
                  id: 366,
                  isConstant: false,
                  isLValue: false,
                  isPure: true,
                  kind: "number",
                  lValueRequested: false,
                  nodeType: "Literal",
                  src: "3686:1:0",
                  subdenomination: null,
                  typeDescriptions: {
                    typeIdentifier: "t_rational_5_by_1",
                    typeString: "int_const 5"
                  },
                  value: "5"
                },
                src: "3670:17:0",
                typeDescriptions: {
                  typeIdentifier: "t_bool",
                  typeString: "bool"
                }
              }],
              expression: {
                argumentTypes: [{
                  typeIdentifier: "t_bool",
                  typeString: "bool"
                }],
                id: 363,
                name: "require",
                nodeType: "Identifier",
                overloadedDeclarations: [1548, 1549],
                referencedDeclaration: 1548,
                src: "3662:7:0",
                typeDescriptions: {
                  typeIdentifier: "t_function_require_pure$_t_bool_$returns$__$",
                  typeString: "function (bool) pure"
                }
              },
              id: 368,
              isConstant: false,
              isLValue: false,
              isPure: false,
              kind: "functionCall",
              lValueRequested: false,
              names: [],
              nodeType: "FunctionCall",
              src: "3662:26:0",
              typeDescriptions: {
                typeIdentifier: "t_tuple$__$",
                typeString: "tuple()"
              }
            },
            id: 369,
            nodeType: "ExpressionStatement",
            src: "3662:26:0"
          }, {
            assignments: [371],
            declarations: [{
              constant: false,
              id: 371,
              name: "prev",
              nodeType: "VariableDeclaration",
              scope: 440,
              src: "3698:12:0",
              stateVariable: false,
              storageLocation: "default",
              typeDescriptions: {
                typeIdentifier: "t_address",
                typeString: "address"
              },
              typeName: {
                id: 370,
                name: "address",
                nodeType: "ElementaryTypeName",
                src: "3698:7:0",
                stateMutability: "nonpayable",
                typeDescriptions: {
                  typeIdentifier: "t_address",
                  typeString: "address"
                }
              },
              value: null,
              visibility: "internal"
            }],
            id: 374,
            initialValue: {
              argumentTypes: null,
              expression: {
                argumentTypes: null,
                id: 372,
                name: "msg",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 1545,
                src: "3713:3:0",
                typeDescriptions: {
                  typeIdentifier: "t_magic_message",
                  typeString: "msg"
                }
              },
              id: 373,
              isConstant: false,
              isLValue: false,
              isPure: false,
              lValueRequested: false,
              memberName: "sender",
              nodeType: "MemberAccess",
              referencedDeclaration: null,
              src: "3713:10:0",
              typeDescriptions: {
                typeIdentifier: "t_address_payable",
                typeString: "address payable"
              }
            },
            nodeType: "VariableDeclarationStatement",
            src: "3698:25:0"
          }, {
            body: {
              id: 438,
              nodeType: "Block",
              src: "3773:339:0",
              statements: [{
                assignments: [387],
                declarations: [{
                  constant: false,
                  id: 387,
                  name: "curr",
                  nodeType: "VariableDeclaration",
                  scope: 438,
                  src: "3787:12:0",
                  stateVariable: false,
                  storageLocation: "default",
                  typeDescriptions: {
                    typeIdentifier: "t_address",
                    typeString: "address"
                  },
                  typeName: {
                    id: 386,
                    name: "address",
                    nodeType: "ElementaryTypeName",
                    src: "3787:7:0",
                    stateMutability: "nonpayable",
                    typeDescriptions: {
                      typeIdentifier: "t_address",
                      typeString: "address"
                    }
                  },
                  value: null,
                  visibility: "internal"
                }],
                id: 391,
                initialValue: {
                  argumentTypes: null,
                  baseExpression: {
                    argumentTypes: null,
                    id: 388,
                    name: "users",
                    nodeType: "Identifier",
                    overloadedDeclarations: [],
                    referencedDeclaration: 358,
                    src: "3802:5:0",
                    typeDescriptions: {
                      typeIdentifier: "t_array$_t_address_$dyn_memory_ptr",
                      typeString: "address[] memory"
                    }
                  },
                  id: 390,
                  indexExpression: {
                    argumentTypes: null,
                    id: 389,
                    name: "i",
                    nodeType: "Identifier",
                    overloadedDeclarations: [],
                    referencedDeclaration: 376,
                    src: "3808:1:0",
                    typeDescriptions: {
                      typeIdentifier: "t_uint256",
                      typeString: "uint256"
                    }
                  },
                  isConstant: false,
                  isLValue: true,
                  isPure: false,
                  lValueRequested: false,
                  nodeType: "IndexAccess",
                  src: "3802:8:0",
                  typeDescriptions: {
                    typeIdentifier: "t_address",
                    typeString: "address"
                  }
                },
                nodeType: "VariableDeclarationStatement",
                src: "3787:23:0"
              }, {
                assignments: [393],
                declarations: [{
                  constant: false,
                  id: 393,
                  name: "max",
                  nodeType: "VariableDeclaration",
                  scope: 438,
                  src: "3824:11:0",
                  stateVariable: false,
                  storageLocation: "default",
                  typeDescriptions: {
                    typeIdentifier: "t_uint256",
                    typeString: "uint256"
                  },
                  typeName: {
                    id: 392,
                    name: "uint256",
                    nodeType: "ElementaryTypeName",
                    src: "3824:7:0",
                    typeDescriptions: {
                      typeIdentifier: "t_uint256",
                      typeString: "uint256"
                    }
                  },
                  value: null,
                  visibility: "internal"
                }],
                id: 410,
                initialValue: {
                  argumentTypes: null,
                  "arguments": [{
                    argumentTypes: null,
                    hexValue: "31303030303030303030303030303030303030",
                    id: 408,
                    isConstant: false,
                    isLValue: false,
                    isPure: true,
                    kind: "number",
                    lValueRequested: false,
                    nodeType: "Literal",
                    src: "3900:19:0",
                    subdenomination: null,
                    typeDescriptions: {
                      typeIdentifier: "t_rational_1000000000000000000_by_1",
                      typeString: "int_const 1000000000000000000"
                    },
                    value: "1000000000000000000"
                  }],
                  expression: {
                    argumentTypes: [{
                      typeIdentifier: "t_rational_1000000000000000000_by_1",
                      typeString: "int_const 1000000000000000000"
                    }],
                    expression: {
                      argumentTypes: null,
                      components: [{
                        argumentTypes: null,
                        "arguments": [{
                          argumentTypes: null,
                          baseExpression: {
                            argumentTypes: null,
                            baseExpression: {
                              argumentTypes: null,
                              id: 400,
                              name: "limits",
                              nodeType: "Identifier",
                              overloadedDeclarations: [],
                              referencedDeclaration: 34,
                              src: "3875:6:0",
                              typeDescriptions: {
                                typeIdentifier: "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                typeString: "mapping(address => mapping(address => uint256))"
                              }
                            },
                            id: 402,
                            indexExpression: {
                              argumentTypes: null,
                              id: 401,
                              name: "curr",
                              nodeType: "Identifier",
                              overloadedDeclarations: [],
                              referencedDeclaration: 387,
                              src: "3882:4:0",
                              typeDescriptions: {
                                typeIdentifier: "t_address",
                                typeString: "address"
                              }
                            },
                            isConstant: false,
                            isLValue: true,
                            isPure: false,
                            lValueRequested: false,
                            nodeType: "IndexAccess",
                            src: "3875:12:0",
                            typeDescriptions: {
                              typeIdentifier: "t_mapping$_t_address_$_t_uint256_$",
                              typeString: "mapping(address => uint256)"
                            }
                          },
                          id: 404,
                          indexExpression: {
                            argumentTypes: null,
                            id: 403,
                            name: "prev",
                            nodeType: "Identifier",
                            overloadedDeclarations: [],
                            referencedDeclaration: 371,
                            src: "3888:4:0",
                            typeDescriptions: {
                              typeIdentifier: "t_address",
                              typeString: "address"
                            }
                          },
                          isConstant: false,
                          isLValue: true,
                          isPure: false,
                          lValueRequested: false,
                          nodeType: "IndexAccess",
                          src: "3875:18:0",
                          typeDescriptions: {
                            typeIdentifier: "t_uint256",
                            typeString: "uint256"
                          }
                        }],
                        expression: {
                          argumentTypes: [{
                            typeIdentifier: "t_uint256",
                            typeString: "uint256"
                          }],
                          expression: {
                            argumentTypes: null,
                            "arguments": [],
                            expression: {
                              argumentTypes: [],
                              expression: {
                                argumentTypes: null,
                                baseExpression: {
                                  argumentTypes: null,
                                  id: 394,
                                  name: "userToToken",
                                  nodeType: "Identifier",
                                  overloadedDeclarations: [],
                                  referencedDeclaration: 24,
                                  src: "3839:11:0",
                                  typeDescriptions: {
                                    typeIdentifier: "t_mapping$_t_address_$_t_contract$_Token_$794_$",
                                    typeString: "mapping(address => contract Token)"
                                  }
                                },
                                id: 396,
                                indexExpression: {
                                  argumentTypes: null,
                                  id: 395,
                                  name: "curr",
                                  nodeType: "Identifier",
                                  overloadedDeclarations: [],
                                  referencedDeclaration: 387,
                                  src: "3851:4:0",
                                  typeDescriptions: {
                                    typeIdentifier: "t_address",
                                    typeString: "address"
                                  }
                                },
                                isConstant: false,
                                isLValue: true,
                                isPure: false,
                                lValueRequested: false,
                                nodeType: "IndexAccess",
                                src: "3839:17:0",
                                typeDescriptions: {
                                  typeIdentifier: "t_contract$_Token_$794",
                                  typeString: "contract Token"
                                }
                              },
                              id: 397,
                              isConstant: false,
                              isLValue: false,
                              isPure: false,
                              lValueRequested: false,
                              memberName: "totalSupply",
                              nodeType: "MemberAccess",
                              referencedDeclaration: 776,
                              src: "3839:29:0",
                              typeDescriptions: {
                                typeIdentifier: "t_function_external_view$__$returns$_t_uint256_$",
                                typeString: "function () view external returns (uint256)"
                              }
                            },
                            id: 398,
                            isConstant: false,
                            isLValue: false,
                            isPure: false,
                            kind: "functionCall",
                            lValueRequested: false,
                            names: [],
                            nodeType: "FunctionCall",
                            src: "3839:31:0",
                            typeDescriptions: {
                              typeIdentifier: "t_uint256",
                              typeString: "uint256"
                            }
                          },
                          id: 399,
                          isConstant: false,
                          isLValue: false,
                          isPure: false,
                          lValueRequested: false,
                          memberName: "mul",
                          nodeType: "MemberAccess",
                          referencedDeclaration: 936,
                          src: "3839:35:0",
                          typeDescriptions: {
                            typeIdentifier: "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                            typeString: "function (uint256,uint256) pure returns (uint256)"
                          }
                        },
                        id: 405,
                        isConstant: false,
                        isLValue: false,
                        isPure: false,
                        kind: "functionCall",
                        lValueRequested: false,
                        names: [],
                        nodeType: "FunctionCall",
                        src: "3839:55:0",
                        typeDescriptions: {
                          typeIdentifier: "t_uint256",
                          typeString: "uint256"
                        }
                      }],
                      id: 406,
                      isConstant: false,
                      isInlineArray: false,
                      isLValue: false,
                      isPure: false,
                      lValueRequested: false,
                      nodeType: "TupleExpression",
                      src: "3838:57:0",
                      typeDescriptions: {
                        typeIdentifier: "t_uint256",
                        typeString: "uint256"
                      }
                    },
                    id: 407,
                    isConstant: false,
                    isLValue: false,
                    isPure: false,
                    lValueRequested: false,
                    memberName: "div",
                    nodeType: "MemberAccess",
                    referencedDeclaration: 960,
                    src: "3838:61:0",
                    typeDescriptions: {
                      typeIdentifier: "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                      typeString: "function (uint256,uint256) pure returns (uint256)"
                    }
                  },
                  id: 409,
                  isConstant: false,
                  isLValue: false,
                  isPure: false,
                  kind: "functionCall",
                  lValueRequested: false,
                  names: [],
                  nodeType: "FunctionCall",
                  src: "3838:82:0",
                  typeDescriptions: {
                    typeIdentifier: "t_uint256",
                    typeString: "uint256"
                  }
                },
                nodeType: "VariableDeclarationStatement",
                src: "3824:96:0"
              }, {
                expression: {
                  argumentTypes: null,
                  "arguments": [{
                    argumentTypes: null,
                    commonType: {
                      typeIdentifier: "t_uint256",
                      typeString: "uint256"
                    },
                    id: 421,
                    isConstant: false,
                    isLValue: false,
                    isPure: false,
                    lValueRequested: false,
                    leftExpression: {
                      argumentTypes: null,
                      commonType: {
                        typeIdentifier: "t_uint256",
                        typeString: "uint256"
                      },
                      id: 419,
                      isConstant: false,
                      isLValue: false,
                      isPure: false,
                      lValueRequested: false,
                      leftExpression: {
                        argumentTypes: null,
                        "arguments": [{
                          argumentTypes: null,
                          id: 416,
                          name: "curr",
                          nodeType: "Identifier",
                          overloadedDeclarations: [],
                          referencedDeclaration: 387,
                          src: "3971:4:0",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address"
                          }
                        }],
                        expression: {
                          argumentTypes: [{
                            typeIdentifier: "t_address",
                            typeString: "address"
                          }],
                          expression: {
                            argumentTypes: null,
                            baseExpression: {
                              argumentTypes: null,
                              id: 412,
                              name: "userToToken",
                              nodeType: "Identifier",
                              overloadedDeclarations: [],
                              referencedDeclaration: 24,
                              src: "3943:11:0",
                              typeDescriptions: {
                                typeIdentifier: "t_mapping$_t_address_$_t_contract$_Token_$794_$",
                                typeString: "mapping(address => contract Token)"
                              }
                            },
                            id: 414,
                            indexExpression: {
                              argumentTypes: null,
                              id: 413,
                              name: "prev",
                              nodeType: "Identifier",
                              overloadedDeclarations: [],
                              referencedDeclaration: 371,
                              src: "3955:4:0",
                              typeDescriptions: {
                                typeIdentifier: "t_address",
                                typeString: "address"
                              }
                            },
                            isConstant: false,
                            isLValue: true,
                            isPure: false,
                            lValueRequested: false,
                            nodeType: "IndexAccess",
                            src: "3943:17:0",
                            typeDescriptions: {
                              typeIdentifier: "t_contract$_Token_$794",
                              typeString: "contract Token"
                            }
                          },
                          id: 415,
                          isConstant: false,
                          isLValue: false,
                          isPure: false,
                          lValueRequested: false,
                          memberName: "balanceOf",
                          nodeType: "MemberAccess",
                          referencedDeclaration: 793,
                          src: "3943:27:0",
                          typeDescriptions: {
                            typeIdentifier: "t_function_external_view$_t_address_$returns$_t_uint256_$",
                            typeString: "function (address) view external returns (uint256)"
                          }
                        },
                        id: 417,
                        isConstant: false,
                        isLValue: false,
                        isPure: false,
                        kind: "functionCall",
                        lValueRequested: false,
                        names: [],
                        nodeType: "FunctionCall",
                        src: "3943:33:0",
                        typeDescriptions: {
                          typeIdentifier: "t_uint256",
                          typeString: "uint256"
                        }
                      },
                      nodeType: "BinaryOperation",
                      operator: "+",
                      rightExpression: {
                        argumentTypes: null,
                        id: 418,
                        name: "wad",
                        nodeType: "Identifier",
                        overloadedDeclarations: [],
                        referencedDeclaration: 360,
                        src: "3979:3:0",
                        typeDescriptions: {
                          typeIdentifier: "t_uint256",
                          typeString: "uint256"
                        }
                      },
                      src: "3943:39:0",
                      typeDescriptions: {
                        typeIdentifier: "t_uint256",
                        typeString: "uint256"
                      }
                    },
                    nodeType: "BinaryOperation",
                    operator: "<=",
                    rightExpression: {
                      argumentTypes: null,
                      id: 420,
                      name: "max",
                      nodeType: "Identifier",
                      overloadedDeclarations: [],
                      referencedDeclaration: 393,
                      src: "3986:3:0",
                      typeDescriptions: {
                        typeIdentifier: "t_uint256",
                        typeString: "uint256"
                      }
                    },
                    src: "3943:46:0",
                    typeDescriptions: {
                      typeIdentifier: "t_bool",
                      typeString: "bool"
                    }
                  }, {
                    argumentTypes: null,
                    hexValue: "5472757374206c696d6974206578636565646564",
                    id: 422,
                    isConstant: false,
                    isLValue: false,
                    isPure: true,
                    kind: "string",
                    lValueRequested: false,
                    nodeType: "Literal",
                    src: "3991:22:0",
                    subdenomination: null,
                    typeDescriptions: {
                      typeIdentifier: "t_stringliteral_bfd65915118c90a8f528a4497fd37b2c98d1b399053d7d29cf1cda0cd1d9b348",
                      typeString: "literal_string \"Trust limit exceeded\""
                    },
                    value: "Trust limit exceeded"
                  }],
                  expression: {
                    argumentTypes: [{
                      typeIdentifier: "t_bool",
                      typeString: "bool"
                    }, {
                      typeIdentifier: "t_stringliteral_bfd65915118c90a8f528a4497fd37b2c98d1b399053d7d29cf1cda0cd1d9b348",
                      typeString: "literal_string \"Trust limit exceeded\""
                    }],
                    id: 411,
                    name: "require",
                    nodeType: "Identifier",
                    overloadedDeclarations: [1548, 1549],
                    referencedDeclaration: 1549,
                    src: "3935:7:0",
                    typeDescriptions: {
                      typeIdentifier: "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                      typeString: "function (bool,string memory) pure"
                    }
                  },
                  id: 423,
                  isConstant: false,
                  isLValue: false,
                  isPure: false,
                  kind: "functionCall",
                  lValueRequested: false,
                  names: [],
                  nodeType: "FunctionCall",
                  src: "3935:79:0",
                  typeDescriptions: {
                    typeIdentifier: "t_tuple$__$",
                    typeString: "tuple()"
                  }
                },
                id: 424,
                nodeType: "ExpressionStatement",
                src: "3935:79:0"
              }, {
                expression: {
                  argumentTypes: null,
                  "arguments": [{
                    argumentTypes: null,
                    id: 429,
                    name: "prev",
                    nodeType: "Identifier",
                    overloadedDeclarations: [],
                    referencedDeclaration: 371,
                    src: "4059:4:0",
                    typeDescriptions: {
                      typeIdentifier: "t_address",
                      typeString: "address"
                    }
                  }, {
                    argumentTypes: null,
                    id: 430,
                    name: "curr",
                    nodeType: "Identifier",
                    overloadedDeclarations: [],
                    referencedDeclaration: 387,
                    src: "4065:4:0",
                    typeDescriptions: {
                      typeIdentifier: "t_address",
                      typeString: "address"
                    }
                  }, {
                    argumentTypes: null,
                    id: 431,
                    name: "wad",
                    nodeType: "Identifier",
                    overloadedDeclarations: [],
                    referencedDeclaration: 360,
                    src: "4071:3:0",
                    typeDescriptions: {
                      typeIdentifier: "t_uint256",
                      typeString: "uint256"
                    }
                  }],
                  expression: {
                    argumentTypes: [{
                      typeIdentifier: "t_address",
                      typeString: "address"
                    }, {
                      typeIdentifier: "t_address",
                      typeString: "address"
                    }, {
                      typeIdentifier: "t_uint256",
                      typeString: "uint256"
                    }],
                    expression: {
                      argumentTypes: null,
                      baseExpression: {
                        argumentTypes: null,
                        id: 425,
                        name: "userToToken",
                        nodeType: "Identifier",
                        overloadedDeclarations: [],
                        referencedDeclaration: 24,
                        src: "4029:11:0",
                        typeDescriptions: {
                          typeIdentifier: "t_mapping$_t_address_$_t_contract$_Token_$794_$",
                          typeString: "mapping(address => contract Token)"
                        }
                      },
                      id: 427,
                      indexExpression: {
                        argumentTypes: null,
                        id: 426,
                        name: "prev",
                        nodeType: "Identifier",
                        overloadedDeclarations: [],
                        referencedDeclaration: 371,
                        src: "4041:4:0",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      isConstant: false,
                      isLValue: true,
                      isPure: false,
                      lValueRequested: false,
                      nodeType: "IndexAccess",
                      src: "4029:17:0",
                      typeDescriptions: {
                        typeIdentifier: "t_contract$_Token_$794",
                        typeString: "contract Token"
                      }
                    },
                    id: 428,
                    isConstant: false,
                    isLValue: false,
                    isPure: false,
                    lValueRequested: false,
                    memberName: "hubTransfer",
                    nodeType: "MemberAccess",
                    referencedDeclaration: 723,
                    src: "4029:29:0",
                    typeDescriptions: {
                      typeIdentifier: "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
                      typeString: "function (address,address,uint256) external returns (bool)"
                    }
                  },
                  id: 432,
                  isConstant: false,
                  isLValue: false,
                  isPure: false,
                  kind: "functionCall",
                  lValueRequested: false,
                  names: [],
                  nodeType: "FunctionCall",
                  src: "4029:46:0",
                  typeDescriptions: {
                    typeIdentifier: "t_bool",
                    typeString: "bool"
                  }
                },
                id: 433,
                nodeType: "ExpressionStatement",
                src: "4029:46:0"
              }, {
                expression: {
                  argumentTypes: null,
                  id: 436,
                  isConstant: false,
                  isLValue: false,
                  isPure: false,
                  lValueRequested: false,
                  leftHandSide: {
                    argumentTypes: null,
                    id: 434,
                    name: "prev",
                    nodeType: "Identifier",
                    overloadedDeclarations: [],
                    referencedDeclaration: 371,
                    src: "4089:4:0",
                    typeDescriptions: {
                      typeIdentifier: "t_address",
                      typeString: "address"
                    }
                  },
                  nodeType: "Assignment",
                  operator: "=",
                  rightHandSide: {
                    argumentTypes: null,
                    id: 435,
                    name: "curr",
                    nodeType: "Identifier",
                    overloadedDeclarations: [],
                    referencedDeclaration: 387,
                    src: "4096:4:0",
                    typeDescriptions: {
                      typeIdentifier: "t_address",
                      typeString: "address"
                    }
                  },
                  src: "4089:11:0",
                  typeDescriptions: {
                    typeIdentifier: "t_address",
                    typeString: "address"
                  }
                },
                id: 437,
                nodeType: "ExpressionStatement",
                src: "4089:11:0"
              }]
            },
            condition: {
              argumentTypes: null,
              commonType: {
                typeIdentifier: "t_uint256",
                typeString: "uint256"
              },
              id: 382,
              isConstant: false,
              isLValue: false,
              isPure: false,
              lValueRequested: false,
              leftExpression: {
                argumentTypes: null,
                id: 379,
                name: "i",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 376,
                src: "3750:1:0",
                typeDescriptions: {
                  typeIdentifier: "t_uint256",
                  typeString: "uint256"
                }
              },
              nodeType: "BinaryOperation",
              operator: "<",
              rightExpression: {
                argumentTypes: null,
                expression: {
                  argumentTypes: null,
                  id: 380,
                  name: "users",
                  nodeType: "Identifier",
                  overloadedDeclarations: [],
                  referencedDeclaration: 358,
                  src: "3754:5:0",
                  typeDescriptions: {
                    typeIdentifier: "t_array$_t_address_$dyn_memory_ptr",
                    typeString: "address[] memory"
                  }
                },
                id: 381,
                isConstant: false,
                isLValue: false,
                isPure: false,
                lValueRequested: false,
                memberName: "length",
                nodeType: "MemberAccess",
                referencedDeclaration: null,
                src: "3754:12:0",
                typeDescriptions: {
                  typeIdentifier: "t_uint256",
                  typeString: "uint256"
                }
              },
              src: "3750:16:0",
              typeDescriptions: {
                typeIdentifier: "t_bool",
                typeString: "bool"
              }
            },
            id: 439,
            initializationExpression: {
              assignments: [376],
              declarations: [{
                constant: false,
                id: 376,
                name: "i",
                nodeType: "VariableDeclaration",
                scope: 439,
                src: "3738:6:0",
                stateVariable: false,
                storageLocation: "default",
                typeDescriptions: {
                  typeIdentifier: "t_uint256",
                  typeString: "uint256"
                },
                typeName: {
                  id: 375,
                  name: "uint",
                  nodeType: "ElementaryTypeName",
                  src: "3738:4:0",
                  typeDescriptions: {
                    typeIdentifier: "t_uint256",
                    typeString: "uint256"
                  }
                },
                value: null,
                visibility: "internal"
              }],
              id: 378,
              initialValue: {
                argumentTypes: null,
                hexValue: "30",
                id: 377,
                isConstant: false,
                isLValue: false,
                isPure: true,
                kind: "number",
                lValueRequested: false,
                nodeType: "Literal",
                src: "3747:1:0",
                subdenomination: null,
                typeDescriptions: {
                  typeIdentifier: "t_rational_0_by_1",
                  typeString: "int_const 0"
                },
                value: "0"
              },
              nodeType: "VariableDeclarationStatement",
              src: "3738:10:0"
            },
            loopExpression: {
              expression: {
                argumentTypes: null,
                id: 384,
                isConstant: false,
                isLValue: false,
                isPure: false,
                lValueRequested: false,
                nodeType: "UnaryOperation",
                operator: "++",
                prefix: false,
                src: "3768:3:0",
                subExpression: {
                  argumentTypes: null,
                  id: 383,
                  name: "i",
                  nodeType: "Identifier",
                  overloadedDeclarations: [],
                  referencedDeclaration: 376,
                  src: "3768:1:0",
                  typeDescriptions: {
                    typeIdentifier: "t_uint256",
                    typeString: "uint256"
                  }
                },
                typeDescriptions: {
                  typeIdentifier: "t_uint256",
                  typeString: "uint256"
                }
              },
              id: 385,
              nodeType: "ExpressionStatement",
              src: "3768:3:0"
            },
            nodeType: "ForStatement",
            src: "3733:379:0"
          }]
        },
        documentation: null,
        id: 441,
        implemented: true,
        kind: "function",
        modifiers: [],
        name: "transferThrough",
        nodeType: "FunctionDefinition",
        parameters: {
          id: 361,
          nodeType: "ParameterList",
          parameters: [{
            constant: false,
            id: 358,
            name: "users",
            nodeType: "VariableDeclaration",
            scope: 441,
            src: "3611:22:0",
            stateVariable: false,
            storageLocation: "memory",
            typeDescriptions: {
              typeIdentifier: "t_array$_t_address_$dyn_memory_ptr",
              typeString: "address[]"
            },
            typeName: {
              baseType: {
                id: 356,
                name: "address",
                nodeType: "ElementaryTypeName",
                src: "3611:7:0",
                stateMutability: "nonpayable",
                typeDescriptions: {
                  typeIdentifier: "t_address",
                  typeString: "address"
                }
              },
              id: 357,
              length: null,
              nodeType: "ArrayTypeName",
              src: "3611:9:0",
              typeDescriptions: {
                typeIdentifier: "t_array$_t_address_$dyn_storage_ptr",
                typeString: "address[]"
              }
            },
            value: null,
            visibility: "internal"
          }, {
            constant: false,
            id: 360,
            name: "wad",
            nodeType: "VariableDeclaration",
            scope: 441,
            src: "3635:8:0",
            stateVariable: false,
            storageLocation: "default",
            typeDescriptions: {
              typeIdentifier: "t_uint256",
              typeString: "uint256"
            },
            typeName: {
              id: 359,
              name: "uint",
              nodeType: "ElementaryTypeName",
              src: "3635:4:0",
              typeDescriptions: {
                typeIdentifier: "t_uint256",
                typeString: "uint256"
              }
            },
            value: null,
            visibility: "internal"
          }],
          src: "3610:34:0"
        },
        returnParameters: {
          id: 362,
          nodeType: "ParameterList",
          parameters: [],
          src: "3652:0:0"
        },
        scope: 442,
        src: "3586:532:0",
        stateMutability: "nonpayable",
        superFunction: null,
        visibility: "public"
      }],
      scope: 443,
      src: "284:3837:0"
    }],
    src: "0:4123:0"
  };
  var legacyAST = {
    absolutePath: "/media/000/Documents/Circles/circles-contracts/contracts/Hub.sol",
    exportedSymbols: {
      Hub: [442]
    },
    id: 443,
    nodeType: "SourceUnit",
    nodes: [{
      id: 1,
      literals: ["solidity", "^", "0.5", ".0"],
      nodeType: "PragmaDirective",
      src: "0:23:0"
    }, {
      absolutePath: "openzeppelin-solidity/contracts/math/SafeMath.sol",
      file: "openzeppelin-solidity/contracts/math/SafeMath.sol",
      id: 2,
      nodeType: "ImportDirective",
      scope: 443,
      sourceUnit: 1030,
      src: "25:59:0",
      symbolAliases: [],
      unitAlias: ""
    }, {
      absolutePath: "/media/000/Documents/Circles/circles-contracts/contracts/Token.sol",
      file: "./Token.sol",
      id: 3,
      nodeType: "ImportDirective",
      scope: 443,
      sourceUnit: 795,
      src: "85:21:0",
      symbolAliases: [],
      unitAlias: ""
    }, {
      baseContracts: [],
      contractDependencies: [794],
      contractKind: "contract",
      documentation: null,
      fullyImplemented: true,
      id: 442,
      linearizedBaseContracts: [442],
      name: "Hub",
      nodeType: "ContractDefinition",
      nodes: [{
        id: 6,
        libraryName: {
          contractScope: null,
          id: 4,
          name: "SafeMath",
          nodeType: "UserDefinedTypeName",
          referencedDeclaration: 1029,
          src: "309:8:0",
          typeDescriptions: {
            typeIdentifier: "t_contract$_SafeMath_$1029",
            typeString: "library SafeMath"
          }
        },
        nodeType: "UsingForDirective",
        src: "303:27:0",
        typeName: {
          id: 5,
          name: "uint256",
          nodeType: "ElementaryTypeName",
          src: "322:7:0",
          typeDescriptions: {
            typeIdentifier: "t_uint256",
            typeString: "uint256"
          }
        }
      }, {
        constant: false,
        id: 8,
        name: "owner",
        nodeType: "VariableDeclaration",
        scope: 442,
        src: "336:20:0",
        stateVariable: true,
        storageLocation: "default",
        typeDescriptions: {
          typeIdentifier: "t_address",
          typeString: "address"
        },
        typeName: {
          id: 7,
          name: "address",
          nodeType: "ElementaryTypeName",
          src: "336:7:0",
          stateMutability: "nonpayable",
          typeDescriptions: {
            typeIdentifier: "t_address",
            typeString: "address"
          }
        },
        value: null,
        visibility: "public"
      }, {
        constant: false,
        id: 10,
        name: "issuanceRate",
        nodeType: "VariableDeclaration",
        scope: 442,
        src: "363:27:0",
        stateVariable: true,
        storageLocation: "default",
        typeDescriptions: {
          typeIdentifier: "t_uint256",
          typeString: "uint256"
        },
        typeName: {
          id: 9,
          name: "uint256",
          nodeType: "ElementaryTypeName",
          src: "363:7:0",
          typeDescriptions: {
            typeIdentifier: "t_uint256",
            typeString: "uint256"
          }
        },
        value: null,
        visibility: "public"
      }, {
        constant: false,
        id: 12,
        name: "demurrageRate",
        nodeType: "VariableDeclaration",
        scope: 442,
        src: "444:28:0",
        stateVariable: true,
        storageLocation: "default",
        typeDescriptions: {
          typeIdentifier: "t_uint256",
          typeString: "uint256"
        },
        typeName: {
          id: 11,
          name: "uint256",
          nodeType: "ElementaryTypeName",
          src: "444:7:0",
          typeDescriptions: {
            typeIdentifier: "t_uint256",
            typeString: "uint256"
          }
        },
        value: null,
        visibility: "public"
      }, {
        constant: false,
        id: 14,
        name: "symbol",
        nodeType: "VariableDeclaration",
        scope: 442,
        src: "486:20:0",
        stateVariable: true,
        storageLocation: "default",
        typeDescriptions: {
          typeIdentifier: "t_string_storage",
          typeString: "string"
        },
        typeName: {
          id: 13,
          name: "string",
          nodeType: "ElementaryTypeName",
          src: "486:6:0",
          typeDescriptions: {
            typeIdentifier: "t_string_storage_ptr",
            typeString: "string"
          }
        },
        value: null,
        visibility: "public"
      }, {
        constant: false,
        id: 16,
        name: "initialPayout",
        nodeType: "VariableDeclaration",
        scope: 442,
        src: "524:21:0",
        stateVariable: true,
        storageLocation: "default",
        typeDescriptions: {
          typeIdentifier: "t_uint256",
          typeString: "uint256"
        },
        typeName: {
          id: 15,
          name: "uint256",
          nodeType: "ElementaryTypeName",
          src: "524:7:0",
          typeDescriptions: {
            typeIdentifier: "t_uint256",
            typeString: "uint256"
          }
        },
        value: null,
        visibility: "internal"
      }, {
        constant: false,
        id: 20,
        name: "relayers",
        nodeType: "VariableDeclaration",
        scope: 442,
        src: "552:41:0",
        stateVariable: true,
        storageLocation: "default",
        typeDescriptions: {
          typeIdentifier: "t_mapping$_t_address_$_t_bool_$",
          typeString: "mapping(address => bool)"
        },
        typeName: {
          id: 19,
          keyType: {
            id: 17,
            name: "address",
            nodeType: "ElementaryTypeName",
            src: "561:7:0",
            typeDescriptions: {
              typeIdentifier: "t_address",
              typeString: "address"
            }
          },
          nodeType: "Mapping",
          src: "552:25:0",
          typeDescriptions: {
            typeIdentifier: "t_mapping$_t_address_$_t_bool_$",
            typeString: "mapping(address => bool)"
          },
          valueType: {
            id: 18,
            name: "bool",
            nodeType: "ElementaryTypeName",
            src: "572:4:0",
            typeDescriptions: {
              typeIdentifier: "t_bool",
              typeString: "bool"
            }
          }
        },
        value: null,
        visibility: "public"
      }, {
        constant: false,
        id: 24,
        name: "userToToken",
        nodeType: "VariableDeclaration",
        scope: 442,
        src: "599:45:0",
        stateVariable: true,
        storageLocation: "default",
        typeDescriptions: {
          typeIdentifier: "t_mapping$_t_address_$_t_contract$_Token_$794_$",
          typeString: "mapping(address => contract Token)"
        },
        typeName: {
          id: 23,
          keyType: {
            id: 21,
            name: "address",
            nodeType: "ElementaryTypeName",
            src: "608:7:0",
            typeDescriptions: {
              typeIdentifier: "t_address",
              typeString: "address"
            }
          },
          nodeType: "Mapping",
          src: "599:26:0",
          typeDescriptions: {
            typeIdentifier: "t_mapping$_t_address_$_t_contract$_Token_$794_$",
            typeString: "mapping(address => contract Token)"
          },
          valueType: {
            contractScope: null,
            id: 22,
            name: "Token",
            nodeType: "UserDefinedTypeName",
            referencedDeclaration: 794,
            src: "619:5:0",
            typeDescriptions: {
              typeIdentifier: "t_contract$_Token_$794",
              typeString: "contract Token"
            }
          }
        },
        value: null,
        visibility: "public"
      }, {
        constant: false,
        id: 28,
        name: "tokenToUser",
        nodeType: "VariableDeclaration",
        scope: 442,
        src: "650:47:0",
        stateVariable: true,
        storageLocation: "default",
        typeDescriptions: {
          typeIdentifier: "t_mapping$_t_address_$_t_address_$",
          typeString: "mapping(address => address)"
        },
        typeName: {
          id: 27,
          keyType: {
            id: 25,
            name: "address",
            nodeType: "ElementaryTypeName",
            src: "659:7:0",
            typeDescriptions: {
              typeIdentifier: "t_address",
              typeString: "address"
            }
          },
          nodeType: "Mapping",
          src: "650:28:0",
          typeDescriptions: {
            typeIdentifier: "t_mapping$_t_address_$_t_address_$",
            typeString: "mapping(address => address)"
          },
          valueType: {
            id: 26,
            name: "address",
            nodeType: "ElementaryTypeName",
            src: "670:7:0",
            stateMutability: "nonpayable",
            typeDescriptions: {
              typeIdentifier: "t_address",
              typeString: "address"
            }
          }
        },
        value: null,
        visibility: "public"
      }, {
        constant: false,
        id: 34,
        name: "limits",
        nodeType: "VariableDeclaration",
        scope: 442,
        src: "703:63:0",
        stateVariable: true,
        storageLocation: "default",
        typeDescriptions: {
          typeIdentifier: "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
          typeString: "mapping(address => mapping(address => uint256))"
        },
        typeName: {
          id: 33,
          keyType: {
            id: 29,
            name: "address",
            nodeType: "ElementaryTypeName",
            src: "712:7:0",
            typeDescriptions: {
              typeIdentifier: "t_address",
              typeString: "address"
            }
          },
          nodeType: "Mapping",
          src: "703:49:0",
          typeDescriptions: {
            typeIdentifier: "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
            typeString: "mapping(address => mapping(address => uint256))"
          },
          valueType: {
            id: 32,
            keyType: {
              id: 30,
              name: "address",
              nodeType: "ElementaryTypeName",
              src: "732:7:0",
              typeDescriptions: {
                typeIdentifier: "t_address",
                typeString: "address"
              }
            },
            nodeType: "Mapping",
            src: "723:28:0",
            typeDescriptions: {
              typeIdentifier: "t_mapping$_t_address_$_t_uint256_$",
              typeString: "mapping(address => uint256)"
            },
            valueType: {
              id: 31,
              name: "uint256",
              nodeType: "ElementaryTypeName",
              src: "743:7:0",
              typeDescriptions: {
                typeIdentifier: "t_uint256",
                typeString: "uint256"
              }
            }
          }
        },
        value: null,
        visibility: "public"
      }, {
        anonymous: false,
        documentation: null,
        id: 40,
        name: "Signup",
        nodeType: "EventDefinition",
        parameters: {
          id: 39,
          nodeType: "ParameterList",
          parameters: [{
            constant: false,
            id: 36,
            indexed: true,
            name: "user",
            nodeType: "VariableDeclaration",
            scope: 40,
            src: "786:20:0",
            stateVariable: false,
            storageLocation: "default",
            typeDescriptions: {
              typeIdentifier: "t_address",
              typeString: "address"
            },
            typeName: {
              id: 35,
              name: "address",
              nodeType: "ElementaryTypeName",
              src: "786:7:0",
              stateMutability: "nonpayable",
              typeDescriptions: {
                typeIdentifier: "t_address",
                typeString: "address"
              }
            },
            value: null,
            visibility: "internal"
          }, {
            constant: false,
            id: 38,
            indexed: false,
            name: "token",
            nodeType: "VariableDeclaration",
            scope: 40,
            src: "808:13:0",
            stateVariable: false,
            storageLocation: "default",
            typeDescriptions: {
              typeIdentifier: "t_address",
              typeString: "address"
            },
            typeName: {
              id: 37,
              name: "address",
              nodeType: "ElementaryTypeName",
              src: "808:7:0",
              stateMutability: "nonpayable",
              typeDescriptions: {
                typeIdentifier: "t_address",
                typeString: "address"
              }
            },
            value: null,
            visibility: "internal"
          }],
          src: "785:37:0"
        },
        src: "773:50:0"
      }, {
        anonymous: false,
        documentation: null,
        id: 48,
        name: "Trust",
        nodeType: "EventDefinition",
        parameters: {
          id: 47,
          nodeType: "ParameterList",
          parameters: [{
            constant: false,
            id: 42,
            indexed: true,
            name: "from",
            nodeType: "VariableDeclaration",
            scope: 48,
            src: "840:20:0",
            stateVariable: false,
            storageLocation: "default",
            typeDescriptions: {
              typeIdentifier: "t_address",
              typeString: "address"
            },
            typeName: {
              id: 41,
              name: "address",
              nodeType: "ElementaryTypeName",
              src: "840:7:0",
              stateMutability: "nonpayable",
              typeDescriptions: {
                typeIdentifier: "t_address",
                typeString: "address"
              }
            },
            value: null,
            visibility: "internal"
          }, {
            constant: false,
            id: 44,
            indexed: true,
            name: "to",
            nodeType: "VariableDeclaration",
            scope: 48,
            src: "862:18:0",
            stateVariable: false,
            storageLocation: "default",
            typeDescriptions: {
              typeIdentifier: "t_address",
              typeString: "address"
            },
            typeName: {
              id: 43,
              name: "address",
              nodeType: "ElementaryTypeName",
              src: "862:7:0",
              stateMutability: "nonpayable",
              typeDescriptions: {
                typeIdentifier: "t_address",
                typeString: "address"
              }
            },
            value: null,
            visibility: "internal"
          }, {
            constant: false,
            id: 46,
            indexed: false,
            name: "limit",
            nodeType: "VariableDeclaration",
            scope: 48,
            src: "882:13:0",
            stateVariable: false,
            storageLocation: "default",
            typeDescriptions: {
              typeIdentifier: "t_uint256",
              typeString: "uint256"
            },
            typeName: {
              id: 45,
              name: "uint256",
              nodeType: "ElementaryTypeName",
              src: "882:7:0",
              typeDescriptions: {
                typeIdentifier: "t_uint256",
                typeString: "uint256"
              }
            },
            value: null,
            visibility: "internal"
          }],
          src: "839:57:0"
        },
        src: "828:69:0"
      }, {
        body: {
          id: 58,
          nodeType: "Block",
          src: "924:57:0",
          statements: [{
            expression: {
              argumentTypes: null,
              "arguments": [{
                argumentTypes: null,
                commonType: {
                  typeIdentifier: "t_address",
                  typeString: "address"
                },
                id: 54,
                isConstant: false,
                isLValue: false,
                isPure: false,
                lValueRequested: false,
                leftExpression: {
                  argumentTypes: null,
                  expression: {
                    argumentTypes: null,
                    id: 51,
                    name: "msg",
                    nodeType: "Identifier",
                    overloadedDeclarations: [],
                    referencedDeclaration: 1545,
                    src: "943:3:0",
                    typeDescriptions: {
                      typeIdentifier: "t_magic_message",
                      typeString: "msg"
                    }
                  },
                  id: 52,
                  isConstant: false,
                  isLValue: false,
                  isPure: false,
                  lValueRequested: false,
                  memberName: "sender",
                  nodeType: "MemberAccess",
                  referencedDeclaration: null,
                  src: "943:10:0",
                  typeDescriptions: {
                    typeIdentifier: "t_address_payable",
                    typeString: "address payable"
                  }
                },
                nodeType: "BinaryOperation",
                operator: "==",
                rightExpression: {
                  argumentTypes: null,
                  id: 53,
                  name: "owner",
                  nodeType: "Identifier",
                  overloadedDeclarations: [],
                  referencedDeclaration: 8,
                  src: "957:5:0",
                  typeDescriptions: {
                    typeIdentifier: "t_address",
                    typeString: "address"
                  }
                },
                src: "943:19:0",
                typeDescriptions: {
                  typeIdentifier: "t_bool",
                  typeString: "bool"
                }
              }],
              expression: {
                argumentTypes: [{
                  typeIdentifier: "t_bool",
                  typeString: "bool"
                }],
                id: 50,
                name: "require",
                nodeType: "Identifier",
                overloadedDeclarations: [1548, 1549],
                referencedDeclaration: 1548,
                src: "934:7:0",
                typeDescriptions: {
                  typeIdentifier: "t_function_require_pure$_t_bool_$returns$__$",
                  typeString: "function (bool) pure"
                }
              },
              id: 55,
              isConstant: false,
              isLValue: false,
              isPure: false,
              kind: "functionCall",
              lValueRequested: false,
              names: [],
              nodeType: "FunctionCall",
              src: "934:29:0",
              typeDescriptions: {
                typeIdentifier: "t_tuple$__$",
                typeString: "tuple()"
              }
            },
            id: 56,
            nodeType: "ExpressionStatement",
            src: "934:29:0"
          }, {
            id: 57,
            nodeType: "PlaceholderStatement",
            src: "973:1:0"
          }]
        },
        documentation: null,
        id: 59,
        name: "onlyOwner",
        nodeType: "ModifierDefinition",
        parameters: {
          id: 49,
          nodeType: "ParameterList",
          parameters: [],
          src: "921:2:0"
        },
        src: "903:78:0",
        visibility: "internal"
      }, {
        body: {
          id: 100,
          nodeType: "Block",
          src: "1108:207:0",
          statements: [{
            expression: {
              argumentTypes: null,
              "arguments": [{
                argumentTypes: null,
                commonType: {
                  typeIdentifier: "t_address",
                  typeString: "address"
                },
                id: 77,
                isConstant: false,
                isLValue: false,
                isPure: false,
                lValueRequested: false,
                leftExpression: {
                  argumentTypes: null,
                  id: 73,
                  name: "_owner",
                  nodeType: "Identifier",
                  overloadedDeclarations: [],
                  referencedDeclaration: 61,
                  src: "1127:6:0",
                  typeDescriptions: {
                    typeIdentifier: "t_address",
                    typeString: "address"
                  }
                },
                nodeType: "BinaryOperation",
                operator: "!=",
                rightExpression: {
                  argumentTypes: null,
                  "arguments": [{
                    argumentTypes: null,
                    hexValue: "30",
                    id: 75,
                    isConstant: false,
                    isLValue: false,
                    isPure: true,
                    kind: "number",
                    lValueRequested: false,
                    nodeType: "Literal",
                    src: "1145:1:0",
                    subdenomination: null,
                    typeDescriptions: {
                      typeIdentifier: "t_rational_0_by_1",
                      typeString: "int_const 0"
                    },
                    value: "0"
                  }],
                  expression: {
                    argumentTypes: [{
                      typeIdentifier: "t_rational_0_by_1",
                      typeString: "int_const 0"
                    }],
                    id: 74,
                    isConstant: false,
                    isLValue: false,
                    isPure: true,
                    lValueRequested: false,
                    nodeType: "ElementaryTypeNameExpression",
                    src: "1137:7:0",
                    typeDescriptions: {
                      typeIdentifier: "t_type$_t_address_$",
                      typeString: "type(address)"
                    },
                    typeName: "address"
                  },
                  id: 76,
                  isConstant: false,
                  isLValue: false,
                  isPure: true,
                  kind: "typeConversion",
                  lValueRequested: false,
                  names: [],
                  nodeType: "FunctionCall",
                  src: "1137:10:0",
                  typeDescriptions: {
                    typeIdentifier: "t_address_payable",
                    typeString: "address payable"
                  }
                },
                src: "1127:20:0",
                typeDescriptions: {
                  typeIdentifier: "t_bool",
                  typeString: "bool"
                }
              }],
              expression: {
                argumentTypes: [{
                  typeIdentifier: "t_bool",
                  typeString: "bool"
                }],
                id: 72,
                name: "require",
                nodeType: "Identifier",
                overloadedDeclarations: [1548, 1549],
                referencedDeclaration: 1548,
                src: "1118:7:0",
                typeDescriptions: {
                  typeIdentifier: "t_function_require_pure$_t_bool_$returns$__$",
                  typeString: "function (bool) pure"
                }
              },
              id: 78,
              isConstant: false,
              isLValue: false,
              isPure: false,
              kind: "functionCall",
              lValueRequested: false,
              names: [],
              nodeType: "FunctionCall",
              src: "1118:30:0",
              typeDescriptions: {
                typeIdentifier: "t_tuple$__$",
                typeString: "tuple()"
              }
            },
            id: 79,
            nodeType: "ExpressionStatement",
            src: "1118:30:0"
          }, {
            expression: {
              argumentTypes: null,
              id: 82,
              isConstant: false,
              isLValue: false,
              isPure: false,
              lValueRequested: false,
              leftHandSide: {
                argumentTypes: null,
                id: 80,
                name: "owner",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 8,
                src: "1158:5:0",
                typeDescriptions: {
                  typeIdentifier: "t_address",
                  typeString: "address"
                }
              },
              nodeType: "Assignment",
              operator: "=",
              rightHandSide: {
                argumentTypes: null,
                id: 81,
                name: "_owner",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 61,
                src: "1166:6:0",
                typeDescriptions: {
                  typeIdentifier: "t_address",
                  typeString: "address"
                }
              },
              src: "1158:14:0",
              typeDescriptions: {
                typeIdentifier: "t_address",
                typeString: "address"
              }
            },
            id: 83,
            nodeType: "ExpressionStatement",
            src: "1158:14:0"
          }, {
            expression: {
              argumentTypes: null,
              id: 86,
              isConstant: false,
              isLValue: false,
              isPure: false,
              lValueRequested: false,
              leftHandSide: {
                argumentTypes: null,
                id: 84,
                name: "issuanceRate",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 10,
                src: "1182:12:0",
                typeDescriptions: {
                  typeIdentifier: "t_uint256",
                  typeString: "uint256"
                }
              },
              nodeType: "Assignment",
              operator: "=",
              rightHandSide: {
                argumentTypes: null,
                id: 85,
                name: "_issuance",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 63,
                src: "1197:9:0",
                typeDescriptions: {
                  typeIdentifier: "t_uint256",
                  typeString: "uint256"
                }
              },
              src: "1182:24:0",
              typeDescriptions: {
                typeIdentifier: "t_uint256",
                typeString: "uint256"
              }
            },
            id: 87,
            nodeType: "ExpressionStatement",
            src: "1182:24:0"
          }, {
            expression: {
              argumentTypes: null,
              id: 90,
              isConstant: false,
              isLValue: false,
              isPure: false,
              lValueRequested: false,
              leftHandSide: {
                argumentTypes: null,
                id: 88,
                name: "demurrageRate",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 12,
                src: "1216:13:0",
                typeDescriptions: {
                  typeIdentifier: "t_uint256",
                  typeString: "uint256"
                }
              },
              nodeType: "Assignment",
              operator: "=",
              rightHandSide: {
                argumentTypes: null,
                id: 89,
                name: "_demurrage",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 65,
                src: "1232:10:0",
                typeDescriptions: {
                  typeIdentifier: "t_uint256",
                  typeString: "uint256"
                }
              },
              src: "1216:26:0",
              typeDescriptions: {
                typeIdentifier: "t_uint256",
                typeString: "uint256"
              }
            },
            id: 91,
            nodeType: "ExpressionStatement",
            src: "1216:26:0"
          }, {
            expression: {
              argumentTypes: null,
              id: 94,
              isConstant: false,
              isLValue: false,
              isPure: false,
              lValueRequested: false,
              leftHandSide: {
                argumentTypes: null,
                id: 92,
                name: "symbol",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 14,
                src: "1252:6:0",
                typeDescriptions: {
                  typeIdentifier: "t_string_storage",
                  typeString: "string storage ref"
                }
              },
              nodeType: "Assignment",
              operator: "=",
              rightHandSide: {
                argumentTypes: null,
                id: 93,
                name: "_symbol",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 67,
                src: "1261:7:0",
                typeDescriptions: {
                  typeIdentifier: "t_string_memory_ptr",
                  typeString: "string memory"
                }
              },
              src: "1252:16:0",
              typeDescriptions: {
                typeIdentifier: "t_string_storage",
                typeString: "string storage ref"
              }
            },
            id: 95,
            nodeType: "ExpressionStatement",
            src: "1252:16:0"
          }, {
            expression: {
              argumentTypes: null,
              id: 98,
              isConstant: false,
              isLValue: false,
              isPure: false,
              lValueRequested: false,
              leftHandSide: {
                argumentTypes: null,
                id: 96,
                name: "initialPayout",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 16,
                src: "1278:13:0",
                typeDescriptions: {
                  typeIdentifier: "t_uint256",
                  typeString: "uint256"
                }
              },
              nodeType: "Assignment",
              operator: "=",
              rightHandSide: {
                argumentTypes: null,
                id: 97,
                name: "_initialPayout",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 69,
                src: "1294:14:0",
                typeDescriptions: {
                  typeIdentifier: "t_uint256",
                  typeString: "uint256"
                }
              },
              src: "1278:30:0",
              typeDescriptions: {
                typeIdentifier: "t_uint256",
                typeString: "uint256"
              }
            },
            id: 99,
            nodeType: "ExpressionStatement",
            src: "1278:30:0"
          }]
        },
        documentation: null,
        id: 101,
        implemented: true,
        kind: "constructor",
        modifiers: [],
        name: "",
        nodeType: "FunctionDefinition",
        parameters: {
          id: 70,
          nodeType: "ParameterList",
          parameters: [{
            constant: false,
            id: 61,
            name: "_owner",
            nodeType: "VariableDeclaration",
            scope: 101,
            src: "999:14:0",
            stateVariable: false,
            storageLocation: "default",
            typeDescriptions: {
              typeIdentifier: "t_address",
              typeString: "address"
            },
            typeName: {
              id: 60,
              name: "address",
              nodeType: "ElementaryTypeName",
              src: "999:7:0",
              stateMutability: "nonpayable",
              typeDescriptions: {
                typeIdentifier: "t_address",
                typeString: "address"
              }
            },
            value: null,
            visibility: "internal"
          }, {
            constant: false,
            id: 63,
            name: "_issuance",
            nodeType: "VariableDeclaration",
            scope: 101,
            src: "1015:17:0",
            stateVariable: false,
            storageLocation: "default",
            typeDescriptions: {
              typeIdentifier: "t_uint256",
              typeString: "uint256"
            },
            typeName: {
              id: 62,
              name: "uint256",
              nodeType: "ElementaryTypeName",
              src: "1015:7:0",
              typeDescriptions: {
                typeIdentifier: "t_uint256",
                typeString: "uint256"
              }
            },
            value: null,
            visibility: "internal"
          }, {
            constant: false,
            id: 65,
            name: "_demurrage",
            nodeType: "VariableDeclaration",
            scope: 101,
            src: "1034:18:0",
            stateVariable: false,
            storageLocation: "default",
            typeDescriptions: {
              typeIdentifier: "t_uint256",
              typeString: "uint256"
            },
            typeName: {
              id: 64,
              name: "uint256",
              nodeType: "ElementaryTypeName",
              src: "1034:7:0",
              typeDescriptions: {
                typeIdentifier: "t_uint256",
                typeString: "uint256"
              }
            },
            value: null,
            visibility: "internal"
          }, {
            constant: false,
            id: 67,
            name: "_symbol",
            nodeType: "VariableDeclaration",
            scope: 101,
            src: "1054:21:0",
            stateVariable: false,
            storageLocation: "memory",
            typeDescriptions: {
              typeIdentifier: "t_string_memory_ptr",
              typeString: "string"
            },
            typeName: {
              id: 66,
              name: "string",
              nodeType: "ElementaryTypeName",
              src: "1054:6:0",
              typeDescriptions: {
                typeIdentifier: "t_string_storage_ptr",
                typeString: "string"
              }
            },
            value: null,
            visibility: "internal"
          }, {
            constant: false,
            id: 69,
            name: "_initialPayout",
            nodeType: "VariableDeclaration",
            scope: 101,
            src: "1077:22:0",
            stateVariable: false,
            storageLocation: "default",
            typeDescriptions: {
              typeIdentifier: "t_uint256",
              typeString: "uint256"
            },
            typeName: {
              id: 68,
              name: "uint256",
              nodeType: "ElementaryTypeName",
              src: "1077:7:0",
              typeDescriptions: {
                typeIdentifier: "t_uint256",
                typeString: "uint256"
              }
            },
            value: null,
            visibility: "internal"
          }],
          src: "998:102:0"
        },
        returnParameters: {
          id: 71,
          nodeType: "ParameterList",
          parameters: [],
          src: "1108:0:0"
        },
        scope: 442,
        src: "987:328:0",
        stateMutability: "nonpayable",
        superFunction: null,
        visibility: "public"
      }, {
        body: {
          id: 124,
          nodeType: "Block",
          src: "1393:97:0",
          statements: [{
            expression: {
              argumentTypes: null,
              "arguments": [{
                argumentTypes: null,
                commonType: {
                  typeIdentifier: "t_address",
                  typeString: "address"
                },
                id: 115,
                isConstant: false,
                isLValue: false,
                isPure: false,
                lValueRequested: false,
                leftExpression: {
                  argumentTypes: null,
                  id: 111,
                  name: "_newOwner",
                  nodeType: "Identifier",
                  overloadedDeclarations: [],
                  referencedDeclaration: 103,
                  src: "1411:9:0",
                  typeDescriptions: {
                    typeIdentifier: "t_address",
                    typeString: "address"
                  }
                },
                nodeType: "BinaryOperation",
                operator: "!=",
                rightExpression: {
                  argumentTypes: null,
                  "arguments": [{
                    argumentTypes: null,
                    hexValue: "30",
                    id: 113,
                    isConstant: false,
                    isLValue: false,
                    isPure: true,
                    kind: "number",
                    lValueRequested: false,
                    nodeType: "Literal",
                    src: "1432:1:0",
                    subdenomination: null,
                    typeDescriptions: {
                      typeIdentifier: "t_rational_0_by_1",
                      typeString: "int_const 0"
                    },
                    value: "0"
                  }],
                  expression: {
                    argumentTypes: [{
                      typeIdentifier: "t_rational_0_by_1",
                      typeString: "int_const 0"
                    }],
                    id: 112,
                    isConstant: false,
                    isLValue: false,
                    isPure: true,
                    lValueRequested: false,
                    nodeType: "ElementaryTypeNameExpression",
                    src: "1424:7:0",
                    typeDescriptions: {
                      typeIdentifier: "t_type$_t_address_$",
                      typeString: "type(address)"
                    },
                    typeName: "address"
                  },
                  id: 114,
                  isConstant: false,
                  isLValue: false,
                  isPure: true,
                  kind: "typeConversion",
                  lValueRequested: false,
                  names: [],
                  nodeType: "FunctionCall",
                  src: "1424:10:0",
                  typeDescriptions: {
                    typeIdentifier: "t_address_payable",
                    typeString: "address payable"
                  }
                },
                src: "1411:23:0",
                typeDescriptions: {
                  typeIdentifier: "t_bool",
                  typeString: "bool"
                }
              }],
              expression: {
                argumentTypes: [{
                  typeIdentifier: "t_bool",
                  typeString: "bool"
                }],
                id: 110,
                name: "require",
                nodeType: "Identifier",
                overloadedDeclarations: [1548, 1549],
                referencedDeclaration: 1548,
                src: "1403:7:0",
                typeDescriptions: {
                  typeIdentifier: "t_function_require_pure$_t_bool_$returns$__$",
                  typeString: "function (bool) pure"
                }
              },
              id: 116,
              isConstant: false,
              isLValue: false,
              isPure: false,
              kind: "functionCall",
              lValueRequested: false,
              names: [],
              nodeType: "FunctionCall",
              src: "1403:32:0",
              typeDescriptions: {
                typeIdentifier: "t_tuple$__$",
                typeString: "tuple()"
              }
            },
            id: 117,
            nodeType: "ExpressionStatement",
            src: "1403:32:0"
          }, {
            expression: {
              argumentTypes: null,
              id: 120,
              isConstant: false,
              isLValue: false,
              isPure: false,
              lValueRequested: false,
              leftHandSide: {
                argumentTypes: null,
                id: 118,
                name: "owner",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 8,
                src: "1445:5:0",
                typeDescriptions: {
                  typeIdentifier: "t_address",
                  typeString: "address"
                }
              },
              nodeType: "Assignment",
              operator: "=",
              rightHandSide: {
                argumentTypes: null,
                id: 119,
                name: "_newOwner",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 103,
                src: "1453:9:0",
                typeDescriptions: {
                  typeIdentifier: "t_address",
                  typeString: "address"
                }
              },
              src: "1445:17:0",
              typeDescriptions: {
                typeIdentifier: "t_address",
                typeString: "address"
              }
            },
            id: 121,
            nodeType: "ExpressionStatement",
            src: "1445:17:0"
          }, {
            expression: {
              argumentTypes: null,
              hexValue: "74727565",
              id: 122,
              isConstant: false,
              isLValue: false,
              isPure: true,
              kind: "bool",
              lValueRequested: false,
              nodeType: "Literal",
              src: "1479:4:0",
              subdenomination: null,
              typeDescriptions: {
                typeIdentifier: "t_bool",
                typeString: "bool"
              },
              value: "true"
            },
            functionReturnParameters: 109,
            id: 123,
            nodeType: "Return",
            src: "1472:11:0"
          }]
        },
        documentation: null,
        id: 125,
        implemented: true,
        kind: "function",
        modifiers: [{
          "arguments": null,
          id: 106,
          modifierName: {
            argumentTypes: null,
            id: 105,
            name: "onlyOwner",
            nodeType: "Identifier",
            overloadedDeclarations: [],
            referencedDeclaration: 59,
            src: "1368:9:0",
            typeDescriptions: {
              typeIdentifier: "t_modifier$__$",
              typeString: "modifier ()"
            }
          },
          nodeType: "ModifierInvocation",
          src: "1368:9:0"
        }],
        name: "changeOwner",
        nodeType: "FunctionDefinition",
        parameters: {
          id: 104,
          nodeType: "ParameterList",
          parameters: [{
            constant: false,
            id: 103,
            name: "_newOwner",
            nodeType: "VariableDeclaration",
            scope: 125,
            src: "1342:17:0",
            stateVariable: false,
            storageLocation: "default",
            typeDescriptions: {
              typeIdentifier: "t_address",
              typeString: "address"
            },
            typeName: {
              id: 102,
              name: "address",
              nodeType: "ElementaryTypeName",
              src: "1342:7:0",
              stateMutability: "nonpayable",
              typeDescriptions: {
                typeIdentifier: "t_address",
                typeString: "address"
              }
            },
            value: null,
            visibility: "internal"
          }],
          src: "1341:19:0"
        },
        returnParameters: {
          id: 109,
          nodeType: "ParameterList",
          parameters: [{
            constant: false,
            id: 108,
            name: "",
            nodeType: "VariableDeclaration",
            scope: 125,
            src: "1387:4:0",
            stateVariable: false,
            storageLocation: "default",
            typeDescriptions: {
              typeIdentifier: "t_bool",
              typeString: "bool"
            },
            typeName: {
              id: 107,
              name: "bool",
              nodeType: "ElementaryTypeName",
              src: "1387:4:0",
              typeDescriptions: {
                typeIdentifier: "t_bool",
                typeString: "bool"
              }
            },
            value: null,
            visibility: "internal"
          }],
          src: "1386:6:0"
        },
        scope: 442,
        src: "1321:169:0",
        stateMutability: "nonpayable",
        superFunction: null,
        visibility: "public"
      }, {
        body: {
          id: 152,
          nodeType: "Block",
          src: "1585:109:0",
          statements: [{
            expression: {
              argumentTypes: null,
              "arguments": [{
                argumentTypes: null,
                commonType: {
                  typeIdentifier: "t_address",
                  typeString: "address"
                },
                id: 141,
                isConstant: false,
                isLValue: false,
                isPure: false,
                lValueRequested: false,
                leftExpression: {
                  argumentTypes: null,
                  id: 137,
                  name: "_relayer",
                  nodeType: "Identifier",
                  overloadedDeclarations: [],
                  referencedDeclaration: 127,
                  src: "1603:8:0",
                  typeDescriptions: {
                    typeIdentifier: "t_address",
                    typeString: "address"
                  }
                },
                nodeType: "BinaryOperation",
                operator: "!=",
                rightExpression: {
                  argumentTypes: null,
                  "arguments": [{
                    argumentTypes: null,
                    hexValue: "30",
                    id: 139,
                    isConstant: false,
                    isLValue: false,
                    isPure: true,
                    kind: "number",
                    lValueRequested: false,
                    nodeType: "Literal",
                    src: "1623:1:0",
                    subdenomination: null,
                    typeDescriptions: {
                      typeIdentifier: "t_rational_0_by_1",
                      typeString: "int_const 0"
                    },
                    value: "0"
                  }],
                  expression: {
                    argumentTypes: [{
                      typeIdentifier: "t_rational_0_by_1",
                      typeString: "int_const 0"
                    }],
                    id: 138,
                    isConstant: false,
                    isLValue: false,
                    isPure: true,
                    lValueRequested: false,
                    nodeType: "ElementaryTypeNameExpression",
                    src: "1615:7:0",
                    typeDescriptions: {
                      typeIdentifier: "t_type$_t_address_$",
                      typeString: "type(address)"
                    },
                    typeName: "address"
                  },
                  id: 140,
                  isConstant: false,
                  isLValue: false,
                  isPure: true,
                  kind: "typeConversion",
                  lValueRequested: false,
                  names: [],
                  nodeType: "FunctionCall",
                  src: "1615:10:0",
                  typeDescriptions: {
                    typeIdentifier: "t_address_payable",
                    typeString: "address payable"
                  }
                },
                src: "1603:22:0",
                typeDescriptions: {
                  typeIdentifier: "t_bool",
                  typeString: "bool"
                }
              }],
              expression: {
                argumentTypes: [{
                  typeIdentifier: "t_bool",
                  typeString: "bool"
                }],
                id: 136,
                name: "require",
                nodeType: "Identifier",
                overloadedDeclarations: [1548, 1549],
                referencedDeclaration: 1548,
                src: "1595:7:0",
                typeDescriptions: {
                  typeIdentifier: "t_function_require_pure$_t_bool_$returns$__$",
                  typeString: "function (bool) pure"
                }
              },
              id: 142,
              isConstant: false,
              isLValue: false,
              isPure: false,
              kind: "functionCall",
              lValueRequested: false,
              names: [],
              nodeType: "FunctionCall",
              src: "1595:31:0",
              typeDescriptions: {
                typeIdentifier: "t_tuple$__$",
                typeString: "tuple()"
              }
            },
            id: 143,
            nodeType: "ExpressionStatement",
            src: "1595:31:0"
          }, {
            expression: {
              argumentTypes: null,
              id: 148,
              isConstant: false,
              isLValue: false,
              isPure: false,
              lValueRequested: false,
              leftHandSide: {
                argumentTypes: null,
                baseExpression: {
                  argumentTypes: null,
                  id: 144,
                  name: "relayers",
                  nodeType: "Identifier",
                  overloadedDeclarations: [],
                  referencedDeclaration: 20,
                  src: "1636:8:0",
                  typeDescriptions: {
                    typeIdentifier: "t_mapping$_t_address_$_t_bool_$",
                    typeString: "mapping(address => bool)"
                  }
                },
                id: 146,
                indexExpression: {
                  argumentTypes: null,
                  id: 145,
                  name: "_relayer",
                  nodeType: "Identifier",
                  overloadedDeclarations: [],
                  referencedDeclaration: 127,
                  src: "1645:8:0",
                  typeDescriptions: {
                    typeIdentifier: "t_address",
                    typeString: "address"
                  }
                },
                isConstant: false,
                isLValue: true,
                isPure: false,
                lValueRequested: true,
                nodeType: "IndexAccess",
                src: "1636:18:0",
                typeDescriptions: {
                  typeIdentifier: "t_bool",
                  typeString: "bool"
                }
              },
              nodeType: "Assignment",
              operator: "=",
              rightHandSide: {
                argumentTypes: null,
                id: 147,
                name: "isRelayer",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 129,
                src: "1657:9:0",
                typeDescriptions: {
                  typeIdentifier: "t_bool",
                  typeString: "bool"
                }
              },
              src: "1636:30:0",
              typeDescriptions: {
                typeIdentifier: "t_bool",
                typeString: "bool"
              }
            },
            id: 149,
            nodeType: "ExpressionStatement",
            src: "1636:30:0"
          }, {
            expression: {
              argumentTypes: null,
              hexValue: "74727565",
              id: 150,
              isConstant: false,
              isLValue: false,
              isPure: true,
              kind: "bool",
              lValueRequested: false,
              nodeType: "Literal",
              src: "1683:4:0",
              subdenomination: null,
              typeDescriptions: {
                typeIdentifier: "t_bool",
                typeString: "bool"
              },
              value: "true"
            },
            functionReturnParameters: 135,
            id: 151,
            nodeType: "Return",
            src: "1676:11:0"
          }]
        },
        documentation: null,
        id: 153,
        implemented: true,
        kind: "function",
        modifiers: [{
          "arguments": null,
          id: 132,
          modifierName: {
            argumentTypes: null,
            id: 131,
            name: "onlyOwner",
            nodeType: "Identifier",
            overloadedDeclarations: [],
            referencedDeclaration: 59,
            src: "1560:9:0",
            typeDescriptions: {
              typeIdentifier: "t_modifier$__$",
              typeString: "modifier ()"
            }
          },
          nodeType: "ModifierInvocation",
          src: "1560:9:0"
        }],
        name: "updateRelayer",
        nodeType: "FunctionDefinition",
        parameters: {
          id: 130,
          nodeType: "ParameterList",
          parameters: [{
            constant: false,
            id: 127,
            name: "_relayer",
            nodeType: "VariableDeclaration",
            scope: 153,
            src: "1519:16:0",
            stateVariable: false,
            storageLocation: "default",
            typeDescriptions: {
              typeIdentifier: "t_address",
              typeString: "address"
            },
            typeName: {
              id: 126,
              name: "address",
              nodeType: "ElementaryTypeName",
              src: "1519:7:0",
              stateMutability: "nonpayable",
              typeDescriptions: {
                typeIdentifier: "t_address",
                typeString: "address"
              }
            },
            value: null,
            visibility: "internal"
          }, {
            constant: false,
            id: 129,
            name: "isRelayer",
            nodeType: "VariableDeclaration",
            scope: 153,
            src: "1537:14:0",
            stateVariable: false,
            storageLocation: "default",
            typeDescriptions: {
              typeIdentifier: "t_bool",
              typeString: "bool"
            },
            typeName: {
              id: 128,
              name: "bool",
              nodeType: "ElementaryTypeName",
              src: "1537:4:0",
              typeDescriptions: {
                typeIdentifier: "t_bool",
                typeString: "bool"
              }
            },
            value: null,
            visibility: "internal"
          }],
          src: "1518:34:0"
        },
        returnParameters: {
          id: 135,
          nodeType: "ParameterList",
          parameters: [{
            constant: false,
            id: 134,
            name: "",
            nodeType: "VariableDeclaration",
            scope: 153,
            src: "1579:4:0",
            stateVariable: false,
            storageLocation: "default",
            typeDescriptions: {
              typeIdentifier: "t_bool",
              typeString: "bool"
            },
            typeName: {
              id: 133,
              name: "bool",
              nodeType: "ElementaryTypeName",
              src: "1579:4:0",
              typeDescriptions: {
                typeIdentifier: "t_bool",
                typeString: "bool"
              }
            },
            value: null,
            visibility: "internal"
          }],
          src: "1578:6:0"
        },
        scope: 442,
        src: "1496:198:0",
        stateMutability: "nonpayable",
        superFunction: null,
        visibility: "public"
      }, {
        body: {
          id: 168,
          nodeType: "Block",
          src: "1775:107:0",
          statements: [{
            expression: {
              argumentTypes: null,
              id: 164,
              isConstant: false,
              isLValue: false,
              isPure: false,
              lValueRequested: false,
              leftHandSide: {
                argumentTypes: null,
                id: 162,
                name: "issuanceRate",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 10,
                src: "1830:12:0",
                typeDescriptions: {
                  typeIdentifier: "t_uint256",
                  typeString: "uint256"
                }
              },
              nodeType: "Assignment",
              operator: "=",
              rightHandSide: {
                argumentTypes: null,
                id: 163,
                name: "_issuance",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 155,
                src: "1845:9:0",
                typeDescriptions: {
                  typeIdentifier: "t_uint256",
                  typeString: "uint256"
                }
              },
              src: "1830:24:0",
              typeDescriptions: {
                typeIdentifier: "t_uint256",
                typeString: "uint256"
              }
            },
            id: 165,
            nodeType: "ExpressionStatement",
            src: "1830:24:0"
          }, {
            expression: {
              argumentTypes: null,
              hexValue: "74727565",
              id: 166,
              isConstant: false,
              isLValue: false,
              isPure: true,
              kind: "bool",
              lValueRequested: false,
              nodeType: "Literal",
              src: "1871:4:0",
              subdenomination: null,
              typeDescriptions: {
                typeIdentifier: "t_bool",
                typeString: "bool"
              },
              value: "true"
            },
            functionReturnParameters: 161,
            id: 167,
            nodeType: "Return",
            src: "1864:11:0"
          }]
        },
        documentation: null,
        id: 169,
        implemented: true,
        kind: "function",
        modifiers: [{
          "arguments": null,
          id: 158,
          modifierName: {
            argumentTypes: null,
            id: 157,
            name: "onlyOwner",
            nodeType: "Identifier",
            overloadedDeclarations: [],
            referencedDeclaration: 59,
            src: "1750:9:0",
            typeDescriptions: {
              typeIdentifier: "t_modifier$__$",
              typeString: "modifier ()"
            }
          },
          nodeType: "ModifierInvocation",
          src: "1750:9:0"
        }],
        name: "updateIssuance",
        nodeType: "FunctionDefinition",
        parameters: {
          id: 156,
          nodeType: "ParameterList",
          parameters: [{
            constant: false,
            id: 155,
            name: "_issuance",
            nodeType: "VariableDeclaration",
            scope: 169,
            src: "1724:17:0",
            stateVariable: false,
            storageLocation: "default",
            typeDescriptions: {
              typeIdentifier: "t_uint256",
              typeString: "uint256"
            },
            typeName: {
              id: 154,
              name: "uint256",
              nodeType: "ElementaryTypeName",
              src: "1724:7:0",
              typeDescriptions: {
                typeIdentifier: "t_uint256",
                typeString: "uint256"
              }
            },
            value: null,
            visibility: "internal"
          }],
          src: "1723:19:0"
        },
        returnParameters: {
          id: 161,
          nodeType: "ParameterList",
          parameters: [{
            constant: false,
            id: 160,
            name: "",
            nodeType: "VariableDeclaration",
            scope: 169,
            src: "1769:4:0",
            stateVariable: false,
            storageLocation: "default",
            typeDescriptions: {
              typeIdentifier: "t_bool",
              typeString: "bool"
            },
            typeName: {
              id: 159,
              name: "bool",
              nodeType: "ElementaryTypeName",
              src: "1769:4:0",
              typeDescriptions: {
                typeIdentifier: "t_bool",
                typeString: "bool"
              }
            },
            value: null,
            visibility: "internal"
          }],
          src: "1768:6:0"
        },
        scope: 442,
        src: "1700:182:0",
        stateMutability: "nonpayable",
        superFunction: null,
        visibility: "public"
      }, {
        body: {
          id: 184,
          nodeType: "Block",
          src: "1965:110:0",
          statements: [{
            expression: {
              argumentTypes: null,
              id: 180,
              isConstant: false,
              isLValue: false,
              isPure: false,
              lValueRequested: false,
              leftHandSide: {
                argumentTypes: null,
                id: 178,
                name: "demurrageRate",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 12,
                src: "2021:13:0",
                typeDescriptions: {
                  typeIdentifier: "t_uint256",
                  typeString: "uint256"
                }
              },
              nodeType: "Assignment",
              operator: "=",
              rightHandSide: {
                argumentTypes: null,
                id: 179,
                name: "_demurrage",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 171,
                src: "2037:10:0",
                typeDescriptions: {
                  typeIdentifier: "t_uint256",
                  typeString: "uint256"
                }
              },
              src: "2021:26:0",
              typeDescriptions: {
                typeIdentifier: "t_uint256",
                typeString: "uint256"
              }
            },
            id: 181,
            nodeType: "ExpressionStatement",
            src: "2021:26:0"
          }, {
            expression: {
              argumentTypes: null,
              hexValue: "74727565",
              id: 182,
              isConstant: false,
              isLValue: false,
              isPure: true,
              kind: "bool",
              lValueRequested: false,
              nodeType: "Literal",
              src: "2064:4:0",
              subdenomination: null,
              typeDescriptions: {
                typeIdentifier: "t_bool",
                typeString: "bool"
              },
              value: "true"
            },
            functionReturnParameters: 177,
            id: 183,
            nodeType: "Return",
            src: "2057:11:0"
          }]
        },
        documentation: null,
        id: 185,
        implemented: true,
        kind: "function",
        modifiers: [{
          "arguments": null,
          id: 174,
          modifierName: {
            argumentTypes: null,
            id: 173,
            name: "onlyOwner",
            nodeType: "Identifier",
            overloadedDeclarations: [],
            referencedDeclaration: 59,
            src: "1940:9:0",
            typeDescriptions: {
              typeIdentifier: "t_modifier$__$",
              typeString: "modifier ()"
            }
          },
          nodeType: "ModifierInvocation",
          src: "1940:9:0"
        }],
        name: "updateDemurrage",
        nodeType: "FunctionDefinition",
        parameters: {
          id: 172,
          nodeType: "ParameterList",
          parameters: [{
            constant: false,
            id: 171,
            name: "_demurrage",
            nodeType: "VariableDeclaration",
            scope: 185,
            src: "1913:18:0",
            stateVariable: false,
            storageLocation: "default",
            typeDescriptions: {
              typeIdentifier: "t_uint256",
              typeString: "uint256"
            },
            typeName: {
              id: 170,
              name: "uint256",
              nodeType: "ElementaryTypeName",
              src: "1913:7:0",
              typeDescriptions: {
                typeIdentifier: "t_uint256",
                typeString: "uint256"
              }
            },
            value: null,
            visibility: "internal"
          }],
          src: "1912:20:0"
        },
        returnParameters: {
          id: 177,
          nodeType: "ParameterList",
          parameters: [{
            constant: false,
            id: 176,
            name: "",
            nodeType: "VariableDeclaration",
            scope: 185,
            src: "1959:4:0",
            stateVariable: false,
            storageLocation: "default",
            typeDescriptions: {
              typeIdentifier: "t_bool",
              typeString: "bool"
            },
            typeName: {
              id: 175,
              name: "bool",
              nodeType: "ElementaryTypeName",
              src: "1959:4:0",
              typeDescriptions: {
                typeIdentifier: "t_bool",
                typeString: "bool"
              }
            },
            value: null,
            visibility: "internal"
          }],
          src: "1958:6:0"
        },
        scope: 442,
        src: "1888:187:0",
        stateMutability: "nonpayable",
        superFunction: null,
        visibility: "public"
      }, {
        body: {
          id: 200,
          nodeType: "Block",
          src: "2158:106:0",
          statements: [{
            expression: {
              argumentTypes: null,
              id: 196,
              isConstant: false,
              isLValue: false,
              isPure: false,
              lValueRequested: false,
              leftHandSide: {
                argumentTypes: null,
                id: 194,
                name: "symbol",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 14,
                src: "2220:6:0",
                typeDescriptions: {
                  typeIdentifier: "t_string_storage",
                  typeString: "string storage ref"
                }
              },
              nodeType: "Assignment",
              operator: "=",
              rightHandSide: {
                argumentTypes: null,
                id: 195,
                name: "_symbol",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 187,
                src: "2229:7:0",
                typeDescriptions: {
                  typeIdentifier: "t_string_memory_ptr",
                  typeString: "string memory"
                }
              },
              src: "2220:16:0",
              typeDescriptions: {
                typeIdentifier: "t_string_storage",
                typeString: "string storage ref"
              }
            },
            id: 197,
            nodeType: "ExpressionStatement",
            src: "2220:16:0"
          }, {
            expression: {
              argumentTypes: null,
              hexValue: "74727565",
              id: 198,
              isConstant: false,
              isLValue: false,
              isPure: true,
              kind: "bool",
              lValueRequested: false,
              nodeType: "Literal",
              src: "2253:4:0",
              subdenomination: null,
              typeDescriptions: {
                typeIdentifier: "t_bool",
                typeString: "bool"
              },
              value: "true"
            },
            functionReturnParameters: 193,
            id: 199,
            nodeType: "Return",
            src: "2246:11:0"
          }]
        },
        documentation: null,
        id: 201,
        implemented: true,
        kind: "function",
        modifiers: [{
          "arguments": null,
          id: 190,
          modifierName: {
            argumentTypes: null,
            id: 189,
            name: "onlyOwner",
            nodeType: "Identifier",
            overloadedDeclarations: [],
            referencedDeclaration: 59,
            src: "2133:9:0",
            typeDescriptions: {
              typeIdentifier: "t_modifier$__$",
              typeString: "modifier ()"
            }
          },
          nodeType: "ModifierInvocation",
          src: "2133:9:0"
        }],
        name: "updateSymbol",
        nodeType: "FunctionDefinition",
        parameters: {
          id: 188,
          nodeType: "ParameterList",
          parameters: [{
            constant: false,
            id: 187,
            name: "_symbol",
            nodeType: "VariableDeclaration",
            scope: 201,
            src: "2103:21:0",
            stateVariable: false,
            storageLocation: "memory",
            typeDescriptions: {
              typeIdentifier: "t_string_memory_ptr",
              typeString: "string"
            },
            typeName: {
              id: 186,
              name: "string",
              nodeType: "ElementaryTypeName",
              src: "2103:6:0",
              typeDescriptions: {
                typeIdentifier: "t_string_storage_ptr",
                typeString: "string"
              }
            },
            value: null,
            visibility: "internal"
          }],
          src: "2102:23:0"
        },
        returnParameters: {
          id: 193,
          nodeType: "ParameterList",
          parameters: [{
            constant: false,
            id: 192,
            name: "",
            nodeType: "VariableDeclaration",
            scope: 201,
            src: "2152:4:0",
            stateVariable: false,
            storageLocation: "default",
            typeDescriptions: {
              typeIdentifier: "t_bool",
              typeString: "bool"
            },
            typeName: {
              id: 191,
              name: "bool",
              nodeType: "ElementaryTypeName",
              src: "2152:4:0",
              typeDescriptions: {
                typeIdentifier: "t_bool",
                typeString: "bool"
              }
            },
            value: null,
            visibility: "internal"
          }],
          src: "2151:6:0"
        },
        scope: 442,
        src: "2081:183:0",
        stateMutability: "nonpayable",
        superFunction: null,
        visibility: "public"
      }, {
        body: {
          id: 209,
          nodeType: "Block",
          src: "2313:27:0",
          statements: [{
            expression: {
              argumentTypes: null,
              expression: {
                argumentTypes: null,
                id: 206,
                name: "block",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 1535,
                src: "2322:5:0",
                typeDescriptions: {
                  typeIdentifier: "t_magic_block",
                  typeString: "block"
                }
              },
              id: 207,
              isConstant: false,
              isLValue: false,
              isPure: false,
              lValueRequested: false,
              memberName: "timestamp",
              nodeType: "MemberAccess",
              referencedDeclaration: null,
              src: "2322:15:0",
              typeDescriptions: {
                typeIdentifier: "t_uint256",
                typeString: "uint256"
              }
            },
            functionReturnParameters: 205,
            id: 208,
            nodeType: "Return",
            src: "2315:22:0"
          }]
        },
        documentation: null,
        id: 210,
        implemented: true,
        kind: "function",
        modifiers: [],
        name: "time",
        nodeType: "FunctionDefinition",
        parameters: {
          id: 202,
          nodeType: "ParameterList",
          parameters: [],
          src: "2283:2:0"
        },
        returnParameters: {
          id: 205,
          nodeType: "ParameterList",
          parameters: [{
            constant: false,
            id: 204,
            name: "",
            nodeType: "VariableDeclaration",
            scope: 210,
            src: "2307:4:0",
            stateVariable: false,
            storageLocation: "default",
            typeDescriptions: {
              typeIdentifier: "t_uint256",
              typeString: "uint256"
            },
            typeName: {
              id: 203,
              name: "uint",
              nodeType: "ElementaryTypeName",
              src: "2307:4:0",
              typeDescriptions: {
                typeIdentifier: "t_uint256",
                typeString: "uint256"
              }
            },
            value: null,
            visibility: "internal"
          }],
          src: "2306:6:0"
        },
        scope: 442,
        src: "2270:70:0",
        stateMutability: "view",
        superFunction: null,
        visibility: "public"
      }, {
        body: {
          id: 228,
          nodeType: "Block",
          src: "2410:70:0",
          statements: [{
            expression: {
              argumentTypes: null,
              components: [{
                argumentTypes: null,
                commonType: {
                  typeIdentifier: "t_address",
                  typeString: "address"
                },
                id: 225,
                isConstant: false,
                isLValue: false,
                isPure: false,
                lValueRequested: false,
                leftExpression: {
                  argumentTypes: null,
                  "arguments": [{
                    argumentTypes: null,
                    baseExpression: {
                      argumentTypes: null,
                      id: 218,
                      name: "userToToken",
                      nodeType: "Identifier",
                      overloadedDeclarations: [],
                      referencedDeclaration: 24,
                      src: "2436:11:0",
                      typeDescriptions: {
                        typeIdentifier: "t_mapping$_t_address_$_t_contract$_Token_$794_$",
                        typeString: "mapping(address => contract Token)"
                      }
                    },
                    id: 220,
                    indexExpression: {
                      argumentTypes: null,
                      id: 219,
                      name: "_address",
                      nodeType: "Identifier",
                      overloadedDeclarations: [],
                      referencedDeclaration: 212,
                      src: "2448:8:0",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      }
                    },
                    isConstant: false,
                    isLValue: true,
                    isPure: false,
                    lValueRequested: false,
                    nodeType: "IndexAccess",
                    src: "2436:21:0",
                    typeDescriptions: {
                      typeIdentifier: "t_contract$_Token_$794",
                      typeString: "contract Token"
                    }
                  }],
                  expression: {
                    argumentTypes: [{
                      typeIdentifier: "t_contract$_Token_$794",
                      typeString: "contract Token"
                    }],
                    id: 217,
                    isConstant: false,
                    isLValue: false,
                    isPure: true,
                    lValueRequested: false,
                    nodeType: "ElementaryTypeNameExpression",
                    src: "2428:7:0",
                    typeDescriptions: {
                      typeIdentifier: "t_type$_t_address_$",
                      typeString: "type(address)"
                    },
                    typeName: "address"
                  },
                  id: 221,
                  isConstant: false,
                  isLValue: false,
                  isPure: false,
                  kind: "typeConversion",
                  lValueRequested: false,
                  names: [],
                  nodeType: "FunctionCall",
                  src: "2428:30:0",
                  typeDescriptions: {
                    typeIdentifier: "t_address",
                    typeString: "address"
                  }
                },
                nodeType: "BinaryOperation",
                operator: "!=",
                rightExpression: {
                  argumentTypes: null,
                  "arguments": [{
                    argumentTypes: null,
                    hexValue: "30",
                    id: 223,
                    isConstant: false,
                    isLValue: false,
                    isPure: true,
                    kind: "number",
                    lValueRequested: false,
                    nodeType: "Literal",
                    src: "2470:1:0",
                    subdenomination: null,
                    typeDescriptions: {
                      typeIdentifier: "t_rational_0_by_1",
                      typeString: "int_const 0"
                    },
                    value: "0"
                  }],
                  expression: {
                    argumentTypes: [{
                      typeIdentifier: "t_rational_0_by_1",
                      typeString: "int_const 0"
                    }],
                    id: 222,
                    isConstant: false,
                    isLValue: false,
                    isPure: true,
                    lValueRequested: false,
                    nodeType: "ElementaryTypeNameExpression",
                    src: "2462:7:0",
                    typeDescriptions: {
                      typeIdentifier: "t_type$_t_address_$",
                      typeString: "type(address)"
                    },
                    typeName: "address"
                  },
                  id: 224,
                  isConstant: false,
                  isLValue: false,
                  isPure: true,
                  kind: "typeConversion",
                  lValueRequested: false,
                  names: [],
                  nodeType: "FunctionCall",
                  src: "2462:10:0",
                  typeDescriptions: {
                    typeIdentifier: "t_address_payable",
                    typeString: "address payable"
                  }
                },
                src: "2428:44:0",
                typeDescriptions: {
                  typeIdentifier: "t_bool",
                  typeString: "bool"
                }
              }],
              id: 226,
              isConstant: false,
              isInlineArray: false,
              isLValue: false,
              isPure: false,
              lValueRequested: false,
              nodeType: "TupleExpression",
              src: "2427:46:0",
              typeDescriptions: {
                typeIdentifier: "t_bool",
                typeString: "bool"
              }
            },
            functionReturnParameters: 216,
            id: 227,
            nodeType: "Return",
            src: "2420:53:0"
          }]
        },
        documentation: null,
        id: 229,
        implemented: true,
        kind: "function",
        modifiers: [],
        name: "trustable",
        nodeType: "FunctionDefinition",
        parameters: {
          id: 213,
          nodeType: "ParameterList",
          parameters: [{
            constant: false,
            id: 212,
            name: "_address",
            nodeType: "VariableDeclaration",
            scope: 229,
            src: "2365:16:0",
            stateVariable: false,
            storageLocation: "default",
            typeDescriptions: {
              typeIdentifier: "t_address",
              typeString: "address"
            },
            typeName: {
              id: 211,
              name: "address",
              nodeType: "ElementaryTypeName",
              src: "2365:7:0",
              stateMutability: "nonpayable",
              typeDescriptions: {
                typeIdentifier: "t_address",
                typeString: "address"
              }
            },
            value: null,
            visibility: "internal"
          }],
          src: "2364:18:0"
        },
        returnParameters: {
          id: 216,
          nodeType: "ParameterList",
          parameters: [{
            constant: false,
            id: 215,
            name: "",
            nodeType: "VariableDeclaration",
            scope: 229,
            src: "2404:4:0",
            stateVariable: false,
            storageLocation: "default",
            typeDescriptions: {
              typeIdentifier: "t_bool",
              typeString: "bool"
            },
            typeName: {
              id: 214,
              name: "bool",
              nodeType: "ElementaryTypeName",
              src: "2404:4:0",
              typeDescriptions: {
                typeIdentifier: "t_bool",
                typeString: "bool"
              }
            },
            value: null,
            visibility: "internal"
          }],
          src: "2403:6:0"
        },
        scope: 442,
        src: "2346:134:0",
        stateMutability: "view",
        superFunction: null,
        visibility: "public"
      }, {
        body: {
          id: 285,
          nodeType: "Block",
          src: "2623:302:0",
          statements: [{
            expression: {
              argumentTypes: null,
              "arguments": [{
                argumentTypes: null,
                commonType: {
                  typeIdentifier: "t_address",
                  typeString: "address"
                },
                id: 246,
                isConstant: false,
                isLValue: false,
                isPure: false,
                lValueRequested: false,
                leftExpression: {
                  argumentTypes: null,
                  "arguments": [{
                    argumentTypes: null,
                    baseExpression: {
                      argumentTypes: null,
                      id: 238,
                      name: "userToToken",
                      nodeType: "Identifier",
                      overloadedDeclarations: [],
                      referencedDeclaration: 24,
                      src: "2649:11:0",
                      typeDescriptions: {
                        typeIdentifier: "t_mapping$_t_address_$_t_contract$_Token_$794_$",
                        typeString: "mapping(address => contract Token)"
                      }
                    },
                    id: 241,
                    indexExpression: {
                      argumentTypes: null,
                      expression: {
                        argumentTypes: null,
                        id: 239,
                        name: "msg",
                        nodeType: "Identifier",
                        overloadedDeclarations: [],
                        referencedDeclaration: 1545,
                        src: "2661:3:0",
                        typeDescriptions: {
                          typeIdentifier: "t_magic_message",
                          typeString: "msg"
                        }
                      },
                      id: 240,
                      isConstant: false,
                      isLValue: false,
                      isPure: false,
                      lValueRequested: false,
                      memberName: "sender",
                      nodeType: "MemberAccess",
                      referencedDeclaration: null,
                      src: "2661:10:0",
                      typeDescriptions: {
                        typeIdentifier: "t_address_payable",
                        typeString: "address payable"
                      }
                    },
                    isConstant: false,
                    isLValue: true,
                    isPure: false,
                    lValueRequested: false,
                    nodeType: "IndexAccess",
                    src: "2649:23:0",
                    typeDescriptions: {
                      typeIdentifier: "t_contract$_Token_$794",
                      typeString: "contract Token"
                    }
                  }],
                  expression: {
                    argumentTypes: [{
                      typeIdentifier: "t_contract$_Token_$794",
                      typeString: "contract Token"
                    }],
                    id: 237,
                    isConstant: false,
                    isLValue: false,
                    isPure: true,
                    lValueRequested: false,
                    nodeType: "ElementaryTypeNameExpression",
                    src: "2641:7:0",
                    typeDescriptions: {
                      typeIdentifier: "t_type$_t_address_$",
                      typeString: "type(address)"
                    },
                    typeName: "address"
                  },
                  id: 242,
                  isConstant: false,
                  isLValue: false,
                  isPure: false,
                  kind: "typeConversion",
                  lValueRequested: false,
                  names: [],
                  nodeType: "FunctionCall",
                  src: "2641:32:0",
                  typeDescriptions: {
                    typeIdentifier: "t_address",
                    typeString: "address"
                  }
                },
                nodeType: "BinaryOperation",
                operator: "==",
                rightExpression: {
                  argumentTypes: null,
                  "arguments": [{
                    argumentTypes: null,
                    hexValue: "30",
                    id: 244,
                    isConstant: false,
                    isLValue: false,
                    isPure: true,
                    kind: "number",
                    lValueRequested: false,
                    nodeType: "Literal",
                    src: "2685:1:0",
                    subdenomination: null,
                    typeDescriptions: {
                      typeIdentifier: "t_rational_0_by_1",
                      typeString: "int_const 0"
                    },
                    value: "0"
                  }],
                  expression: {
                    argumentTypes: [{
                      typeIdentifier: "t_rational_0_by_1",
                      typeString: "int_const 0"
                    }],
                    id: 243,
                    isConstant: false,
                    isLValue: false,
                    isPure: true,
                    lValueRequested: false,
                    nodeType: "ElementaryTypeNameExpression",
                    src: "2677:7:0",
                    typeDescriptions: {
                      typeIdentifier: "t_type$_t_address_$",
                      typeString: "type(address)"
                    },
                    typeName: "address"
                  },
                  id: 245,
                  isConstant: false,
                  isLValue: false,
                  isPure: true,
                  kind: "typeConversion",
                  lValueRequested: false,
                  names: [],
                  nodeType: "FunctionCall",
                  src: "2677:10:0",
                  typeDescriptions: {
                    typeIdentifier: "t_address_payable",
                    typeString: "address payable"
                  }
                },
                src: "2641:46:0",
                typeDescriptions: {
                  typeIdentifier: "t_bool",
                  typeString: "bool"
                }
              }],
              expression: {
                argumentTypes: [{
                  typeIdentifier: "t_bool",
                  typeString: "bool"
                }],
                id: 236,
                name: "require",
                nodeType: "Identifier",
                overloadedDeclarations: [1548, 1549],
                referencedDeclaration: 1548,
                src: "2633:7:0",
                typeDescriptions: {
                  typeIdentifier: "t_function_require_pure$_t_bool_$returns$__$",
                  typeString: "function (bool) pure"
                }
              },
              id: 247,
              isConstant: false,
              isLValue: false,
              isPure: false,
              kind: "functionCall",
              lValueRequested: false,
              names: [],
              nodeType: "FunctionCall",
              src: "2633:55:0",
              typeDescriptions: {
                typeIdentifier: "t_tuple$__$",
                typeString: "tuple()"
              }
            },
            id: 248,
            nodeType: "ExpressionStatement",
            src: "2633:55:0"
          }, {
            assignments: [250],
            declarations: [{
              constant: false,
              id: 250,
              name: "token",
              nodeType: "VariableDeclaration",
              scope: 285,
              src: "2699:11:0",
              stateVariable: false,
              storageLocation: "default",
              typeDescriptions: {
                typeIdentifier: "t_contract$_Token_$794",
                typeString: "contract Token"
              },
              typeName: {
                contractScope: null,
                id: 249,
                name: "Token",
                nodeType: "UserDefinedTypeName",
                referencedDeclaration: 794,
                src: "2699:5:0",
                typeDescriptions: {
                  typeIdentifier: "t_contract$_Token_$794",
                  typeString: "contract Token"
                }
              },
              value: null,
              visibility: "internal"
            }],
            id: 258,
            initialValue: {
              argumentTypes: null,
              "arguments": [{
                argumentTypes: null,
                expression: {
                  argumentTypes: null,
                  id: 253,
                  name: "msg",
                  nodeType: "Identifier",
                  overloadedDeclarations: [],
                  referencedDeclaration: 1545,
                  src: "2723:3:0",
                  typeDescriptions: {
                    typeIdentifier: "t_magic_message",
                    typeString: "msg"
                  }
                },
                id: 254,
                isConstant: false,
                isLValue: false,
                isPure: false,
                lValueRequested: false,
                memberName: "sender",
                nodeType: "MemberAccess",
                referencedDeclaration: null,
                src: "2723:10:0",
                typeDescriptions: {
                  typeIdentifier: "t_address_payable",
                  typeString: "address payable"
                }
              }, {
                argumentTypes: null,
                id: 255,
                name: "_name",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 231,
                src: "2735:5:0",
                typeDescriptions: {
                  typeIdentifier: "t_string_memory_ptr",
                  typeString: "string memory"
                }
              }, {
                argumentTypes: null,
                id: 256,
                name: "initialPayout",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 16,
                src: "2742:13:0",
                typeDescriptions: {
                  typeIdentifier: "t_uint256",
                  typeString: "uint256"
                }
              }],
              expression: {
                argumentTypes: [{
                  typeIdentifier: "t_address_payable",
                  typeString: "address payable"
                }, {
                  typeIdentifier: "t_string_memory_ptr",
                  typeString: "string memory"
                }, {
                  typeIdentifier: "t_uint256",
                  typeString: "uint256"
                }],
                id: 252,
                isConstant: false,
                isLValue: false,
                isPure: false,
                lValueRequested: false,
                nodeType: "NewExpression",
                src: "2713:9:0",
                typeDescriptions: {
                  typeIdentifier: "t_function_creation_nonpayable$_t_address_$_t_string_memory_ptr_$_t_uint256_$returns$_t_contract$_Token_$794_$",
                  typeString: "function (address,string memory,uint256) returns (contract Token)"
                },
                typeName: {
                  contractScope: null,
                  id: 251,
                  name: "Token",
                  nodeType: "UserDefinedTypeName",
                  referencedDeclaration: 794,
                  src: "2717:5:0",
                  typeDescriptions: {
                    typeIdentifier: "t_contract$_Token_$794",
                    typeString: "contract Token"
                  }
                }
              },
              id: 257,
              isConstant: false,
              isLValue: false,
              isPure: false,
              kind: "functionCall",
              lValueRequested: false,
              names: [],
              nodeType: "FunctionCall",
              src: "2713:43:0",
              typeDescriptions: {
                typeIdentifier: "t_contract$_Token_$794",
                typeString: "contract Token"
              }
            },
            nodeType: "VariableDeclarationStatement",
            src: "2699:57:0"
          }, {
            expression: {
              argumentTypes: null,
              id: 264,
              isConstant: false,
              isLValue: false,
              isPure: false,
              lValueRequested: false,
              leftHandSide: {
                argumentTypes: null,
                baseExpression: {
                  argumentTypes: null,
                  id: 259,
                  name: "userToToken",
                  nodeType: "Identifier",
                  overloadedDeclarations: [],
                  referencedDeclaration: 24,
                  src: "2766:11:0",
                  typeDescriptions: {
                    typeIdentifier: "t_mapping$_t_address_$_t_contract$_Token_$794_$",
                    typeString: "mapping(address => contract Token)"
                  }
                },
                id: 262,
                indexExpression: {
                  argumentTypes: null,
                  expression: {
                    argumentTypes: null,
                    id: 260,
                    name: "msg",
                    nodeType: "Identifier",
                    overloadedDeclarations: [],
                    referencedDeclaration: 1545,
                    src: "2778:3:0",
                    typeDescriptions: {
                      typeIdentifier: "t_magic_message",
                      typeString: "msg"
                    }
                  },
                  id: 261,
                  isConstant: false,
                  isLValue: false,
                  isPure: false,
                  lValueRequested: false,
                  memberName: "sender",
                  nodeType: "MemberAccess",
                  referencedDeclaration: null,
                  src: "2778:10:0",
                  typeDescriptions: {
                    typeIdentifier: "t_address_payable",
                    typeString: "address payable"
                  }
                },
                isConstant: false,
                isLValue: true,
                isPure: false,
                lValueRequested: true,
                nodeType: "IndexAccess",
                src: "2766:23:0",
                typeDescriptions: {
                  typeIdentifier: "t_contract$_Token_$794",
                  typeString: "contract Token"
                }
              },
              nodeType: "Assignment",
              operator: "=",
              rightHandSide: {
                argumentTypes: null,
                id: 263,
                name: "token",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 250,
                src: "2792:5:0",
                typeDescriptions: {
                  typeIdentifier: "t_contract$_Token_$794",
                  typeString: "contract Token"
                }
              },
              src: "2766:31:0",
              typeDescriptions: {
                typeIdentifier: "t_contract$_Token_$794",
                typeString: "contract Token"
              }
            },
            id: 265,
            nodeType: "ExpressionStatement",
            src: "2766:31:0"
          }, {
            expression: {
              argumentTypes: null,
              id: 273,
              isConstant: false,
              isLValue: false,
              isPure: false,
              lValueRequested: false,
              leftHandSide: {
                argumentTypes: null,
                baseExpression: {
                  argumentTypes: null,
                  id: 266,
                  name: "tokenToUser",
                  nodeType: "Identifier",
                  overloadedDeclarations: [],
                  referencedDeclaration: 28,
                  src: "2807:11:0",
                  typeDescriptions: {
                    typeIdentifier: "t_mapping$_t_address_$_t_address_$",
                    typeString: "mapping(address => address)"
                  }
                },
                id: 270,
                indexExpression: {
                  argumentTypes: null,
                  "arguments": [{
                    argumentTypes: null,
                    id: 268,
                    name: "token",
                    nodeType: "Identifier",
                    overloadedDeclarations: [],
                    referencedDeclaration: 250,
                    src: "2827:5:0",
                    typeDescriptions: {
                      typeIdentifier: "t_contract$_Token_$794",
                      typeString: "contract Token"
                    }
                  }],
                  expression: {
                    argumentTypes: [{
                      typeIdentifier: "t_contract$_Token_$794",
                      typeString: "contract Token"
                    }],
                    id: 267,
                    isConstant: false,
                    isLValue: false,
                    isPure: true,
                    lValueRequested: false,
                    nodeType: "ElementaryTypeNameExpression",
                    src: "2819:7:0",
                    typeDescriptions: {
                      typeIdentifier: "t_type$_t_address_$",
                      typeString: "type(address)"
                    },
                    typeName: "address"
                  },
                  id: 269,
                  isConstant: false,
                  isLValue: false,
                  isPure: false,
                  kind: "typeConversion",
                  lValueRequested: false,
                  names: [],
                  nodeType: "FunctionCall",
                  src: "2819:14:0",
                  typeDescriptions: {
                    typeIdentifier: "t_address",
                    typeString: "address"
                  }
                },
                isConstant: false,
                isLValue: true,
                isPure: false,
                lValueRequested: true,
                nodeType: "IndexAccess",
                src: "2807:27:0",
                typeDescriptions: {
                  typeIdentifier: "t_address",
                  typeString: "address"
                }
              },
              nodeType: "Assignment",
              operator: "=",
              rightHandSide: {
                argumentTypes: null,
                expression: {
                  argumentTypes: null,
                  id: 271,
                  name: "msg",
                  nodeType: "Identifier",
                  overloadedDeclarations: [],
                  referencedDeclaration: 1545,
                  src: "2837:3:0",
                  typeDescriptions: {
                    typeIdentifier: "t_magic_message",
                    typeString: "msg"
                  }
                },
                id: 272,
                isConstant: false,
                isLValue: false,
                isPure: false,
                lValueRequested: false,
                memberName: "sender",
                nodeType: "MemberAccess",
                referencedDeclaration: null,
                src: "2837:10:0",
                typeDescriptions: {
                  typeIdentifier: "t_address_payable",
                  typeString: "address payable"
                }
              },
              src: "2807:40:0",
              typeDescriptions: {
                typeIdentifier: "t_address",
                typeString: "address"
              }
            },
            id: 274,
            nodeType: "ExpressionStatement",
            src: "2807:40:0"
          }, {
            eventCall: {
              argumentTypes: null,
              "arguments": [{
                argumentTypes: null,
                expression: {
                  argumentTypes: null,
                  id: 276,
                  name: "msg",
                  nodeType: "Identifier",
                  overloadedDeclarations: [],
                  referencedDeclaration: 1545,
                  src: "2870:3:0",
                  typeDescriptions: {
                    typeIdentifier: "t_magic_message",
                    typeString: "msg"
                  }
                },
                id: 277,
                isConstant: false,
                isLValue: false,
                isPure: false,
                lValueRequested: false,
                memberName: "sender",
                nodeType: "MemberAccess",
                referencedDeclaration: null,
                src: "2870:10:0",
                typeDescriptions: {
                  typeIdentifier: "t_address_payable",
                  typeString: "address payable"
                }
              }, {
                argumentTypes: null,
                "arguments": [{
                  argumentTypes: null,
                  id: 279,
                  name: "token",
                  nodeType: "Identifier",
                  overloadedDeclarations: [],
                  referencedDeclaration: 250,
                  src: "2890:5:0",
                  typeDescriptions: {
                    typeIdentifier: "t_contract$_Token_$794",
                    typeString: "contract Token"
                  }
                }],
                expression: {
                  argumentTypes: [{
                    typeIdentifier: "t_contract$_Token_$794",
                    typeString: "contract Token"
                  }],
                  id: 278,
                  isConstant: false,
                  isLValue: false,
                  isPure: true,
                  lValueRequested: false,
                  nodeType: "ElementaryTypeNameExpression",
                  src: "2882:7:0",
                  typeDescriptions: {
                    typeIdentifier: "t_type$_t_address_$",
                    typeString: "type(address)"
                  },
                  typeName: "address"
                },
                id: 280,
                isConstant: false,
                isLValue: false,
                isPure: false,
                kind: "typeConversion",
                lValueRequested: false,
                names: [],
                nodeType: "FunctionCall",
                src: "2882:14:0",
                typeDescriptions: {
                  typeIdentifier: "t_address",
                  typeString: "address"
                }
              }],
              expression: {
                argumentTypes: [{
                  typeIdentifier: "t_address_payable",
                  typeString: "address payable"
                }, {
                  typeIdentifier: "t_address",
                  typeString: "address"
                }],
                id: 275,
                name: "Signup",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 40,
                src: "2863:6:0",
                typeDescriptions: {
                  typeIdentifier: "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
                  typeString: "function (address,address)"
                }
              },
              id: 281,
              isConstant: false,
              isLValue: false,
              isPure: false,
              kind: "functionCall",
              lValueRequested: false,
              names: [],
              nodeType: "FunctionCall",
              src: "2863:34:0",
              typeDescriptions: {
                typeIdentifier: "t_tuple$__$",
                typeString: "tuple()"
              }
            },
            id: 282,
            nodeType: "EmitStatement",
            src: "2858:39:0"
          }, {
            expression: {
              argumentTypes: null,
              hexValue: "74727565",
              id: 283,
              isConstant: false,
              isLValue: false,
              isPure: true,
              kind: "bool",
              lValueRequested: false,
              nodeType: "Literal",
              src: "2914:4:0",
              subdenomination: null,
              typeDescriptions: {
                typeIdentifier: "t_bool",
                typeString: "bool"
              },
              value: "true"
            },
            functionReturnParameters: 235,
            id: 284,
            nodeType: "Return",
            src: "2907:11:0"
          }]
        },
        documentation: null,
        id: 286,
        implemented: true,
        kind: "function",
        modifiers: [],
        name: "signup",
        nodeType: "FunctionDefinition",
        parameters: {
          id: 232,
          nodeType: "ParameterList",
          parameters: [{
            constant: false,
            id: 231,
            name: "_name",
            nodeType: "VariableDeclaration",
            scope: 286,
            src: "2580:19:0",
            stateVariable: false,
            storageLocation: "memory",
            typeDescriptions: {
              typeIdentifier: "t_string_memory_ptr",
              typeString: "string"
            },
            typeName: {
              id: 230,
              name: "string",
              nodeType: "ElementaryTypeName",
              src: "2580:6:0",
              typeDescriptions: {
                typeIdentifier: "t_string_storage_ptr",
                typeString: "string"
              }
            },
            value: null,
            visibility: "internal"
          }],
          src: "2579:21:0"
        },
        returnParameters: {
          id: 235,
          nodeType: "ParameterList",
          parameters: [{
            constant: false,
            id: 234,
            name: "",
            nodeType: "VariableDeclaration",
            scope: 286,
            src: "2617:4:0",
            stateVariable: false,
            storageLocation: "default",
            typeDescriptions: {
              typeIdentifier: "t_bool",
              typeString: "bool"
            },
            typeName: {
              id: 233,
              name: "bool",
              nodeType: "ElementaryTypeName",
              src: "2617:4:0",
              typeDescriptions: {
                typeIdentifier: "t_bool",
                typeString: "bool"
              }
            },
            value: null,
            visibility: "internal"
          }],
          src: "2616:6:0"
        },
        scope: 442,
        src: "2564:361:0",
        stateMutability: "nonpayable",
        superFunction: null,
        visibility: "public"
      }, {
        body: {
          id: 315,
          nodeType: "Block",
          src: "3090:137:0",
          statements: [{
            expression: {
              argumentTypes: null,
              "arguments": [{
                argumentTypes: null,
                "arguments": [{
                  argumentTypes: null,
                  id: 295,
                  name: "toTrust",
                  nodeType: "Identifier",
                  overloadedDeclarations: [],
                  referencedDeclaration: 288,
                  src: "3118:7:0",
                  typeDescriptions: {
                    typeIdentifier: "t_address",
                    typeString: "address"
                  }
                }],
                expression: {
                  argumentTypes: [{
                    typeIdentifier: "t_address",
                    typeString: "address"
                  }],
                  id: 294,
                  name: "trustable",
                  nodeType: "Identifier",
                  overloadedDeclarations: [],
                  referencedDeclaration: 229,
                  src: "3108:9:0",
                  typeDescriptions: {
                    typeIdentifier: "t_function_internal_view$_t_address_$returns$_t_bool_$",
                    typeString: "function (address) view returns (bool)"
                  }
                },
                id: 296,
                isConstant: false,
                isLValue: false,
                isPure: false,
                kind: "functionCall",
                lValueRequested: false,
                names: [],
                nodeType: "FunctionCall",
                src: "3108:18:0",
                typeDescriptions: {
                  typeIdentifier: "t_bool",
                  typeString: "bool"
                }
              }],
              expression: {
                argumentTypes: [{
                  typeIdentifier: "t_bool",
                  typeString: "bool"
                }],
                id: 293,
                name: "require",
                nodeType: "Identifier",
                overloadedDeclarations: [1548, 1549],
                referencedDeclaration: 1548,
                src: "3100:7:0",
                typeDescriptions: {
                  typeIdentifier: "t_function_require_pure$_t_bool_$returns$__$",
                  typeString: "function (bool) pure"
                }
              },
              id: 297,
              isConstant: false,
              isLValue: false,
              isPure: false,
              kind: "functionCall",
              lValueRequested: false,
              names: [],
              nodeType: "FunctionCall",
              src: "3100:27:0",
              typeDescriptions: {
                typeIdentifier: "t_tuple$__$",
                typeString: "tuple()"
              }
            },
            id: 298,
            nodeType: "ExpressionStatement",
            src: "3100:27:0"
          }, {
            expression: {
              argumentTypes: null,
              id: 306,
              isConstant: false,
              isLValue: false,
              isPure: false,
              lValueRequested: false,
              leftHandSide: {
                argumentTypes: null,
                baseExpression: {
                  argumentTypes: null,
                  baseExpression: {
                    argumentTypes: null,
                    id: 299,
                    name: "limits",
                    nodeType: "Identifier",
                    overloadedDeclarations: [],
                    referencedDeclaration: 34,
                    src: "3137:6:0",
                    typeDescriptions: {
                      typeIdentifier: "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                      typeString: "mapping(address => mapping(address => uint256))"
                    }
                  },
                  id: 303,
                  indexExpression: {
                    argumentTypes: null,
                    expression: {
                      argumentTypes: null,
                      id: 300,
                      name: "msg",
                      nodeType: "Identifier",
                      overloadedDeclarations: [],
                      referencedDeclaration: 1545,
                      src: "3144:3:0",
                      typeDescriptions: {
                        typeIdentifier: "t_magic_message",
                        typeString: "msg"
                      }
                    },
                    id: 301,
                    isConstant: false,
                    isLValue: false,
                    isPure: false,
                    lValueRequested: false,
                    memberName: "sender",
                    nodeType: "MemberAccess",
                    referencedDeclaration: null,
                    src: "3144:10:0",
                    typeDescriptions: {
                      typeIdentifier: "t_address_payable",
                      typeString: "address payable"
                    }
                  },
                  isConstant: false,
                  isLValue: true,
                  isPure: false,
                  lValueRequested: false,
                  nodeType: "IndexAccess",
                  src: "3137:18:0",
                  typeDescriptions: {
                    typeIdentifier: "t_mapping$_t_address_$_t_uint256_$",
                    typeString: "mapping(address => uint256)"
                  }
                },
                id: 304,
                indexExpression: {
                  argumentTypes: null,
                  id: 302,
                  name: "toTrust",
                  nodeType: "Identifier",
                  overloadedDeclarations: [],
                  referencedDeclaration: 288,
                  src: "3156:7:0",
                  typeDescriptions: {
                    typeIdentifier: "t_address",
                    typeString: "address"
                  }
                },
                isConstant: false,
                isLValue: true,
                isPure: false,
                lValueRequested: true,
                nodeType: "IndexAccess",
                src: "3137:27:0",
                typeDescriptions: {
                  typeIdentifier: "t_uint256",
                  typeString: "uint256"
                }
              },
              nodeType: "Assignment",
              operator: "=",
              rightHandSide: {
                argumentTypes: null,
                id: 305,
                name: "limit",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 290,
                src: "3167:5:0",
                typeDescriptions: {
                  typeIdentifier: "t_uint256",
                  typeString: "uint256"
                }
              },
              src: "3137:35:0",
              typeDescriptions: {
                typeIdentifier: "t_uint256",
                typeString: "uint256"
              }
            },
            id: 307,
            nodeType: "ExpressionStatement",
            src: "3137:35:0"
          }, {
            eventCall: {
              argumentTypes: null,
              "arguments": [{
                argumentTypes: null,
                expression: {
                  argumentTypes: null,
                  id: 309,
                  name: "msg",
                  nodeType: "Identifier",
                  overloadedDeclarations: [],
                  referencedDeclaration: 1545,
                  src: "3193:3:0",
                  typeDescriptions: {
                    typeIdentifier: "t_magic_message",
                    typeString: "msg"
                  }
                },
                id: 310,
                isConstant: false,
                isLValue: false,
                isPure: false,
                lValueRequested: false,
                memberName: "sender",
                nodeType: "MemberAccess",
                referencedDeclaration: null,
                src: "3193:10:0",
                typeDescriptions: {
                  typeIdentifier: "t_address_payable",
                  typeString: "address payable"
                }
              }, {
                argumentTypes: null,
                id: 311,
                name: "toTrust",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 288,
                src: "3205:7:0",
                typeDescriptions: {
                  typeIdentifier: "t_address",
                  typeString: "address"
                }
              }, {
                argumentTypes: null,
                id: 312,
                name: "limit",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 290,
                src: "3214:5:0",
                typeDescriptions: {
                  typeIdentifier: "t_uint256",
                  typeString: "uint256"
                }
              }],
              expression: {
                argumentTypes: [{
                  typeIdentifier: "t_address_payable",
                  typeString: "address payable"
                }, {
                  typeIdentifier: "t_address",
                  typeString: "address"
                }, {
                  typeIdentifier: "t_uint256",
                  typeString: "uint256"
                }],
                id: 308,
                name: "Trust",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 48,
                src: "3187:5:0",
                typeDescriptions: {
                  typeIdentifier: "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                  typeString: "function (address,address,uint256)"
                }
              },
              id: 313,
              isConstant: false,
              isLValue: false,
              isPure: false,
              kind: "functionCall",
              lValueRequested: false,
              names: [],
              nodeType: "FunctionCall",
              src: "3187:33:0",
              typeDescriptions: {
                typeIdentifier: "t_tuple$__$",
                typeString: "tuple()"
              }
            },
            id: 314,
            nodeType: "EmitStatement",
            src: "3182:38:0"
          }]
        },
        documentation: null,
        id: 316,
        implemented: true,
        kind: "function",
        modifiers: [],
        name: "trust",
        nodeType: "FunctionDefinition",
        parameters: {
          id: 291,
          nodeType: "ParameterList",
          parameters: [{
            constant: false,
            id: 288,
            name: "toTrust",
            nodeType: "VariableDeclaration",
            scope: 316,
            src: "3054:15:0",
            stateVariable: false,
            storageLocation: "default",
            typeDescriptions: {
              typeIdentifier: "t_address",
              typeString: "address"
            },
            typeName: {
              id: 287,
              name: "address",
              nodeType: "ElementaryTypeName",
              src: "3054:7:0",
              stateMutability: "nonpayable",
              typeDescriptions: {
                typeIdentifier: "t_address",
                typeString: "address"
              }
            },
            value: null,
            visibility: "internal"
          }, {
            constant: false,
            id: 290,
            name: "limit",
            nodeType: "VariableDeclaration",
            scope: 316,
            src: "3071:10:0",
            stateVariable: false,
            storageLocation: "default",
            typeDescriptions: {
              typeIdentifier: "t_uint256",
              typeString: "uint256"
            },
            typeName: {
              id: 289,
              name: "uint",
              nodeType: "ElementaryTypeName",
              src: "3071:4:0",
              typeDescriptions: {
                typeIdentifier: "t_uint256",
                typeString: "uint256"
              }
            },
            value: null,
            visibility: "internal"
          }],
          src: "3053:29:0"
        },
        returnParameters: {
          id: 292,
          nodeType: "ParameterList",
          parameters: [],
          src: "3090:0:0"
        },
        scope: 442,
        src: "3039:188:0",
        stateMutability: "nonpayable",
        superFunction: null,
        visibility: "public"
      }, {
        body: {
          id: 354,
          nodeType: "Block",
          src: "3313:150:0",
          statements: [{
            assignments: [326],
            declarations: [{
              constant: false,
              id: 326,
              name: "max",
              nodeType: "VariableDeclaration",
              scope: 354,
              src: "3323:11:0",
              stateVariable: false,
              storageLocation: "default",
              typeDescriptions: {
                typeIdentifier: "t_uint256",
                typeString: "uint256"
              },
              typeName: {
                id: 325,
                name: "uint256",
                nodeType: "ElementaryTypeName",
                src: "3323:7:0",
                typeDescriptions: {
                  typeIdentifier: "t_uint256",
                  typeString: "uint256"
                }
              },
              value: null,
              visibility: "internal"
            }],
            id: 343,
            initialValue: {
              argumentTypes: null,
              "arguments": [{
                argumentTypes: null,
                hexValue: "313030",
                id: 341,
                isConstant: false,
                isLValue: false,
                isPure: true,
                kind: "number",
                lValueRequested: false,
                nodeType: "Literal",
                src: "3395:3:0",
                subdenomination: null,
                typeDescriptions: {
                  typeIdentifier: "t_rational_100_by_1",
                  typeString: "int_const 100"
                },
                value: "100"
              }],
              expression: {
                argumentTypes: [{
                  typeIdentifier: "t_rational_100_by_1",
                  typeString: "int_const 100"
                }],
                expression: {
                  argumentTypes: null,
                  components: [{
                    argumentTypes: null,
                    "arguments": [{
                      argumentTypes: null,
                      baseExpression: {
                        argumentTypes: null,
                        baseExpression: {
                          argumentTypes: null,
                          id: 333,
                          name: "limits",
                          nodeType: "Identifier",
                          overloadedDeclarations: [],
                          referencedDeclaration: 34,
                          src: "3372:6:0",
                          typeDescriptions: {
                            typeIdentifier: "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                            typeString: "mapping(address => mapping(address => uint256))"
                          }
                        },
                        id: 335,
                        indexExpression: {
                          argumentTypes: null,
                          id: 334,
                          name: "to",
                          nodeType: "Identifier",
                          overloadedDeclarations: [],
                          referencedDeclaration: 320,
                          src: "3379:2:0",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address"
                          }
                        },
                        isConstant: false,
                        isLValue: true,
                        isPure: false,
                        lValueRequested: false,
                        nodeType: "IndexAccess",
                        src: "3372:10:0",
                        typeDescriptions: {
                          typeIdentifier: "t_mapping$_t_address_$_t_uint256_$",
                          typeString: "mapping(address => uint256)"
                        }
                      },
                      id: 337,
                      indexExpression: {
                        argumentTypes: null,
                        id: 336,
                        name: "from",
                        nodeType: "Identifier",
                        overloadedDeclarations: [],
                        referencedDeclaration: 318,
                        src: "3383:4:0",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      isConstant: false,
                      isLValue: true,
                      isPure: false,
                      lValueRequested: false,
                      nodeType: "IndexAccess",
                      src: "3372:16:0",
                      typeDescriptions: {
                        typeIdentifier: "t_uint256",
                        typeString: "uint256"
                      }
                    }],
                    expression: {
                      argumentTypes: [{
                        typeIdentifier: "t_uint256",
                        typeString: "uint256"
                      }],
                      expression: {
                        argumentTypes: null,
                        "arguments": [],
                        expression: {
                          argumentTypes: [],
                          expression: {
                            argumentTypes: null,
                            baseExpression: {
                              argumentTypes: null,
                              id: 327,
                              name: "userToToken",
                              nodeType: "Identifier",
                              overloadedDeclarations: [],
                              referencedDeclaration: 24,
                              src: "3338:11:0",
                              typeDescriptions: {
                                typeIdentifier: "t_mapping$_t_address_$_t_contract$_Token_$794_$",
                                typeString: "mapping(address => contract Token)"
                              }
                            },
                            id: 329,
                            indexExpression: {
                              argumentTypes: null,
                              id: 328,
                              name: "to",
                              nodeType: "Identifier",
                              overloadedDeclarations: [],
                              referencedDeclaration: 320,
                              src: "3350:2:0",
                              typeDescriptions: {
                                typeIdentifier: "t_address",
                                typeString: "address"
                              }
                            },
                            isConstant: false,
                            isLValue: true,
                            isPure: false,
                            lValueRequested: false,
                            nodeType: "IndexAccess",
                            src: "3338:15:0",
                            typeDescriptions: {
                              typeIdentifier: "t_contract$_Token_$794",
                              typeString: "contract Token"
                            }
                          },
                          id: 330,
                          isConstant: false,
                          isLValue: false,
                          isPure: false,
                          lValueRequested: false,
                          memberName: "totalSupply",
                          nodeType: "MemberAccess",
                          referencedDeclaration: 776,
                          src: "3338:27:0",
                          typeDescriptions: {
                            typeIdentifier: "t_function_external_view$__$returns$_t_uint256_$",
                            typeString: "function () view external returns (uint256)"
                          }
                        },
                        id: 331,
                        isConstant: false,
                        isLValue: false,
                        isPure: false,
                        kind: "functionCall",
                        lValueRequested: false,
                        names: [],
                        nodeType: "FunctionCall",
                        src: "3338:29:0",
                        typeDescriptions: {
                          typeIdentifier: "t_uint256",
                          typeString: "uint256"
                        }
                      },
                      id: 332,
                      isConstant: false,
                      isLValue: false,
                      isPure: false,
                      lValueRequested: false,
                      memberName: "mul",
                      nodeType: "MemberAccess",
                      referencedDeclaration: 936,
                      src: "3338:33:0",
                      typeDescriptions: {
                        typeIdentifier: "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                        typeString: "function (uint256,uint256) pure returns (uint256)"
                      }
                    },
                    id: 338,
                    isConstant: false,
                    isLValue: false,
                    isPure: false,
                    kind: "functionCall",
                    lValueRequested: false,
                    names: [],
                    nodeType: "FunctionCall",
                    src: "3338:51:0",
                    typeDescriptions: {
                      typeIdentifier: "t_uint256",
                      typeString: "uint256"
                    }
                  }],
                  id: 339,
                  isConstant: false,
                  isInlineArray: false,
                  isLValue: false,
                  isPure: false,
                  lValueRequested: false,
                  nodeType: "TupleExpression",
                  src: "3337:53:0",
                  typeDescriptions: {
                    typeIdentifier: "t_uint256",
                    typeString: "uint256"
                  }
                },
                id: 340,
                isConstant: false,
                isLValue: false,
                isPure: false,
                lValueRequested: false,
                memberName: "div",
                nodeType: "MemberAccess",
                referencedDeclaration: 960,
                src: "3337:57:0",
                typeDescriptions: {
                  typeIdentifier: "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                  typeString: "function (uint256,uint256) pure returns (uint256)"
                }
              },
              id: 342,
              isConstant: false,
              isLValue: false,
              isPure: false,
              kind: "functionCall",
              lValueRequested: false,
              names: [],
              nodeType: "FunctionCall",
              src: "3337:62:0",
              typeDescriptions: {
                typeIdentifier: "t_uint256",
                typeString: "uint256"
              }
            },
            nodeType: "VariableDeclarationStatement",
            src: "3323:76:0"
          }, {
            expression: {
              argumentTypes: null,
              "arguments": [{
                argumentTypes: null,
                "arguments": [{
                  argumentTypes: null,
                  id: 350,
                  name: "from",
                  nodeType: "Identifier",
                  overloadedDeclarations: [],
                  referencedDeclaration: 318,
                  src: "3450:4:0",
                  typeDescriptions: {
                    typeIdentifier: "t_address",
                    typeString: "address"
                  }
                }],
                expression: {
                  argumentTypes: [{
                    typeIdentifier: "t_address",
                    typeString: "address"
                  }],
                  expression: {
                    argumentTypes: null,
                    baseExpression: {
                      argumentTypes: null,
                      id: 346,
                      name: "userToToken",
                      nodeType: "Identifier",
                      overloadedDeclarations: [],
                      referencedDeclaration: 24,
                      src: "3424:11:0",
                      typeDescriptions: {
                        typeIdentifier: "t_mapping$_t_address_$_t_contract$_Token_$794_$",
                        typeString: "mapping(address => contract Token)"
                      }
                    },
                    id: 348,
                    indexExpression: {
                      argumentTypes: null,
                      id: 347,
                      name: "to",
                      nodeType: "Identifier",
                      overloadedDeclarations: [],
                      referencedDeclaration: 320,
                      src: "3436:2:0",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      }
                    },
                    isConstant: false,
                    isLValue: true,
                    isPure: false,
                    lValueRequested: false,
                    nodeType: "IndexAccess",
                    src: "3424:15:0",
                    typeDescriptions: {
                      typeIdentifier: "t_contract$_Token_$794",
                      typeString: "contract Token"
                    }
                  },
                  id: 349,
                  isConstant: false,
                  isLValue: false,
                  isPure: false,
                  lValueRequested: false,
                  memberName: "balanceOf",
                  nodeType: "MemberAccess",
                  referencedDeclaration: 793,
                  src: "3424:25:0",
                  typeDescriptions: {
                    typeIdentifier: "t_function_external_view$_t_address_$returns$_t_uint256_$",
                    typeString: "function (address) view external returns (uint256)"
                  }
                },
                id: 351,
                isConstant: false,
                isLValue: false,
                isPure: false,
                kind: "functionCall",
                lValueRequested: false,
                names: [],
                nodeType: "FunctionCall",
                src: "3424:31:0",
                typeDescriptions: {
                  typeIdentifier: "t_uint256",
                  typeString: "uint256"
                }
              }],
              expression: {
                argumentTypes: [{
                  typeIdentifier: "t_uint256",
                  typeString: "uint256"
                }],
                expression: {
                  argumentTypes: null,
                  id: 344,
                  name: "max",
                  nodeType: "Identifier",
                  overloadedDeclarations: [],
                  referencedDeclaration: 326,
                  src: "3416:3:0",
                  typeDescriptions: {
                    typeIdentifier: "t_uint256",
                    typeString: "uint256"
                  }
                },
                id: 345,
                isConstant: false,
                isLValue: false,
                isPure: false,
                lValueRequested: false,
                memberName: "sub",
                nodeType: "MemberAccess",
                referencedDeclaration: 984,
                src: "3416:7:0",
                typeDescriptions: {
                  typeIdentifier: "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                  typeString: "function (uint256,uint256) pure returns (uint256)"
                }
              },
              id: 352,
              isConstant: false,
              isLValue: false,
              isPure: false,
              kind: "functionCall",
              lValueRequested: false,
              names: [],
              nodeType: "FunctionCall",
              src: "3416:40:0",
              typeDescriptions: {
                typeIdentifier: "t_uint256",
                typeString: "uint256"
              }
            },
            functionReturnParameters: 324,
            id: 353,
            nodeType: "Return",
            src: "3409:47:0"
          }]
        },
        documentation: null,
        id: 355,
        implemented: true,
        kind: "function",
        modifiers: [],
        name: "checkSendLimit",
        nodeType: "FunctionDefinition",
        parameters: {
          id: 321,
          nodeType: "ParameterList",
          parameters: [{
            constant: false,
            id: 318,
            name: "from",
            nodeType: "VariableDeclaration",
            scope: 355,
            src: "3257:12:0",
            stateVariable: false,
            storageLocation: "default",
            typeDescriptions: {
              typeIdentifier: "t_address",
              typeString: "address"
            },
            typeName: {
              id: 317,
              name: "address",
              nodeType: "ElementaryTypeName",
              src: "3257:7:0",
              stateMutability: "nonpayable",
              typeDescriptions: {
                typeIdentifier: "t_address",
                typeString: "address"
              }
            },
            value: null,
            visibility: "internal"
          }, {
            constant: false,
            id: 320,
            name: "to",
            nodeType: "VariableDeclaration",
            scope: 355,
            src: "3271:10:0",
            stateVariable: false,
            storageLocation: "default",
            typeDescriptions: {
              typeIdentifier: "t_address",
              typeString: "address"
            },
            typeName: {
              id: 319,
              name: "address",
              nodeType: "ElementaryTypeName",
              src: "3271:7:0",
              stateMutability: "nonpayable",
              typeDescriptions: {
                typeIdentifier: "t_address",
                typeString: "address"
              }
            },
            value: null,
            visibility: "internal"
          }],
          src: "3256:26:0"
        },
        returnParameters: {
          id: 324,
          nodeType: "ParameterList",
          parameters: [{
            constant: false,
            id: 323,
            name: "",
            nodeType: "VariableDeclaration",
            scope: 355,
            src: "3304:7:0",
            stateVariable: false,
            storageLocation: "default",
            typeDescriptions: {
              typeIdentifier: "t_uint256",
              typeString: "uint256"
            },
            typeName: {
              id: 322,
              name: "uint256",
              nodeType: "ElementaryTypeName",
              src: "3304:7:0",
              typeDescriptions: {
                typeIdentifier: "t_uint256",
                typeString: "uint256"
              }
            },
            value: null,
            visibility: "internal"
          }],
          src: "3303:9:0"
        },
        scope: 442,
        src: "3233:230:0",
        stateMutability: "view",
        superFunction: null,
        visibility: "public"
      }, {
        body: {
          id: 440,
          nodeType: "Block",
          src: "3652:466:0",
          statements: [{
            expression: {
              argumentTypes: null,
              "arguments": [{
                argumentTypes: null,
                commonType: {
                  typeIdentifier: "t_uint256",
                  typeString: "uint256"
                },
                id: 367,
                isConstant: false,
                isLValue: false,
                isPure: false,
                lValueRequested: false,
                leftExpression: {
                  argumentTypes: null,
                  expression: {
                    argumentTypes: null,
                    id: 364,
                    name: "users",
                    nodeType: "Identifier",
                    overloadedDeclarations: [],
                    referencedDeclaration: 358,
                    src: "3670:5:0",
                    typeDescriptions: {
                      typeIdentifier: "t_array$_t_address_$dyn_memory_ptr",
                      typeString: "address[] memory"
                    }
                  },
                  id: 365,
                  isConstant: false,
                  isLValue: false,
                  isPure: false,
                  lValueRequested: false,
                  memberName: "length",
                  nodeType: "MemberAccess",
                  referencedDeclaration: null,
                  src: "3670:12:0",
                  typeDescriptions: {
                    typeIdentifier: "t_uint256",
                    typeString: "uint256"
                  }
                },
                nodeType: "BinaryOperation",
                operator: "<=",
                rightExpression: {
                  argumentTypes: null,
                  hexValue: "35",
                  id: 366,
                  isConstant: false,
                  isLValue: false,
                  isPure: true,
                  kind: "number",
                  lValueRequested: false,
                  nodeType: "Literal",
                  src: "3686:1:0",
                  subdenomination: null,
                  typeDescriptions: {
                    typeIdentifier: "t_rational_5_by_1",
                    typeString: "int_const 5"
                  },
                  value: "5"
                },
                src: "3670:17:0",
                typeDescriptions: {
                  typeIdentifier: "t_bool",
                  typeString: "bool"
                }
              }],
              expression: {
                argumentTypes: [{
                  typeIdentifier: "t_bool",
                  typeString: "bool"
                }],
                id: 363,
                name: "require",
                nodeType: "Identifier",
                overloadedDeclarations: [1548, 1549],
                referencedDeclaration: 1548,
                src: "3662:7:0",
                typeDescriptions: {
                  typeIdentifier: "t_function_require_pure$_t_bool_$returns$__$",
                  typeString: "function (bool) pure"
                }
              },
              id: 368,
              isConstant: false,
              isLValue: false,
              isPure: false,
              kind: "functionCall",
              lValueRequested: false,
              names: [],
              nodeType: "FunctionCall",
              src: "3662:26:0",
              typeDescriptions: {
                typeIdentifier: "t_tuple$__$",
                typeString: "tuple()"
              }
            },
            id: 369,
            nodeType: "ExpressionStatement",
            src: "3662:26:0"
          }, {
            assignments: [371],
            declarations: [{
              constant: false,
              id: 371,
              name: "prev",
              nodeType: "VariableDeclaration",
              scope: 440,
              src: "3698:12:0",
              stateVariable: false,
              storageLocation: "default",
              typeDescriptions: {
                typeIdentifier: "t_address",
                typeString: "address"
              },
              typeName: {
                id: 370,
                name: "address",
                nodeType: "ElementaryTypeName",
                src: "3698:7:0",
                stateMutability: "nonpayable",
                typeDescriptions: {
                  typeIdentifier: "t_address",
                  typeString: "address"
                }
              },
              value: null,
              visibility: "internal"
            }],
            id: 374,
            initialValue: {
              argumentTypes: null,
              expression: {
                argumentTypes: null,
                id: 372,
                name: "msg",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 1545,
                src: "3713:3:0",
                typeDescriptions: {
                  typeIdentifier: "t_magic_message",
                  typeString: "msg"
                }
              },
              id: 373,
              isConstant: false,
              isLValue: false,
              isPure: false,
              lValueRequested: false,
              memberName: "sender",
              nodeType: "MemberAccess",
              referencedDeclaration: null,
              src: "3713:10:0",
              typeDescriptions: {
                typeIdentifier: "t_address_payable",
                typeString: "address payable"
              }
            },
            nodeType: "VariableDeclarationStatement",
            src: "3698:25:0"
          }, {
            body: {
              id: 438,
              nodeType: "Block",
              src: "3773:339:0",
              statements: [{
                assignments: [387],
                declarations: [{
                  constant: false,
                  id: 387,
                  name: "curr",
                  nodeType: "VariableDeclaration",
                  scope: 438,
                  src: "3787:12:0",
                  stateVariable: false,
                  storageLocation: "default",
                  typeDescriptions: {
                    typeIdentifier: "t_address",
                    typeString: "address"
                  },
                  typeName: {
                    id: 386,
                    name: "address",
                    nodeType: "ElementaryTypeName",
                    src: "3787:7:0",
                    stateMutability: "nonpayable",
                    typeDescriptions: {
                      typeIdentifier: "t_address",
                      typeString: "address"
                    }
                  },
                  value: null,
                  visibility: "internal"
                }],
                id: 391,
                initialValue: {
                  argumentTypes: null,
                  baseExpression: {
                    argumentTypes: null,
                    id: 388,
                    name: "users",
                    nodeType: "Identifier",
                    overloadedDeclarations: [],
                    referencedDeclaration: 358,
                    src: "3802:5:0",
                    typeDescriptions: {
                      typeIdentifier: "t_array$_t_address_$dyn_memory_ptr",
                      typeString: "address[] memory"
                    }
                  },
                  id: 390,
                  indexExpression: {
                    argumentTypes: null,
                    id: 389,
                    name: "i",
                    nodeType: "Identifier",
                    overloadedDeclarations: [],
                    referencedDeclaration: 376,
                    src: "3808:1:0",
                    typeDescriptions: {
                      typeIdentifier: "t_uint256",
                      typeString: "uint256"
                    }
                  },
                  isConstant: false,
                  isLValue: true,
                  isPure: false,
                  lValueRequested: false,
                  nodeType: "IndexAccess",
                  src: "3802:8:0",
                  typeDescriptions: {
                    typeIdentifier: "t_address",
                    typeString: "address"
                  }
                },
                nodeType: "VariableDeclarationStatement",
                src: "3787:23:0"
              }, {
                assignments: [393],
                declarations: [{
                  constant: false,
                  id: 393,
                  name: "max",
                  nodeType: "VariableDeclaration",
                  scope: 438,
                  src: "3824:11:0",
                  stateVariable: false,
                  storageLocation: "default",
                  typeDescriptions: {
                    typeIdentifier: "t_uint256",
                    typeString: "uint256"
                  },
                  typeName: {
                    id: 392,
                    name: "uint256",
                    nodeType: "ElementaryTypeName",
                    src: "3824:7:0",
                    typeDescriptions: {
                      typeIdentifier: "t_uint256",
                      typeString: "uint256"
                    }
                  },
                  value: null,
                  visibility: "internal"
                }],
                id: 410,
                initialValue: {
                  argumentTypes: null,
                  "arguments": [{
                    argumentTypes: null,
                    hexValue: "31303030303030303030303030303030303030",
                    id: 408,
                    isConstant: false,
                    isLValue: false,
                    isPure: true,
                    kind: "number",
                    lValueRequested: false,
                    nodeType: "Literal",
                    src: "3900:19:0",
                    subdenomination: null,
                    typeDescriptions: {
                      typeIdentifier: "t_rational_1000000000000000000_by_1",
                      typeString: "int_const 1000000000000000000"
                    },
                    value: "1000000000000000000"
                  }],
                  expression: {
                    argumentTypes: [{
                      typeIdentifier: "t_rational_1000000000000000000_by_1",
                      typeString: "int_const 1000000000000000000"
                    }],
                    expression: {
                      argumentTypes: null,
                      components: [{
                        argumentTypes: null,
                        "arguments": [{
                          argumentTypes: null,
                          baseExpression: {
                            argumentTypes: null,
                            baseExpression: {
                              argumentTypes: null,
                              id: 400,
                              name: "limits",
                              nodeType: "Identifier",
                              overloadedDeclarations: [],
                              referencedDeclaration: 34,
                              src: "3875:6:0",
                              typeDescriptions: {
                                typeIdentifier: "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                typeString: "mapping(address => mapping(address => uint256))"
                              }
                            },
                            id: 402,
                            indexExpression: {
                              argumentTypes: null,
                              id: 401,
                              name: "curr",
                              nodeType: "Identifier",
                              overloadedDeclarations: [],
                              referencedDeclaration: 387,
                              src: "3882:4:0",
                              typeDescriptions: {
                                typeIdentifier: "t_address",
                                typeString: "address"
                              }
                            },
                            isConstant: false,
                            isLValue: true,
                            isPure: false,
                            lValueRequested: false,
                            nodeType: "IndexAccess",
                            src: "3875:12:0",
                            typeDescriptions: {
                              typeIdentifier: "t_mapping$_t_address_$_t_uint256_$",
                              typeString: "mapping(address => uint256)"
                            }
                          },
                          id: 404,
                          indexExpression: {
                            argumentTypes: null,
                            id: 403,
                            name: "prev",
                            nodeType: "Identifier",
                            overloadedDeclarations: [],
                            referencedDeclaration: 371,
                            src: "3888:4:0",
                            typeDescriptions: {
                              typeIdentifier: "t_address",
                              typeString: "address"
                            }
                          },
                          isConstant: false,
                          isLValue: true,
                          isPure: false,
                          lValueRequested: false,
                          nodeType: "IndexAccess",
                          src: "3875:18:0",
                          typeDescriptions: {
                            typeIdentifier: "t_uint256",
                            typeString: "uint256"
                          }
                        }],
                        expression: {
                          argumentTypes: [{
                            typeIdentifier: "t_uint256",
                            typeString: "uint256"
                          }],
                          expression: {
                            argumentTypes: null,
                            "arguments": [],
                            expression: {
                              argumentTypes: [],
                              expression: {
                                argumentTypes: null,
                                baseExpression: {
                                  argumentTypes: null,
                                  id: 394,
                                  name: "userToToken",
                                  nodeType: "Identifier",
                                  overloadedDeclarations: [],
                                  referencedDeclaration: 24,
                                  src: "3839:11:0",
                                  typeDescriptions: {
                                    typeIdentifier: "t_mapping$_t_address_$_t_contract$_Token_$794_$",
                                    typeString: "mapping(address => contract Token)"
                                  }
                                },
                                id: 396,
                                indexExpression: {
                                  argumentTypes: null,
                                  id: 395,
                                  name: "curr",
                                  nodeType: "Identifier",
                                  overloadedDeclarations: [],
                                  referencedDeclaration: 387,
                                  src: "3851:4:0",
                                  typeDescriptions: {
                                    typeIdentifier: "t_address",
                                    typeString: "address"
                                  }
                                },
                                isConstant: false,
                                isLValue: true,
                                isPure: false,
                                lValueRequested: false,
                                nodeType: "IndexAccess",
                                src: "3839:17:0",
                                typeDescriptions: {
                                  typeIdentifier: "t_contract$_Token_$794",
                                  typeString: "contract Token"
                                }
                              },
                              id: 397,
                              isConstant: false,
                              isLValue: false,
                              isPure: false,
                              lValueRequested: false,
                              memberName: "totalSupply",
                              nodeType: "MemberAccess",
                              referencedDeclaration: 776,
                              src: "3839:29:0",
                              typeDescriptions: {
                                typeIdentifier: "t_function_external_view$__$returns$_t_uint256_$",
                                typeString: "function () view external returns (uint256)"
                              }
                            },
                            id: 398,
                            isConstant: false,
                            isLValue: false,
                            isPure: false,
                            kind: "functionCall",
                            lValueRequested: false,
                            names: [],
                            nodeType: "FunctionCall",
                            src: "3839:31:0",
                            typeDescriptions: {
                              typeIdentifier: "t_uint256",
                              typeString: "uint256"
                            }
                          },
                          id: 399,
                          isConstant: false,
                          isLValue: false,
                          isPure: false,
                          lValueRequested: false,
                          memberName: "mul",
                          nodeType: "MemberAccess",
                          referencedDeclaration: 936,
                          src: "3839:35:0",
                          typeDescriptions: {
                            typeIdentifier: "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                            typeString: "function (uint256,uint256) pure returns (uint256)"
                          }
                        },
                        id: 405,
                        isConstant: false,
                        isLValue: false,
                        isPure: false,
                        kind: "functionCall",
                        lValueRequested: false,
                        names: [],
                        nodeType: "FunctionCall",
                        src: "3839:55:0",
                        typeDescriptions: {
                          typeIdentifier: "t_uint256",
                          typeString: "uint256"
                        }
                      }],
                      id: 406,
                      isConstant: false,
                      isInlineArray: false,
                      isLValue: false,
                      isPure: false,
                      lValueRequested: false,
                      nodeType: "TupleExpression",
                      src: "3838:57:0",
                      typeDescriptions: {
                        typeIdentifier: "t_uint256",
                        typeString: "uint256"
                      }
                    },
                    id: 407,
                    isConstant: false,
                    isLValue: false,
                    isPure: false,
                    lValueRequested: false,
                    memberName: "div",
                    nodeType: "MemberAccess",
                    referencedDeclaration: 960,
                    src: "3838:61:0",
                    typeDescriptions: {
                      typeIdentifier: "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                      typeString: "function (uint256,uint256) pure returns (uint256)"
                    }
                  },
                  id: 409,
                  isConstant: false,
                  isLValue: false,
                  isPure: false,
                  kind: "functionCall",
                  lValueRequested: false,
                  names: [],
                  nodeType: "FunctionCall",
                  src: "3838:82:0",
                  typeDescriptions: {
                    typeIdentifier: "t_uint256",
                    typeString: "uint256"
                  }
                },
                nodeType: "VariableDeclarationStatement",
                src: "3824:96:0"
              }, {
                expression: {
                  argumentTypes: null,
                  "arguments": [{
                    argumentTypes: null,
                    commonType: {
                      typeIdentifier: "t_uint256",
                      typeString: "uint256"
                    },
                    id: 421,
                    isConstant: false,
                    isLValue: false,
                    isPure: false,
                    lValueRequested: false,
                    leftExpression: {
                      argumentTypes: null,
                      commonType: {
                        typeIdentifier: "t_uint256",
                        typeString: "uint256"
                      },
                      id: 419,
                      isConstant: false,
                      isLValue: false,
                      isPure: false,
                      lValueRequested: false,
                      leftExpression: {
                        argumentTypes: null,
                        "arguments": [{
                          argumentTypes: null,
                          id: 416,
                          name: "curr",
                          nodeType: "Identifier",
                          overloadedDeclarations: [],
                          referencedDeclaration: 387,
                          src: "3971:4:0",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address"
                          }
                        }],
                        expression: {
                          argumentTypes: [{
                            typeIdentifier: "t_address",
                            typeString: "address"
                          }],
                          expression: {
                            argumentTypes: null,
                            baseExpression: {
                              argumentTypes: null,
                              id: 412,
                              name: "userToToken",
                              nodeType: "Identifier",
                              overloadedDeclarations: [],
                              referencedDeclaration: 24,
                              src: "3943:11:0",
                              typeDescriptions: {
                                typeIdentifier: "t_mapping$_t_address_$_t_contract$_Token_$794_$",
                                typeString: "mapping(address => contract Token)"
                              }
                            },
                            id: 414,
                            indexExpression: {
                              argumentTypes: null,
                              id: 413,
                              name: "prev",
                              nodeType: "Identifier",
                              overloadedDeclarations: [],
                              referencedDeclaration: 371,
                              src: "3955:4:0",
                              typeDescriptions: {
                                typeIdentifier: "t_address",
                                typeString: "address"
                              }
                            },
                            isConstant: false,
                            isLValue: true,
                            isPure: false,
                            lValueRequested: false,
                            nodeType: "IndexAccess",
                            src: "3943:17:0",
                            typeDescriptions: {
                              typeIdentifier: "t_contract$_Token_$794",
                              typeString: "contract Token"
                            }
                          },
                          id: 415,
                          isConstant: false,
                          isLValue: false,
                          isPure: false,
                          lValueRequested: false,
                          memberName: "balanceOf",
                          nodeType: "MemberAccess",
                          referencedDeclaration: 793,
                          src: "3943:27:0",
                          typeDescriptions: {
                            typeIdentifier: "t_function_external_view$_t_address_$returns$_t_uint256_$",
                            typeString: "function (address) view external returns (uint256)"
                          }
                        },
                        id: 417,
                        isConstant: false,
                        isLValue: false,
                        isPure: false,
                        kind: "functionCall",
                        lValueRequested: false,
                        names: [],
                        nodeType: "FunctionCall",
                        src: "3943:33:0",
                        typeDescriptions: {
                          typeIdentifier: "t_uint256",
                          typeString: "uint256"
                        }
                      },
                      nodeType: "BinaryOperation",
                      operator: "+",
                      rightExpression: {
                        argumentTypes: null,
                        id: 418,
                        name: "wad",
                        nodeType: "Identifier",
                        overloadedDeclarations: [],
                        referencedDeclaration: 360,
                        src: "3979:3:0",
                        typeDescriptions: {
                          typeIdentifier: "t_uint256",
                          typeString: "uint256"
                        }
                      },
                      src: "3943:39:0",
                      typeDescriptions: {
                        typeIdentifier: "t_uint256",
                        typeString: "uint256"
                      }
                    },
                    nodeType: "BinaryOperation",
                    operator: "<=",
                    rightExpression: {
                      argumentTypes: null,
                      id: 420,
                      name: "max",
                      nodeType: "Identifier",
                      overloadedDeclarations: [],
                      referencedDeclaration: 393,
                      src: "3986:3:0",
                      typeDescriptions: {
                        typeIdentifier: "t_uint256",
                        typeString: "uint256"
                      }
                    },
                    src: "3943:46:0",
                    typeDescriptions: {
                      typeIdentifier: "t_bool",
                      typeString: "bool"
                    }
                  }, {
                    argumentTypes: null,
                    hexValue: "5472757374206c696d6974206578636565646564",
                    id: 422,
                    isConstant: false,
                    isLValue: false,
                    isPure: true,
                    kind: "string",
                    lValueRequested: false,
                    nodeType: "Literal",
                    src: "3991:22:0",
                    subdenomination: null,
                    typeDescriptions: {
                      typeIdentifier: "t_stringliteral_bfd65915118c90a8f528a4497fd37b2c98d1b399053d7d29cf1cda0cd1d9b348",
                      typeString: "literal_string \"Trust limit exceeded\""
                    },
                    value: "Trust limit exceeded"
                  }],
                  expression: {
                    argumentTypes: [{
                      typeIdentifier: "t_bool",
                      typeString: "bool"
                    }, {
                      typeIdentifier: "t_stringliteral_bfd65915118c90a8f528a4497fd37b2c98d1b399053d7d29cf1cda0cd1d9b348",
                      typeString: "literal_string \"Trust limit exceeded\""
                    }],
                    id: 411,
                    name: "require",
                    nodeType: "Identifier",
                    overloadedDeclarations: [1548, 1549],
                    referencedDeclaration: 1549,
                    src: "3935:7:0",
                    typeDescriptions: {
                      typeIdentifier: "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                      typeString: "function (bool,string memory) pure"
                    }
                  },
                  id: 423,
                  isConstant: false,
                  isLValue: false,
                  isPure: false,
                  kind: "functionCall",
                  lValueRequested: false,
                  names: [],
                  nodeType: "FunctionCall",
                  src: "3935:79:0",
                  typeDescriptions: {
                    typeIdentifier: "t_tuple$__$",
                    typeString: "tuple()"
                  }
                },
                id: 424,
                nodeType: "ExpressionStatement",
                src: "3935:79:0"
              }, {
                expression: {
                  argumentTypes: null,
                  "arguments": [{
                    argumentTypes: null,
                    id: 429,
                    name: "prev",
                    nodeType: "Identifier",
                    overloadedDeclarations: [],
                    referencedDeclaration: 371,
                    src: "4059:4:0",
                    typeDescriptions: {
                      typeIdentifier: "t_address",
                      typeString: "address"
                    }
                  }, {
                    argumentTypes: null,
                    id: 430,
                    name: "curr",
                    nodeType: "Identifier",
                    overloadedDeclarations: [],
                    referencedDeclaration: 387,
                    src: "4065:4:0",
                    typeDescriptions: {
                      typeIdentifier: "t_address",
                      typeString: "address"
                    }
                  }, {
                    argumentTypes: null,
                    id: 431,
                    name: "wad",
                    nodeType: "Identifier",
                    overloadedDeclarations: [],
                    referencedDeclaration: 360,
                    src: "4071:3:0",
                    typeDescriptions: {
                      typeIdentifier: "t_uint256",
                      typeString: "uint256"
                    }
                  }],
                  expression: {
                    argumentTypes: [{
                      typeIdentifier: "t_address",
                      typeString: "address"
                    }, {
                      typeIdentifier: "t_address",
                      typeString: "address"
                    }, {
                      typeIdentifier: "t_uint256",
                      typeString: "uint256"
                    }],
                    expression: {
                      argumentTypes: null,
                      baseExpression: {
                        argumentTypes: null,
                        id: 425,
                        name: "userToToken",
                        nodeType: "Identifier",
                        overloadedDeclarations: [],
                        referencedDeclaration: 24,
                        src: "4029:11:0",
                        typeDescriptions: {
                          typeIdentifier: "t_mapping$_t_address_$_t_contract$_Token_$794_$",
                          typeString: "mapping(address => contract Token)"
                        }
                      },
                      id: 427,
                      indexExpression: {
                        argumentTypes: null,
                        id: 426,
                        name: "prev",
                        nodeType: "Identifier",
                        overloadedDeclarations: [],
                        referencedDeclaration: 371,
                        src: "4041:4:0",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      isConstant: false,
                      isLValue: true,
                      isPure: false,
                      lValueRequested: false,
                      nodeType: "IndexAccess",
                      src: "4029:17:0",
                      typeDescriptions: {
                        typeIdentifier: "t_contract$_Token_$794",
                        typeString: "contract Token"
                      }
                    },
                    id: 428,
                    isConstant: false,
                    isLValue: false,
                    isPure: false,
                    lValueRequested: false,
                    memberName: "hubTransfer",
                    nodeType: "MemberAccess",
                    referencedDeclaration: 723,
                    src: "4029:29:0",
                    typeDescriptions: {
                      typeIdentifier: "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
                      typeString: "function (address,address,uint256) external returns (bool)"
                    }
                  },
                  id: 432,
                  isConstant: false,
                  isLValue: false,
                  isPure: false,
                  kind: "functionCall",
                  lValueRequested: false,
                  names: [],
                  nodeType: "FunctionCall",
                  src: "4029:46:0",
                  typeDescriptions: {
                    typeIdentifier: "t_bool",
                    typeString: "bool"
                  }
                },
                id: 433,
                nodeType: "ExpressionStatement",
                src: "4029:46:0"
              }, {
                expression: {
                  argumentTypes: null,
                  id: 436,
                  isConstant: false,
                  isLValue: false,
                  isPure: false,
                  lValueRequested: false,
                  leftHandSide: {
                    argumentTypes: null,
                    id: 434,
                    name: "prev",
                    nodeType: "Identifier",
                    overloadedDeclarations: [],
                    referencedDeclaration: 371,
                    src: "4089:4:0",
                    typeDescriptions: {
                      typeIdentifier: "t_address",
                      typeString: "address"
                    }
                  },
                  nodeType: "Assignment",
                  operator: "=",
                  rightHandSide: {
                    argumentTypes: null,
                    id: 435,
                    name: "curr",
                    nodeType: "Identifier",
                    overloadedDeclarations: [],
                    referencedDeclaration: 387,
                    src: "4096:4:0",
                    typeDescriptions: {
                      typeIdentifier: "t_address",
                      typeString: "address"
                    }
                  },
                  src: "4089:11:0",
                  typeDescriptions: {
                    typeIdentifier: "t_address",
                    typeString: "address"
                  }
                },
                id: 437,
                nodeType: "ExpressionStatement",
                src: "4089:11:0"
              }]
            },
            condition: {
              argumentTypes: null,
              commonType: {
                typeIdentifier: "t_uint256",
                typeString: "uint256"
              },
              id: 382,
              isConstant: false,
              isLValue: false,
              isPure: false,
              lValueRequested: false,
              leftExpression: {
                argumentTypes: null,
                id: 379,
                name: "i",
                nodeType: "Identifier",
                overloadedDeclarations: [],
                referencedDeclaration: 376,
                src: "3750:1:0",
                typeDescriptions: {
                  typeIdentifier: "t_uint256",
                  typeString: "uint256"
                }
              },
              nodeType: "BinaryOperation",
              operator: "<",
              rightExpression: {
                argumentTypes: null,
                expression: {
                  argumentTypes: null,
                  id: 380,
                  name: "users",
                  nodeType: "Identifier",
                  overloadedDeclarations: [],
                  referencedDeclaration: 358,
                  src: "3754:5:0",
                  typeDescriptions: {
                    typeIdentifier: "t_array$_t_address_$dyn_memory_ptr",
                    typeString: "address[] memory"
                  }
                },
                id: 381,
                isConstant: false,
                isLValue: false,
                isPure: false,
                lValueRequested: false,
                memberName: "length",
                nodeType: "MemberAccess",
                referencedDeclaration: null,
                src: "3754:12:0",
                typeDescriptions: {
                  typeIdentifier: "t_uint256",
                  typeString: "uint256"
                }
              },
              src: "3750:16:0",
              typeDescriptions: {
                typeIdentifier: "t_bool",
                typeString: "bool"
              }
            },
            id: 439,
            initializationExpression: {
              assignments: [376],
              declarations: [{
                constant: false,
                id: 376,
                name: "i",
                nodeType: "VariableDeclaration",
                scope: 439,
                src: "3738:6:0",
                stateVariable: false,
                storageLocation: "default",
                typeDescriptions: {
                  typeIdentifier: "t_uint256",
                  typeString: "uint256"
                },
                typeName: {
                  id: 375,
                  name: "uint",
                  nodeType: "ElementaryTypeName",
                  src: "3738:4:0",
                  typeDescriptions: {
                    typeIdentifier: "t_uint256",
                    typeString: "uint256"
                  }
                },
                value: null,
                visibility: "internal"
              }],
              id: 378,
              initialValue: {
                argumentTypes: null,
                hexValue: "30",
                id: 377,
                isConstant: false,
                isLValue: false,
                isPure: true,
                kind: "number",
                lValueRequested: false,
                nodeType: "Literal",
                src: "3747:1:0",
                subdenomination: null,
                typeDescriptions: {
                  typeIdentifier: "t_rational_0_by_1",
                  typeString: "int_const 0"
                },
                value: "0"
              },
              nodeType: "VariableDeclarationStatement",
              src: "3738:10:0"
            },
            loopExpression: {
              expression: {
                argumentTypes: null,
                id: 384,
                isConstant: false,
                isLValue: false,
                isPure: false,
                lValueRequested: false,
                nodeType: "UnaryOperation",
                operator: "++",
                prefix: false,
                src: "3768:3:0",
                subExpression: {
                  argumentTypes: null,
                  id: 383,
                  name: "i",
                  nodeType: "Identifier",
                  overloadedDeclarations: [],
                  referencedDeclaration: 376,
                  src: "3768:1:0",
                  typeDescriptions: {
                    typeIdentifier: "t_uint256",
                    typeString: "uint256"
                  }
                },
                typeDescriptions: {
                  typeIdentifier: "t_uint256",
                  typeString: "uint256"
                }
              },
              id: 385,
              nodeType: "ExpressionStatement",
              src: "3768:3:0"
            },
            nodeType: "ForStatement",
            src: "3733:379:0"
          }]
        },
        documentation: null,
        id: 441,
        implemented: true,
        kind: "function",
        modifiers: [],
        name: "transferThrough",
        nodeType: "FunctionDefinition",
        parameters: {
          id: 361,
          nodeType: "ParameterList",
          parameters: [{
            constant: false,
            id: 358,
            name: "users",
            nodeType: "VariableDeclaration",
            scope: 441,
            src: "3611:22:0",
            stateVariable: false,
            storageLocation: "memory",
            typeDescriptions: {
              typeIdentifier: "t_array$_t_address_$dyn_memory_ptr",
              typeString: "address[]"
            },
            typeName: {
              baseType: {
                id: 356,
                name: "address",
                nodeType: "ElementaryTypeName",
                src: "3611:7:0",
                stateMutability: "nonpayable",
                typeDescriptions: {
                  typeIdentifier: "t_address",
                  typeString: "address"
                }
              },
              id: 357,
              length: null,
              nodeType: "ArrayTypeName",
              src: "3611:9:0",
              typeDescriptions: {
                typeIdentifier: "t_array$_t_address_$dyn_storage_ptr",
                typeString: "address[]"
              }
            },
            value: null,
            visibility: "internal"
          }, {
            constant: false,
            id: 360,
            name: "wad",
            nodeType: "VariableDeclaration",
            scope: 441,
            src: "3635:8:0",
            stateVariable: false,
            storageLocation: "default",
            typeDescriptions: {
              typeIdentifier: "t_uint256",
              typeString: "uint256"
            },
            typeName: {
              id: 359,
              name: "uint",
              nodeType: "ElementaryTypeName",
              src: "3635:4:0",
              typeDescriptions: {
                typeIdentifier: "t_uint256",
                typeString: "uint256"
              }
            },
            value: null,
            visibility: "internal"
          }],
          src: "3610:34:0"
        },
        returnParameters: {
          id: 362,
          nodeType: "ParameterList",
          parameters: [],
          src: "3652:0:0"
        },
        scope: 442,
        src: "3586:532:0",
        stateMutability: "nonpayable",
        superFunction: null,
        visibility: "public"
      }],
      scope: 443,
      src: "284:3837:0"
    }],
    src: "0:4123:0"
  };
  var compiler$1 = {
    name: "solc",
    version: "0.5.0+commit.1d4f565a.Emscripten.clang"
  };
  var networks$1 = {};
  var schemaVersion$1 = "3.0.8";
  var updatedAt$1 = "2019-08-30T13:01:38.614Z";
  var devdoc = {
    methods: {}
  };
  var userdoc = {
    methods: {}
  };
  var HubContract = {
    contractName: contractName$1,
    abi: abi$1,
    metadata: metadata,
    bytecode: bytecode$1,
    deployedBytecode: deployedBytecode$1,
    sourceMap: sourceMap$1,
    deployedSourceMap: deployedSourceMap$1,
    source: source$1,
    sourcePath: sourcePath,
    ast: ast,
    legacyAST: legacyAST,
    compiler: compiler$1,
    networks: networks$1,
    schemaVersion: schemaVersion$1,
    updatedAt: updatedAt$1,
    devdoc: devdoc,
    userdoc: userdoc
  };

  var contractName$2 = "ProxyFactory";
  var abi$2 = [{
    anonymous: false,
    inputs: [{
      indexed: false,
      name: "proxy",
      type: "address"
    }],
    name: "ProxyCreation",
    type: "event"
  }, {
    constant: false,
    inputs: [{
      name: "masterCopy",
      type: "address"
    }, {
      name: "data",
      type: "bytes"
    }],
    name: "createProxy",
    outputs: [{
      name: "proxy",
      type: "address"
    }],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  }, {
    constant: true,
    inputs: [],
    name: "proxyRuntimeCode",
    outputs: [{
      name: "",
      type: "bytes"
    }],
    payable: false,
    stateMutability: "pure",
    type: "function"
  }, {
    constant: true,
    inputs: [],
    name: "proxyCreationCode",
    outputs: [{
      name: "",
      type: "bytes"
    }],
    payable: false,
    stateMutability: "pure",
    type: "function"
  }, {
    constant: false,
    inputs: [{
      name: "_mastercopy",
      type: "address"
    }, {
      name: "initializer",
      type: "bytes"
    }, {
      name: "saltNonce",
      type: "uint256"
    }],
    name: "createProxyWithNonce",
    outputs: [{
      name: "proxy",
      type: "address"
    }],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  }];
  var bytecode$2 = "0x608060405234801561001057600080fd5b506108c4806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80631688f0b91461005157806353e5d9351461017657806361b69abd146101f9578063addacc0f14610314575b600080fd5b6101346004803603606081101561006757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156100a457600080fd5b8201836020820111156100b657600080fd5b803590602001918460018302840111640100000000831117156100d857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190505050610397565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61017e610520565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101be5780820151818401526020810190506101a3565b50505050905090810190601f1680156101eb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102d26004803603604081101561020f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561024c57600080fd5b82018360208201111561025e57600080fd5b8035906020019184600183028401116401000000008311171561028057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061054b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61031c61063e565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561035c578082015181840152602081019050610341565b50505050905090810190601f1680156103895780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60008083805190602001208360405160200180838152602001828152602001925050506040516020818303038152906040528051906020012090506060604051806020016103e490610669565b6020820181038252601f19601f820116604052508673ffffffffffffffffffffffffffffffffffffffff166040516020018083805190602001908083835b602083106104455780518252602082019150602081019050602083039250610422565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001925050506040516020818303038152906040529050818151826020016000f592506000855111156104b45760008060008751602089016000885af114156104b357600080fd5b5b7fa38789425dbeee0239e16ff2d2567e31720127fbc6430758c1a4efc6aef29f8083604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150509392505050565b60606040518060200161053290610669565b6020820181038252601f19601f82011660405250905090565b60008260405161055a90610669565b808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050604051809103906000f0801580156105ac573d6000803e3d6000fd5b5090506000825111156105d55760008060008451602086016000865af114156105d457600080fd5b5b7fa38789425dbeee0239e16ff2d2567e31720127fbc6430758c1a4efc6aef29f8081604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a192915050565b60606040518060200161065090610676565b6020820181038252601f19601f82011660405250905090565b6101a88061068383390190565b606e8061082b8339019056fe608060405234801561001057600080fd5b506040516020806101a88339810180604052602081101561003057600080fd5b8101908080519060200190929190505050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156100c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806101846024913960400191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050606e806101166000396000f3fe608060405273ffffffffffffffffffffffffffffffffffffffff600054163660008037600080366000845af43d6000803e6000811415603d573d6000fd5b3d6000f3fea165627a7a72305820b3fbc7c732e0ba4fe8f4e6420895dbae05bfc5c24169a83a550c4886e7cb758c0029496e76616c6964206d617374657220636f707920616464726573732070726f7669646564608060405273ffffffffffffffffffffffffffffffffffffffff600054163660008037600080366000845af43d6000803e6000811415603d573d6000fd5b3d6000f3fea165627a7a72305820b3fbc7c732e0ba4fe8f4e6420895dbae05bfc5c24169a83a550c4886e7cb758c0029a165627a7a72305820c84e79d7018d16e549e0ded23615c044e79df66e6e638617942495d028cf90000029";
  var deployedBytecode$2 = "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80631688f0b91461005157806353e5d9351461017657806361b69abd146101f9578063addacc0f14610314575b600080fd5b6101346004803603606081101561006757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156100a457600080fd5b8201836020820111156100b657600080fd5b803590602001918460018302840111640100000000831117156100d857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190505050610397565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61017e610520565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101be5780820151818401526020810190506101a3565b50505050905090810190601f1680156101eb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102d26004803603604081101561020f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561024c57600080fd5b82018360208201111561025e57600080fd5b8035906020019184600183028401116401000000008311171561028057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061054b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61031c61063e565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561035c578082015181840152602081019050610341565b50505050905090810190601f1680156103895780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60008083805190602001208360405160200180838152602001828152602001925050506040516020818303038152906040528051906020012090506060604051806020016103e490610669565b6020820181038252601f19601f820116604052508673ffffffffffffffffffffffffffffffffffffffff166040516020018083805190602001908083835b602083106104455780518252602082019150602081019050602083039250610422565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001925050506040516020818303038152906040529050818151826020016000f592506000855111156104b45760008060008751602089016000885af114156104b357600080fd5b5b7fa38789425dbeee0239e16ff2d2567e31720127fbc6430758c1a4efc6aef29f8083604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150509392505050565b60606040518060200161053290610669565b6020820181038252601f19601f82011660405250905090565b60008260405161055a90610669565b808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050604051809103906000f0801580156105ac573d6000803e3d6000fd5b5090506000825111156105d55760008060008451602086016000865af114156105d457600080fd5b5b7fa38789425dbeee0239e16ff2d2567e31720127fbc6430758c1a4efc6aef29f8081604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a192915050565b60606040518060200161065090610676565b6020820181038252601f19601f82011660405250905090565b6101a88061068383390190565b606e8061082b8339019056fe608060405234801561001057600080fd5b506040516020806101a88339810180604052602081101561003057600080fd5b8101908080519060200190929190505050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156100c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806101846024913960400191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050606e806101166000396000f3fe608060405273ffffffffffffffffffffffffffffffffffffffff600054163660008037600080366000845af43d6000803e6000811415603d573d6000fd5b3d6000f3fea165627a7a72305820b3fbc7c732e0ba4fe8f4e6420895dbae05bfc5c24169a83a550c4886e7cb758c0029496e76616c6964206d617374657220636f707920616464726573732070726f7669646564608060405273ffffffffffffffffffffffffffffffffffffffff600054163660008037600080366000845af43d6000803e6000811415603d573d6000fd5b3d6000f3fea165627a7a72305820b3fbc7c732e0ba4fe8f4e6420895dbae05bfc5c24169a83a550c4886e7cb758c0029a165627a7a72305820c84e79d7018d16e549e0ded23615c044e79df66e6e638617942495d028cf90000029";
  var sourceMap$2 = "225:2576:25:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;225:2576:25;;;;;;;";
  var deployedSourceMap$2 = "225:2576:25:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;225:2576:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1843:956;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1843:956:25;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;1843:956:25;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;1843:956:25;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;1843:956:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;1843:956:25;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1356:112;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;1356:112:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;532:423;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;532:423:25;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;532:423:25;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;532:423:25;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;532:423:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;532:423:25;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1095:110;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;1095:110:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1843:956;1971:11;2140:12;2192:11;2182:22;;;;;;2206:9;2165:51;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;2165:51:25;;;2155:62;;;;;;2140:77;;2227:27;2274:24;;;;;;;;:::i;:::-;41:4:-1;34:5;30:16;25:3;21:26;14:5;7:41;87:2;83:7;78:2;73:3;69:12;65:26;61:2;54:38;2274:24:25;2308:11;2300:20;;2257:64;;;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;2257:64:25;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;2257:64:25;;;2227:94;;2490:4;2473:14;2467:21;2450:14;2444:4;2440:25;2435:3;2427:68;2418:77;;2539:1;2518:11;:18;:22;2514:257;;;2726:1;2722;2719;2705:11;2699:18;2692:4;2679:11;2675:22;2672:1;2665:5;2660:3;2655:69;2652:76;2649:2;;;2740:1;2738;2731:11;2649:2;2631:127;2772:20;2786:5;2772:20;;;;;;;;;;;;;;;;;;;;;;1843:956;;;;;;;:::o;1356:112::-;1406:12;1437:24;;;;;;;;:::i;:::-;41:4:-1;34:5;30:16;25:3;21:26;14:5;7:41;87:2;83:7;78:2;73:3;69:12;65:26;61:2;54:38;1437:24:25;1430:31;;1356:112;:::o;532:423::-;624:11;669:10;659:21;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;659:21:25;651:29;;708:1;694:4;:11;:15;690:237;;;881:1;877;874;867:4;861:11;854:4;848;844:15;841:1;834:5;829:3;824:55;821:62;818:2;;;896:1;893;886:12;818:2;800:114;928:20;942:5;928:20;;;;;;;;;;;;;;;;;;;;;;532:423;;;;:::o;1095:110::-;1144:12;1175:23;;;;;;;;:::i;:::-;41:4:-1;34:5;30:16;25:3;21:26;14:5;7:41;87:2;83:7;78:2;73:3;69:12;65:26;61:2;54:38;1175:23:25;1168:30;;1095:110;:::o;225:2576::-;;;;;;;;:::o;:::-;;;;;;;;:::o";
  var source$2 = "pragma solidity ^0.5.3;\nimport \"./Proxy.sol\";\n\n\n/// @title Proxy Factory - Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\n/// @author Stefan George - <stefan@gnosis.pm>\ncontract ProxyFactory {\n\n    event ProxyCreation(Proxy proxy);\n\n    /// @dev Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\n    /// @param masterCopy Address of master copy.\n    /// @param data Payload for message call sent to new proxy contract.\n    function createProxy(address masterCopy, bytes memory data)\n        public\n        returns (Proxy proxy)\n    {\n        proxy = new Proxy(masterCopy);\n        if (data.length > 0)\n            // solium-disable-next-line security/no-inline-assembly\n            assembly {\n                if eq(call(gas, proxy, 0, add(data, 0x20), mload(data), 0, 0), 0) { revert(0, 0) }\n            }\n        emit ProxyCreation(proxy);\n    }\n\n    /// @dev Allows to retrieve the runtime code of a deployed Proxy. This can be used to check that the expected Proxy was deployed.\n    function proxyRuntimeCode() public pure returns (bytes memory) {\n        return type(Proxy).runtimeCode;\n    }\n\n    /// @dev Allows to retrieve the creation code used for the Proxy deployment. With this it is easily possible to calculate predicted address.\n    function proxyCreationCode() public pure returns (bytes memory) {\n        return type(Proxy).creationCode;\n    }\n\n    /// @dev Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\n    /// @param _mastercopy Address of master copy.\n    /// @param initializer Payload for message call sent to new proxy contract.\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\n    function createProxyWithNonce(address _mastercopy, bytes memory initializer, uint256 saltNonce)\n        public\n        returns (Proxy proxy)\n    {\n        // If the initializer changes the proxy address should change too. Hashing the initializer data is cheaper than just concatinating it\n        bytes32 salt = keccak256(abi.encodePacked(keccak256(initializer), saltNonce));\n        bytes memory deploymentData = abi.encodePacked(type(Proxy).creationCode, uint256(_mastercopy));\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            proxy := create2(0x0, add(0x20, deploymentData), mload(deploymentData), salt)\n        }\n        if (initializer.length > 0)\n            // solium-disable-next-line security/no-inline-assembly\n            assembly {\n                if eq(call(gas, proxy, 0, add(initializer, 0x20), mload(initializer), 0, 0), 0) { revert(0,0) }\n            }\n        emit ProxyCreation(proxy);\n    }\n}\n";
  var compiler$2 = {
    name: "solc",
    version: "0.5.7+commit.6da8b019.Emscripten.clang"
  };
  var networks$2 = {
    "1": {
      links: {},
      events: {},
      address: "0x12302fE9c02ff50939BaAaaf415fc226C078613C",
      updated_at: 1554371714125
    },
    "4": {
      links: {},
      events: {},
      address: "0x12302fE9c02ff50939BaAaaf415fc226C078613C",
      updated_at: 1554371714146
    },
    "5": {
      links: {},
      events: {},
      address: "0x12302fE9c02ff50939BaAaaf415fc226C078613C",
      updated_at: 1554371714181
    },
    "42": {
      links: {},
      events: {},
      address: "0x12302fE9c02ff50939BaAaaf415fc226C078613C",
      updated_at: 1554371714162
    }
  };
  var schemaVersion$2 = "2.0.1";
  var updatedAt$2 = "2019-04-04T09:55:13.711Z";
  var ProxyFactoryContract = {
    contractName: contractName$2,
    abi: abi$2,
    bytecode: bytecode$2,
    deployedBytecode: deployedBytecode$2,
    sourceMap: sourceMap$2,
    deployedSourceMap: deployedSourceMap$2,
    source: source$2,
    compiler: compiler$2,
    networks: networks$2,
    schemaVersion: schemaVersion$2,
    updatedAt: updatedAt$2
  };

  function getContract(web3, abi, address) {
    return new web3.eth.Contract(abi, address);
  }
  function getSafeContract(web3, address) {
    return getContract(web3, GnosisSafeContract.abi, address);
  }
  function getContracts(web3, options) {
    var safeMasterAddress = options.safeMasterAddress,
        proxyFactoryAddress = options.proxyFactoryAddress,
        hubAddress = options.hubAddress;
    var safeMaster = getSafeContract(web3, safeMasterAddress);
    var proxyFactory = getContract(web3, ProxyFactoryContract.abi, proxyFactoryAddress);
    var hub = getContract(web3, HubContract.abi, hubAddress);
    return {
      hub: hub,
      proxyFactory: proxyFactory,
      safeMaster: safeMaster
    };
  }

  var runtime_1 = createCommonjsModule(function (module) {
    var runtime = function (exports) {
      var Op = Object.prototype;
      var hasOwn = Op.hasOwnProperty;
      var undefined$1;
      var $Symbol = typeof Symbol === "function" ? Symbol : {};
      var iteratorSymbol = $Symbol.iterator || "@@iterator";
      var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
      var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
      function wrap(innerFn, outerFn, self, tryLocsList) {
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
        var generator = Object.create(protoGenerator.prototype);
        var context = new Context(tryLocsList || []);
        generator._invoke = makeInvokeMethod(innerFn, self, context);
        return generator;
      }
      exports.wrap = wrap;
      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }
      var GenStateSuspendedStart = "suspendedStart";
      var GenStateSuspendedYield = "suspendedYield";
      var GenStateExecuting = "executing";
      var GenStateCompleted = "completed";
      var ContinueSentinel = {};
      function Generator() {}
      function GeneratorFunction() {}
      function GeneratorFunctionPrototype() {}
      var IteratorPrototype = {};
      IteratorPrototype[iteratorSymbol] = function () {
        return this;
      };
      var getProto = Object.getPrototypeOf;
      var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
      if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
        IteratorPrototype = NativeIteratorPrototype;
      }
      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
      GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
      GeneratorFunctionPrototype.constructor = GeneratorFunction;
      GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction";
      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function (method) {
          prototype[method] = function (arg) {
            return this._invoke(method, arg);
          };
        });
      }
      exports.isGeneratorFunction = function (genFun) {
        var ctor = typeof genFun === "function" && genFun.constructor;
        return ctor ? ctor === GeneratorFunction ||
        (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
      };
      exports.mark = function (genFun) {
        if (Object.setPrototypeOf) {
          Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
        } else {
          genFun.__proto__ = GeneratorFunctionPrototype;
          if (!(toStringTagSymbol in genFun)) {
            genFun[toStringTagSymbol] = "GeneratorFunction";
          }
        }
        genFun.prototype = Object.create(Gp);
        return genFun;
      };
      exports.awrap = function (arg) {
        return {
          __await: arg
        };
      };
      function AsyncIterator(generator) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);
          if (record.type === "throw") {
            reject(record.arg);
          } else {
            var result = record.arg;
            var value = result.value;
            if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
              return Promise.resolve(value.__await).then(function (value) {
                invoke("next", value, resolve, reject);
              }, function (err) {
                invoke("throw", err, resolve, reject);
              });
            }
            return Promise.resolve(value).then(function (unwrapped) {
              result.value = unwrapped;
              resolve(result);
            }, function (error) {
              return invoke("throw", error, resolve, reject);
            });
          }
        }
        var previousPromise;
        function enqueue(method, arg) {
          function callInvokeWithMethodAndArg() {
            return new Promise(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }
          return previousPromise =
          previousPromise ? previousPromise.then(callInvokeWithMethodAndArg,
          callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        }
        this._invoke = enqueue;
      }
      defineIteratorMethods(AsyncIterator.prototype);
      AsyncIterator.prototype[asyncIteratorSymbol] = function () {
        return this;
      };
      exports.AsyncIterator = AsyncIterator;
      exports.async = function (innerFn, outerFn, self, tryLocsList) {
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));
        return exports.isGeneratorFunction(outerFn) ? iter
        : iter.next().then(function (result) {
          return result.done ? result.value : iter.next();
        });
      };
      function makeInvokeMethod(innerFn, self, context) {
        var state = GenStateSuspendedStart;
        return function invoke(method, arg) {
          if (state === GenStateExecuting) {
            throw new Error("Generator is already running");
          }
          if (state === GenStateCompleted) {
            if (method === "throw") {
              throw arg;
            }
            return doneResult();
          }
          context.method = method;
          context.arg = arg;
          while (true) {
            var delegate = context.delegate;
            if (delegate) {
              var delegateResult = maybeInvokeDelegate(delegate, context);
              if (delegateResult) {
                if (delegateResult === ContinueSentinel) continue;
                return delegateResult;
              }
            }
            if (context.method === "next") {
              context.sent = context._sent = context.arg;
            } else if (context.method === "throw") {
              if (state === GenStateSuspendedStart) {
                state = GenStateCompleted;
                throw context.arg;
              }
              context.dispatchException(context.arg);
            } else if (context.method === "return") {
              context.abrupt("return", context.arg);
            }
            state = GenStateExecuting;
            var record = tryCatch(innerFn, self, context);
            if (record.type === "normal") {
              state = context.done ? GenStateCompleted : GenStateSuspendedYield;
              if (record.arg === ContinueSentinel) {
                continue;
              }
              return {
                value: record.arg,
                done: context.done
              };
            } else if (record.type === "throw") {
              state = GenStateCompleted;
              context.method = "throw";
              context.arg = record.arg;
            }
          }
        };
      }
      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];
        if (method === undefined$1) {
          context.delegate = null;
          if (context.method === "throw") {
            if (delegate.iterator["return"]) {
              context.method = "return";
              context.arg = undefined$1;
              maybeInvokeDelegate(delegate, context);
              if (context.method === "throw") {
                return ContinueSentinel;
              }
            }
            context.method = "throw";
            context.arg = new TypeError("The iterator does not provide a 'throw' method");
          }
          return ContinueSentinel;
        }
        var record = tryCatch(method, delegate.iterator, context.arg);
        if (record.type === "throw") {
          context.method = "throw";
          context.arg = record.arg;
          context.delegate = null;
          return ContinueSentinel;
        }
        var info = record.arg;
        if (!info) {
          context.method = "throw";
          context.arg = new TypeError("iterator result is not an object");
          context.delegate = null;
          return ContinueSentinel;
        }
        if (info.done) {
          context[delegate.resultName] = info.value;
          context.next = delegate.nextLoc;
          if (context.method !== "return") {
            context.method = "next";
            context.arg = undefined$1;
          }
        } else {
          return info;
        }
        context.delegate = null;
        return ContinueSentinel;
      }
      defineIteratorMethods(Gp);
      Gp[toStringTagSymbol] = "Generator";
      Gp[iteratorSymbol] = function () {
        return this;
      };
      Gp.toString = function () {
        return "[object Generator]";
      };
      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };
        if (1 in locs) {
          entry.catchLoc = locs[1];
        }
        if (2 in locs) {
          entry.finallyLoc = locs[2];
          entry.afterLoc = locs[3];
        }
        this.tryEntries.push(entry);
      }
      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal";
        delete record.arg;
        entry.completion = record;
      }
      function Context(tryLocsList) {
        this.tryEntries = [{
          tryLoc: "root"
        }];
        tryLocsList.forEach(pushTryEntry, this);
        this.reset(true);
      }
      exports.keys = function (object) {
        var keys = [];
        for (var key in object) {
          keys.push(key);
        }
        keys.reverse();
        return function next() {
          while (keys.length) {
            var key = keys.pop();
            if (key in object) {
              next.value = key;
              next.done = false;
              return next;
            }
          }
          next.done = true;
          return next;
        };
      };
      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod) {
            return iteratorMethod.call(iterable);
          }
          if (typeof iterable.next === "function") {
            return iterable;
          }
          if (!isNaN(iterable.length)) {
            var i = -1,
                next = function next() {
              while (++i < iterable.length) {
                if (hasOwn.call(iterable, i)) {
                  next.value = iterable[i];
                  next.done = false;
                  return next;
                }
              }
              next.value = undefined$1;
              next.done = true;
              return next;
            };
            return next.next = next;
          }
        }
        return {
          next: doneResult
        };
      }
      exports.values = values;
      function doneResult() {
        return {
          value: undefined$1,
          done: true
        };
      }
      Context.prototype = {
        constructor: Context,
        reset: function (skipTempReset) {
          this.prev = 0;
          this.next = 0;
          this.sent = this._sent = undefined$1;
          this.done = false;
          this.delegate = null;
          this.method = "next";
          this.arg = undefined$1;
          this.tryEntries.forEach(resetTryEntry);
          if (!skipTempReset) {
            for (var name in this) {
              if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
                this[name] = undefined$1;
              }
            }
          }
        },
        stop: function () {
          this.done = true;
          var rootEntry = this.tryEntries[0];
          var rootRecord = rootEntry.completion;
          if (rootRecord.type === "throw") {
            throw rootRecord.arg;
          }
          return this.rval;
        },
        dispatchException: function (exception) {
          if (this.done) {
            throw exception;
          }
          var context = this;
          function handle(loc, caught) {
            record.type = "throw";
            record.arg = exception;
            context.next = loc;
            if (caught) {
              context.method = "next";
              context.arg = undefined$1;
            }
            return !!caught;
          }
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            var record = entry.completion;
            if (entry.tryLoc === "root") {
              return handle("end");
            }
            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc");
              var hasFinally = hasOwn.call(entry, "finallyLoc");
              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                } else if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                }
              } else if (hasFinally) {
                if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }
              } else {
                throw new Error("try statement without catch or finally");
              }
            }
          }
        },
        abrupt: function (type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }
          if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
            finallyEntry = null;
          }
          var record = finallyEntry ? finallyEntry.completion : {};
          record.type = type;
          record.arg = arg;
          if (finallyEntry) {
            this.method = "next";
            this.next = finallyEntry.finallyLoc;
            return ContinueSentinel;
          }
          return this.complete(record);
        },
        complete: function (record, afterLoc) {
          if (record.type === "throw") {
            throw record.arg;
          }
          if (record.type === "break" || record.type === "continue") {
            this.next = record.arg;
          } else if (record.type === "return") {
            this.rval = this.arg = record.arg;
            this.method = "return";
            this.next = "end";
          } else if (record.type === "normal" && afterLoc) {
            this.next = afterLoc;
          }
          return ContinueSentinel;
        },
        finish: function (finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.finallyLoc === finallyLoc) {
              this.complete(entry.completion, entry.afterLoc);
              resetTryEntry(entry);
              return ContinueSentinel;
            }
          }
        },
        "catch": function (tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;
              if (record.type === "throw") {
                var thrown = record.arg;
                resetTryEntry(entry);
              }
              return thrown;
            }
          }
          throw new Error("illegal catch attempt");
        },
        delegateYield: function (iterable, resultName, nextLoc) {
          this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          };
          if (this.method === "next") {
            this.arg = undefined$1;
          }
          return ContinueSentinel;
        }
      };
      return exports;
    }(
     module.exports );
    try {
      regeneratorRuntime = runtime;
    } catch (accidentalStrictMode) {
      Function("r", "regeneratorRuntime = r")(runtime);
    }
  });

  var regenerator = runtime_1;

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }
    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }
  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
          args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);
        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }
        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }
        _next(undefined);
      });
    };
  }
  var asyncToGenerator = _asyncToGenerator;

  var CALL_OP = 0;
  var SAFE_THRESHOLD = 1;
  var SENTINEL_ADDRESS = '0x0000000000000000000000000000000000000001';
  var ZERO_ADDRESS = '0x0000000000000000000000000000000000000000';

  function checkAccount(web3, account) {
    return checkOptions(account, {
      address: web3.utils.isAddress,
      privateKey: web3.utils.isHexStrict
    });
  }

  function _getOwners2(_x, _x2) {
    return _getOwners.apply(this, arguments);
  }
  function _getOwners() {
    _getOwners = asyncToGenerator(
    regenerator.mark(function _callee6(web3, address) {
      var safe;
      return regenerator.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              safe = getSafeContract(web3, address);
              _context6.next = 3;
              return safe.methods.getOwners().call();
            case 3:
              return _context6.abrupt("return", _context6.sent);
            case 4:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6);
    }));
    return _getOwners.apply(this, arguments);
  }
  function createSafeModule(web3, contracts, utils) {
    return {
      prepareDeploy: function () {
        var _prepareDeploy = asyncToGenerator(
        regenerator.mark(function _callee(account, userOptions) {
          var options, response;
          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  checkAccount(web3, account);
                  options = checkOptions(userOptions, {
                    nonce: {
                      type: 'number'
                    }
                  });
                  _context.next = 4;
                  return utils.requestRelayer({
                    path: ['safes'],
                    version: 2,
                    method: 'POST',
                    data: {
                      saltNonce: options.nonce,
                      owners: [account.address],
                      threshold: SAFE_THRESHOLD
                    }
                  });
                case 4:
                  response = _context.sent;
                  return _context.abrupt("return", response.safe);
                case 6:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));
        function prepareDeploy(_x3, _x4) {
          return _prepareDeploy.apply(this, arguments);
        }
        return prepareDeploy;
      }(),
      forceDeploy: function () {
        var _forceDeploy = asyncToGenerator(
        regenerator.mark(function _callee2(account, userOptions) {
          var options;
          return regenerator.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  checkAccount(web3, account);
                  options = checkOptions(userOptions, {
                    address: {
                      type: web3.utils.isAddress
                    }
                  });
                  _context2.next = 4;
                  return utils.requestRelayer({
                    path: ['safes', options.address, 'funded'],
                    version: 2,
                    method: 'PUT'
                  });
                case 4:
                  return _context2.abrupt("return", true);
                case 5:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2);
        }));
        function forceDeploy(_x5, _x6) {
          return _forceDeploy.apply(this, arguments);
        }
        return forceDeploy;
      }(),
      getOwners: function () {
        var _getOwners3 = asyncToGenerator(
        regenerator.mark(function _callee3(account, userOptions) {
          var options;
          return regenerator.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  checkAccount(web3, account);
                  options = checkOptions(userOptions, {
                    address: {
                      type: web3.utils.isAddress
                    }
                  });
                  return _context3.abrupt("return", _getOwners2(web3, options.address));
                case 3:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3);
        }));
        function getOwners(_x7, _x8) {
          return _getOwners3.apply(this, arguments);
        }
        return getOwners;
      }(),
      addOwner: function () {
        var _addOwner = asyncToGenerator(
        regenerator.mark(function _callee4(account, userOptions) {
          var options, safe, txData;
          return regenerator.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  checkAccount(web3, account);
                  options = checkOptions(userOptions, {
                    address: {
                      type: web3.utils.isAddress
                    },
                    owner: {
                      type: web3.utils.isAddress
                    }
                  });
                  safe = getSafeContract(web3, options.address);
                  txData = safe.methods.addOwnerWithThreshold(options.owner, SAFE_THRESHOLD).encodeABI();
                  _context4.next = 6;
                  return utils.executeSafeTx(account, {
                    safeAddress: options.address,
                    to: options.address,
                    txData: txData
                  });
                case 6:
                  return _context4.abrupt("return", _context4.sent);
                case 7:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4);
        }));
        function addOwner(_x9, _x10) {
          return _addOwner.apply(this, arguments);
        }
        return addOwner;
      }(),
      removeOwner: function () {
        var _removeOwner = asyncToGenerator(
        regenerator.mark(function _callee5(account, userOptions) {
          var options, safe, owners, ownerIndex, prevOwner, txData;
          return regenerator.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  checkAccount(web3, account);
                  options = checkOptions(userOptions, {
                    address: {
                      type: web3.utils.isAddress
                    },
                    owner: {
                      type: web3.utils.isAddress
                    }
                  });
                  safe = getSafeContract(web3, options.address);
                  _context5.next = 5;
                  return _getOwners2(web3, options.address);
                case 5:
                  owners = _context5.sent;
                  ownerIndex = owners.findIndex(function (owner) {
                    return owner === options.owner;
                  });
                  prevOwner = ownerIndex > 0 ? owners[ownerIndex - 1] : SENTINEL_ADDRESS;
                  _context5.next = 10;
                  return safe.methods.removeOwner(prevOwner, options.owner, SAFE_THRESHOLD).encodeABI();
                case 10:
                  txData = _context5.sent;
                  _context5.next = 13;
                  return utils.executeSafeTx(account, {
                    safeAddress: options.address,
                    to: options.address,
                    txData: txData
                  });
                case 13:
                  return _context5.abrupt("return", _context5.sent);
                case 14:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5);
        }));
        function removeOwner(_x11, _x12) {
          return _removeOwner.apply(this, arguments);
        }
        return removeOwner;
      }()
    };
  }

  function encode(str) {
    return encodeURIComponent(str);
  }
  function parameterize(obj) {
    if (Object.keys(obj).length === 0) {
      return '';
    }
    return '?' + Object.keys(obj).map(function (key) {
      if (Array.isArray(obj[key])) {
        return obj[key].map(function (item) {
          return "".concat(encode(key), "[]=").concat(encode(item));
        }).join('&');
      }
      return "".concat(encode(key), "=").concat(encode(obj[key]));
    }).join('&');
  }

  function requestRPC(_x, _x2) {
    return _requestRPC.apply(this, arguments);
  }
  function _requestRPC() {
    _requestRPC = asyncToGenerator(
    regenerator.mark(function _callee(web3, method) {
      var params,
          _args = arguments;
      return regenerator.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              params = _args.length > 2 && _args[2] !== undefined ? _args[2] : [];
              return _context.abrupt("return", new Promise(function (resolve, reject) {
                web3.currentProvider.send({
                  jsonrpc: '2.0',
                  id: new Date().getTime(),
                  method: method,
                  params: params
                }, function (error, _ref) {
                  var result = _ref.result;
                  if (error) {
                    return reject(error);
                  }
                  return resolve(result);
                });
              }));
            case 2:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    return _requestRPC.apply(this, arguments);
  }

  function formatTypedData(to, value, data, operation, safeTxGas, dataGas, gasPrice, gasToken, refundReceiver, nonce, verifyingContract) {
    return {
      types: {
        EIP712Domain: [{
          type: 'address',
          name: 'verifyingContract'
        }],
        SafeTx: [{
          type: 'address',
          name: 'to'
        }, {
          type: 'uint256',
          name: 'value'
        }, {
          type: 'bytes',
          name: 'data'
        }, {
          type: 'uint8',
          name: 'operation'
        }, {
          type: 'uint256',
          name: 'safeTxGas'
        }, {
          type: 'uint256',
          name: 'baseGas'
        }, {
          type: 'uint256',
          name: 'gasPrice'
        }, {
          type: 'address',
          name: 'gasToken'
        }, {
          type: 'address',
          name: 'refundReceiver'
        }, {
          type: 'uint256',
          name: 'nonce'
        }]
      },
      domain: {
        verifyingContract: verifyingContract
      },
      primaryType: 'SafeTx',
      message: {
        to: to,
        value: value,
        data: data,
        operation: operation,
        safeTxGas: safeTxGas,
        baseGas: dataGas,
        gasPrice: gasPrice,
        gasToken: gasToken,
        refundReceiver: refundReceiver,
        nonce: nonce
      }
    };
  }
  function signTypedData(_x, _x2, _x3) {
    return _signTypedData.apply(this, arguments);
  }
  function _signTypedData() {
    _signTypedData = asyncToGenerator(
    regenerator.mark(function _callee(web3, address, typedData) {
      return regenerator.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return requestRPC(web3, 'eth_signTypedData', [address, typedData]);
            case 2:
              return _context.abrupt("return", _context.sent);
            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    return _signTypedData.apply(this, arguments);
  }

  function _requestRelayer2(_x, _x2) {
    return _requestRelayer.apply(this, arguments);
  }
  function _requestRelayer() {
    _requestRelayer = asyncToGenerator(
    regenerator.mark(function _callee3(endpoint, userOptions) {
      var options, path, method, data, version, request, paramsStr, url;
      return regenerator.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              options = checkOptions(userOptions, {
                path: {
                  type: 'array'
                },
                version: {
                  type: 'number',
                  "default": 1
                },
                method: {
                  type: 'string',
                  "default": 'GET'
                },
                data: {
                  type: 'object',
                  "default": {}
                }
              });
              path = options.path, method = options.method, data = options.data, version = options.version;
              request = {
                method: method,
                headers: {
                  'Content-Type': 'application/json'
                }
              };
              paramsStr = '';
              if (method === 'GET') {
                paramsStr = parameterize(data);
              } else {
                request.body = JSON.stringify(data);
              }
              url = "".concat(endpoint, "/api/v").concat(version, "/").concat(path.join('/'), "/").concat(paramsStr);
              _context3.prev = 6;
              return _context3.abrupt("return", fetch(url, request).then(function (response) {
                if (response.status >= 400) {
                  throw new Error("Relayer responded with error ".concat(response.status));
                }
                var contentType = response.headers.get('content-type');
                if (contentType && contentType.includes('application/json')) {
                  return response.json().then(function (json) {
                    return json;
                  });
                } else {
                  return response;
                }
              }));
            case 10:
              _context3.prev = 10;
              _context3.t0 = _context3["catch"](6);
              throw new Error(_context3.t0);
            case 13:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, null, [[6, 10]]);
    }));
    return _requestRelayer.apply(this, arguments);
  }
  function estimateTransactionCosts(_x3, _x4) {
    return _estimateTransactionCosts.apply(this, arguments);
  }
  function _estimateTransactionCosts() {
    _estimateTransactionCosts = asyncToGenerator(
    regenerator.mark(function _callee4(endpoint, _ref) {
      var safeAddress, to, txData, _ref$value, value, _ref$gasToken, gasToken, _ref$operation, operation;
      return regenerator.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              safeAddress = _ref.safeAddress, to = _ref.to, txData = _ref.txData, _ref$value = _ref.value, value = _ref$value === void 0 ? 0 : _ref$value, _ref$gasToken = _ref.gasToken, gasToken = _ref$gasToken === void 0 ? ZERO_ADDRESS : _ref$gasToken, _ref$operation = _ref.operation, operation = _ref$operation === void 0 ? CALL_OP : _ref$operation;
              _context4.next = 3;
              return _requestRelayer2(endpoint, {
                path: ['safes', safeAddress, 'transactions', 'estimate'],
                method: 'POST',
                version: 2,
                data: {
                  safe: safeAddress,
                  data: txData,
                  to: to,
                  value: value,
                  operation: operation,
                  gasToken: gasToken
                }
              });
            case 3:
              return _context4.abrupt("return", _context4.sent);
            case 4:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));
    return _estimateTransactionCosts.apply(this, arguments);
  }
  function createUtilsModule(web3, contracts, globalOptions) {
    var relayServiceEndpoint = globalOptions.relayServiceEndpoint;
    return {
      requestRelayer: function () {
        var _requestRelayer3 = asyncToGenerator(
        regenerator.mark(function _callee(userOptions) {
          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  return _context.abrupt("return", _requestRelayer2(relayServiceEndpoint, userOptions));
                case 1:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));
        function requestRelayer(_x5) {
          return _requestRelayer3.apply(this, arguments);
        }
        return requestRelayer;
      }(),
      executeSafeTx: function () {
        var _executeSafeTx = asyncToGenerator(
        regenerator.mark(function _callee2(account, userOptions) {
          var options, to, txData, value, safeAddress, operation, gasToken, refundReceiver, _ref2, dataGas, safeTxGas, gasPrice, nonce, typedData, signatureBytes, sig, signature;
          return regenerator.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  checkAccount(web3, account);
                  options = checkOptions(userOptions, {
                    safeAddress: {
                      type: web3.utils.isAddress
                    },
                    to: {
                      type: web3.utils.isAddress
                    },
                    txData: {
                      type: web3.utils.isHexStrict,
                      "default": '0x'
                    },
                    value: {
                      type: 'number',
                      "default": 0
                    }
                  });
                  to = options.to, txData = options.txData, value = options.value, safeAddress = options.safeAddress;
                  operation = CALL_OP;
                  gasToken = ZERO_ADDRESS;
                  refundReceiver = ZERO_ADDRESS;
                  _context2.next = 8;
                  return estimateTransactionCosts(relayServiceEndpoint, {
                    gasToken: gasToken,
                    operation: operation,
                    safeAddress: safeAddress,
                    to: to,
                    txData: txData,
                    value: value
                  });
                case 8:
                  _ref2 = _context2.sent;
                  dataGas = _ref2.dataGas;
                  safeTxGas = _ref2.safeTxGas;
                  gasPrice = _ref2.gasPrice;
                  _context2.next = 14;
                  return getSafeContract(web3, safeAddress).methods.nonce().call();
                case 14:
                  nonce = _context2.sent;
                  typedData = formatTypedData(to, value, txData, operation, safeTxGas, dataGas, gasPrice, gasToken, refundReceiver, nonce, safeAddress);
                  _context2.next = 18;
                  return signTypedData(web3, account.address, typedData);
                case 18:
                  signatureBytes = _context2.sent;
                  sig = signatureBytes.slice(2);
                  signature = {
                    r: web3.utils.toBN("0x".concat(sig.slice(0, 64))).toString(10),
                    s: web3.utils.toBN("0x".concat(sig.slice(64, 128))).toString(10),
                    v: web3.utils.toDecimal(sig.slice(128, 130))
                  };
                  return _context2.abrupt("return", _requestRelayer2(relayServiceEndpoint, {
                    path: ['safes', safeAddress, 'transactions'],
                    method: 'POST',
                    version: 1,
                    data: {
                      to: to,
                      value: value,
                      data: txData,
                      operation: operation,
                      signatures: [signature],
                      safeTxGas: safeTxGas,
                      dataGas: dataGas,
                      gasPrice: gasPrice,
                      nonce: nonce,
                      gasToken: gasToken
                    }
                  }));
                case 22:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2);
        }));
        function executeSafeTx(_x6, _x7) {
          return _executeSafeTx.apply(this, arguments);
        }
        return executeSafeTx;
      }()
    };
  }

  var CirclesCore =
  function CirclesCore(web3, options) {
    classCallCheck(this, CirclesCore);
    if (!web3) {
      throw new Error('Web3 instance missing');
    }
    this.web3 = web3;
    this.options = checkOptions(options, {
      hubAddress: {
        type: web3.utils.isAddress
      },
      proxyFactoryAddress: {
        type: web3.utils.isAddress
      },
      safeMasterAddress: {
        type: web3.utils.isAddress
      },
      relayServiceEndpoint: {
        type: 'string'
      }
    });
    this.contracts = getContracts(web3, this.options);
    this.utils = createUtilsModule(web3, this.contracts, this.options);
    this.safe = createSafeModule(web3, this.contracts, this.utils);
  };

  return CirclesCore;

}));
